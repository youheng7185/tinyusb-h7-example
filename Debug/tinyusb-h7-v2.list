
tinyusb-h7-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800af54  0800af54  0000bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b1cc  0800b1cc  0000c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b1d4  0800b1d4  0000c1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b1d8  0800b1d8  0000c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000034  24000000  0800b1dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000abc  24000034  0800b210  0000d034  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000af0  0800b210  0000daf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021835  00000000  00000000  0000d062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004494  00000000  00000000  0002e897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001400  00000000  00000000  00032d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000feb  00000000  00000000  00034130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037473  00000000  00000000  0003511b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ac66  00000000  00000000  0006c58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b9ee  00000000  00000000  000871f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e2be2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005404  00000000  00000000  001e2c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e802c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000034 	.word	0x24000034
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800af3c 	.word	0x0800af3c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000038 	.word	0x24000038
 8000308:	0800af3c 	.word	0x0800af3c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96a 	b.w	8000608 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	460c      	mov	r4, r1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14e      	bne.n	80003f6 <__udivmoddi4+0xaa>
 8000358:	4694      	mov	ip, r2
 800035a:	458c      	cmp	ip, r1
 800035c:	4686      	mov	lr, r0
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	d962      	bls.n	800042a <__udivmoddi4+0xde>
 8000364:	b14a      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000366:	f1c2 0320 	rsb	r3, r2, #32
 800036a:	4091      	lsls	r1, r2
 800036c:	fa20 f303 	lsr.w	r3, r0, r3
 8000370:	fa0c fc02 	lsl.w	ip, ip, r2
 8000374:	4319      	orrs	r1, r3
 8000376:	fa00 fe02 	lsl.w	lr, r0, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f f68c 	uxth.w	r6, ip
 8000382:	fbb1 f4f7 	udiv	r4, r1, r7
 8000386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038a:	fb07 1114 	mls	r1, r7, r4, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb04 f106 	mul.w	r1, r4, r6
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a2:	f080 8112 	bcs.w	80005ca <__udivmoddi4+0x27e>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 810f 	bls.w	80005ca <__udivmoddi4+0x27e>
 80003ac:	3c02      	subs	r4, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ba:	fb07 1110 	mls	r1, r7, r0, r1
 80003be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c2:	fb00 f606 	mul.w	r6, r0, r6
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x94>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	f080 80fc 	bcs.w	80005ce <__udivmoddi4+0x282>
 80003d6:	429e      	cmp	r6, r3
 80003d8:	f240 80f9 	bls.w	80005ce <__udivmoddi4+0x282>
 80003dc:	4463      	add	r3, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa6>
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xba>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb4>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x150>
 800040e:	42a3      	cmp	r3, r4
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xcc>
 8000412:	4290      	cmp	r0, r2
 8000414:	f0c0 80f0 	bcc.w	80005f8 <__udivmoddi4+0x2ac>
 8000418:	1a86      	subs	r6, r0, r2
 800041a:	eb64 0303 	sbc.w	r3, r4, r3
 800041e:	2001      	movs	r0, #1
 8000420:	2d00      	cmp	r5, #0
 8000422:	d0e6      	beq.n	80003f2 <__udivmoddi4+0xa6>
 8000424:	e9c5 6300 	strd	r6, r3, [r5]
 8000428:	e7e3      	b.n	80003f2 <__udivmoddi4+0xa6>
 800042a:	2a00      	cmp	r2, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x204>
 8000430:	eba1 040c 	sub.w	r4, r1, ip
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	2101      	movs	r1, #1
 800043e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000442:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000446:	fb08 4416 	mls	r4, r8, r6, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb07 f006 	mul.w	r0, r7, r6
 8000452:	4298      	cmp	r0, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x11c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f106 34ff 	add.w	r4, r6, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x11a>
 8000460:	4298      	cmp	r0, r3
 8000462:	f200 80cd 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 8000466:	4626      	mov	r6, r4
 8000468:	1a1c      	subs	r4, r3, r0
 800046a:	fa1f f38e 	uxth.w	r3, lr
 800046e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000472:	fb08 4410 	mls	r4, r8, r0, r4
 8000476:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047a:	fb00 f707 	mul.w	r7, r0, r7
 800047e:	429f      	cmp	r7, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x148>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x146>
 800048c:	429f      	cmp	r7, r3
 800048e:	f200 80b0 	bhi.w	80005f2 <__udivmoddi4+0x2a6>
 8000492:	4620      	mov	r0, r4
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x9c>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004ac:	fa04 f301 	lsl.w	r3, r4, r1
 80004b0:	ea43 030c 	orr.w	r3, r3, ip
 80004b4:	40f4      	lsrs	r4, r6
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	0c38      	lsrs	r0, r7, #16
 80004bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c0:	fbb4 fef0 	udiv	lr, r4, r0
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fb00 441e 	mls	r4, r0, lr, r4
 80004cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d0:	fb0e f90c 	mul.w	r9, lr, ip
 80004d4:	45a1      	cmp	r9, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1a6>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e2:	f080 8084 	bcs.w	80005ee <__udivmoddi4+0x2a2>
 80004e6:	45a1      	cmp	r9, r4
 80004e8:	f240 8081 	bls.w	80005ee <__udivmoddi4+0x2a2>
 80004ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	eba4 0409 	sub.w	r4, r4, r9
 80004f6:	fa1f f983 	uxth.w	r9, r3
 80004fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80004fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000502:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000506:	fb03 fc0c 	mul.w	ip, r3, ip
 800050a:	45a4      	cmp	ip, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x1d2>
 800050e:	193c      	adds	r4, r7, r4
 8000510:	f103 30ff 	add.w	r0, r3, #4294967295
 8000514:	d267      	bcs.n	80005e6 <__udivmoddi4+0x29a>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d965      	bls.n	80005e6 <__udivmoddi4+0x29a>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000522:	fba0 9302 	umull	r9, r3, r0, r2
 8000526:	eba4 040c 	sub.w	r4, r4, ip
 800052a:	429c      	cmp	r4, r3
 800052c:	46ce      	mov	lr, r9
 800052e:	469c      	mov	ip, r3
 8000530:	d351      	bcc.n	80005d6 <__udivmoddi4+0x28a>
 8000532:	d04e      	beq.n	80005d2 <__udivmoddi4+0x286>
 8000534:	b155      	cbz	r5, 800054c <__udivmoddi4+0x200>
 8000536:	ebb8 030e 	subs.w	r3, r8, lr
 800053a:	eb64 040c 	sbc.w	r4, r4, ip
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431e      	orrs	r6, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	e9c5 6400 	strd	r6, r4, [r5]
 800054c:	2100      	movs	r1, #0
 800054e:	e750      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f103 	lsr.w	r1, r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa24 f303 	lsr.w	r3, r4, r3
 8000560:	4094      	lsls	r4, r2
 8000562:	430c      	orrs	r4, r1
 8000564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000568:	fa00 fe02 	lsl.w	lr, r0, r2
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	fbb3 f0f8 	udiv	r0, r3, r8
 8000574:	fb08 3110 	mls	r1, r8, r0, r3
 8000578:	0c23      	lsrs	r3, r4, #16
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	fb00 f107 	mul.w	r1, r0, r7
 8000582:	4299      	cmp	r1, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x24c>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 36ff 	add.w	r6, r0, #4294967295
 800058e:	d22c      	bcs.n	80005ea <__udivmoddi4+0x29e>
 8000590:	4299      	cmp	r1, r3
 8000592:	d92a      	bls.n	80005ea <__udivmoddi4+0x29e>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1a5b      	subs	r3, r3, r1
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a0:	fb08 3311 	mls	r3, r8, r1, r3
 80005a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a8:	fb01 f307 	mul.w	r3, r1, r7
 80005ac:	42a3      	cmp	r3, r4
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x276>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005b8:	d213      	bcs.n	80005e2 <__udivmoddi4+0x296>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d911      	bls.n	80005e2 <__udivmoddi4+0x296>
 80005be:	3902      	subs	r1, #2
 80005c0:	4464      	add	r4, ip
 80005c2:	1ae4      	subs	r4, r4, r3
 80005c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005c8:	e739      	b.n	800043e <__udivmoddi4+0xf2>
 80005ca:	4604      	mov	r4, r0
 80005cc:	e6f0      	b.n	80003b0 <__udivmoddi4+0x64>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e706      	b.n	80003e0 <__udivmoddi4+0x94>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d2ae      	bcs.n	8000534 <__udivmoddi4+0x1e8>
 80005d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005da:	eb63 0c07 	sbc.w	ip, r3, r7
 80005de:	3801      	subs	r0, #1
 80005e0:	e7a8      	b.n	8000534 <__udivmoddi4+0x1e8>
 80005e2:	4631      	mov	r1, r6
 80005e4:	e7ed      	b.n	80005c2 <__udivmoddi4+0x276>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e799      	b.n	800051e <__udivmoddi4+0x1d2>
 80005ea:	4630      	mov	r0, r6
 80005ec:	e7d4      	b.n	8000598 <__udivmoddi4+0x24c>
 80005ee:	46d6      	mov	lr, sl
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1a6>
 80005f2:	4463      	add	r3, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e74d      	b.n	8000494 <__udivmoddi4+0x148>
 80005f8:	4606      	mov	r6, r0
 80005fa:	4623      	mov	r3, r4
 80005fc:	4608      	mov	r0, r1
 80005fe:	e70f      	b.n	8000420 <__udivmoddi4+0xd4>
 8000600:	3e02      	subs	r6, #2
 8000602:	4463      	add	r3, ip
 8000604:	e730      	b.n	8000468 <__udivmoddi4+0x11c>
 8000606:	bf00      	nop

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <echo_serial_port>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	73fb      	strb	r3, [r7, #15]
  uint8_t const case_diff = 'a' - 'A';
 800061a:	2320      	movs	r3, #32
 800061c:	74fb      	strb	r3, [r7, #19]

  for (uint32_t i = 0; i < count; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e043      	b.n	80006ac <echo_serial_port+0xa0>
    if (itf == 0) {
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d117      	bne.n	800065a <echo_serial_port+0x4e>
      // echo back 1st port as lower case
      if (isupper(buf[i])) buf[i] += case_diff;
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a23      	ldr	r2, [pc, #140]	@ (80006c4 <echo_serial_port+0xb8>)
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	2b01      	cmp	r3, #1
 8000640:	d122      	bne.n	8000688 <echo_serial_port+0x7c>
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	4413      	add	r3, r2
 8000648:	7819      	ldrb	r1, [r3, #0]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	4413      	add	r3, r2
 8000650:	7cfa      	ldrb	r2, [r7, #19]
 8000652:	440a      	add	r2, r1
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e016      	b.n	8000688 <echo_serial_port+0x7c>
    } else {
      // echo back 2nd port as upper case
      if (islower(buf[i])) buf[i] -= case_diff;
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <echo_serial_port+0xb8>)
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	2b02      	cmp	r3, #2
 8000670:	d10a      	bne.n	8000688 <echo_serial_port+0x7c>
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4413      	add	r3, r2
 8000680:	7cfa      	ldrb	r2, [r7, #19]
 8000682:	1a8a      	subs	r2, r1, r2
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	701a      	strb	r2, [r3, #0]
    }

    tud_cdc_n_write_char(itf, buf[i]);
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	74bb      	strb	r3, [r7, #18]
 8000694:	4613      	mov	r3, r2
 8000696:	747b      	strb	r3, [r7, #17]
// Write bytes to TX FIFO, data may remain in the FIFO for a while
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize);

// Write a byte
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch) {
  return tud_cdc_n_write(itf, &ch, 1);
 8000698:	f107 0111 	add.w	r1, r7, #17
 800069c:	7cbb      	ldrb	r3, [r7, #18]
 800069e:	2201      	movs	r2, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fbbf 	bl	8005e24 <tud_cdc_n_write>
  for (uint32_t i = 0; i < count; i++) {
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3b7      	bcc.n	8000624 <echo_serial_port+0x18>
  }
  tud_cdc_n_write_flush(itf);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fbe8 	bl	8005e8c <tud_cdc_n_write_flush>
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	0800b0c8 	.word	0x0800b0c8

080006c8 <tud_mount_cb>:

void tud_mount_cb(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <cdc_task>:

static void cdc_task(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b092      	sub	sp, #72	@ 0x48
 80006e8:	af00      	add	r7, sp, #0
  uint8_t itf;

  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80006f0:	e020      	b.n	8000734 <cdc_task+0x50>
    // connected() check for DTR bit
    // Most but not all terminal client set this when making connection
    // if ( tud_cdc_n_connected(itf) )
    {
      if (tud_cdc_n_available(itf)) {
 80006f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 fb52 	bl	8005da0 <tud_cdc_n_available>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d013      	beq.n	800072a <cdc_task+0x46>
        uint8_t buf[64];

        uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
 8000702:	4639      	mov	r1, r7
 8000704:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000708:	2240      	movs	r2, #64	@ 0x40
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fb5e 	bl	8005dcc <tud_cdc_n_read>
 8000710:	6438      	str	r0, [r7, #64]	@ 0x40

        // echo back to both serial ports
        echo_serial_port(0, buf, count);
 8000712:	463b      	mov	r3, r7
 8000714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000716:	4619      	mov	r1, r3
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff77 	bl	800060c <echo_serial_port>
        echo_serial_port(1, buf, count);
 800071e:	463b      	mov	r3, r7
 8000720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000722:	4619      	mov	r1, r3
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ff71 	bl	800060c <echo_serial_port>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800072a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800072e:	3301      	adds	r3, #1
 8000730:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000734:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000738:	2b01      	cmp	r3, #1
 800073a:	d9da      	bls.n	80006f2 <cdc_task+0xe>
      }
    }
  }
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3748      	adds	r7, #72	@ 0x48
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fbc0 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f81c 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f908 	bl	8000968 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000758:	f000 f888 	bl	800086c <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 800075c:	f000 f8d2 	bl	8000904 <MX_USB_OTG_HS_PCD_Init>
 8000760:	2300      	movs	r3, #0
 8000762:	71fb      	strb	r3, [r7, #7]
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 8000764:	2301      	movs	r3, #1
 8000766:	713b      	strb	r3, [r7, #4]
 8000768:	2300      	movs	r3, #0
 800076a:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f006 fe06 	bl	8007384 <tud_rhport_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000778:	2100      	movs	r1, #0
 800077a:	f04f 30ff 	mov.w	r0, #4294967295
 800077e:	f006 ff35 	bl	80075ec <tud_task_ext>
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  tud_task();
	  cdc_task();
 8000784:	f7ff ffae 	bl	80006e4 <cdc_task>
	  tud_task();
 8000788:	bf00      	nop
 800078a:	e7f5      	b.n	8000778 <main+0x32>

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09c      	sub	sp, #112	@ 0x70
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	224c      	movs	r2, #76	@ 0x4c
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00a fb93 	bl	800aec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2220      	movs	r2, #32
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00a fb8d 	bl	800aec6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ac:	2002      	movs	r0, #2
 80007ae:	f001 f82d 	bl	800180c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <SystemClock_Config+0xdc>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <SystemClock_Config+0xdc>)
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <SystemClock_Config+0xdc>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ce:	bf00      	nop
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <SystemClock_Config+0xdc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007dc:	d1f8      	bne.n	80007d0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007de:	2321      	movs	r3, #33	@ 0x21
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80007f8:	232c      	movs	r3, #44	@ 0x2c
 80007fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000800:	2305      	movs	r3, #5
 8000802:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000808:	230c      	movs	r3, #12
 800080a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080c:	2300      	movs	r3, #0
 800080e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f841 	bl	80018a0 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000824:	f000 f8ca 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	233f      	movs	r3, #63	@ 0x3f
 800082a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000834:	2308      	movs	r3, #8
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000838:	2340      	movs	r3, #64	@ 0x40
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800083c:	2340      	movs	r3, #64	@ 0x40
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000846:	2340      	movs	r3, #64	@ 0x40
 8000848:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2103      	movs	r1, #3
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fc00 	bl	8002054 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800085a:	f000 f8af 	bl	80009bc <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3770      	adds	r7, #112	@ 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58024800 	.word	0x58024800

0800086c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <MX_LPUART1_UART_Init+0x94>)
 8000874:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000876:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008b6:	f003 fd1b 	bl	80042f0 <HAL_UART_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f87c 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008c8:	f004 fe27 	bl	800551a <HAL_UARTEx_SetTxFifoThreshold>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f873 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008da:	f004 fe5c 	bl	8005596 <HAL_UARTEx_SetRxFifoThreshold>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f86a 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008ea:	f004 fddd 	bl	80054a8 <HAL_UARTEx_DisableFifoMode>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f862 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000050 	.word	0x24000050
 8000900:	58000c00 	.word	0x58000c00

08000904 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	@ (8000964 <MX_USB_OTG_HS_PCD_Init+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000910:	2209      	movs	r2, #9
 8000912:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000916:	2202      	movs	r2, #2
 8000918:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000922:	2202      	movs	r2, #2
 8000924:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800093a:	2200      	movs	r2, #0
 800093c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800094c:	f000 fe2e 	bl	80015ac <HAL_PCD_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 f831 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	240000e4 	.word	0x240000e4
 8000964:	40040000 	.word	0x40040000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_GPIO_Init+0x50>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	4a10      	ldr	r2, [pc, #64]	@ (80009b8 <MX_GPIO_Init+0x50>)
 8000976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_GPIO_Init+0x50>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_GPIO_Init+0x50>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <MX_GPIO_Init+0x50>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_GPIO_Init+0x50>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	58024400 	.word	0x58024400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_MspInit+0x30>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x30>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x30>)
 80009e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	58024400 	.word	0x58024400

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	22b8      	movs	r2, #184	@ 0xb8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00a fa52 	bl	800aec6 <memset>
  if(huart->Instance==LPUART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a27      	ldr	r2, [pc, #156]	@ (8000ac4 <HAL_UART_MspInit+0xc8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d146      	bne.n	8000aba <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a2c:	f04f 0204 	mov.w	r2, #4
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fe92 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a4e:	f7ff ffb5 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0xd0>)
 8000ab6:	f000 fbd1 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	37e0      	adds	r7, #224	@ 0xe0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	58000c00 	.word	0x58000c00
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020000 	.word	0x58020000

08000ad0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0b2      	sub	sp, #200	@ 0xc8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	22b8      	movs	r2, #184	@ 0xb8
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00a f9f0 	bl	800aec6 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <HAL_PCD_MspInit+0x84>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d12c      	bne.n	8000b4a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000af0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000afc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000b00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fe2f 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8000b14:	f7ff ff52 	bl	80009bc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000b18:	f000 feb2 	bl	8001880 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_PCD_MspInit+0x88>)
 8000b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b22:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <HAL_PCD_MspInit+0x88>)
 8000b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_PCD_MspInit+0x88>)
 8000b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	204d      	movs	r0, #77	@ 0x4d
 8000b40:	f000 fb57 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000b44:	204d      	movs	r0, #77	@ 0x4d
 8000b46:	f000 fb6e 	bl	8001226 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	37c8      	adds	r7, #200	@ 0xc8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40040000 	.word	0x40040000
 8000b58:	58024400 	.word	0x58024400

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f9ff 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
  tud_int_handler(0);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f009 fc68 	bl	800a494 <dcd_int_handler>
  return;
 8000bc4:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <board_usb_get_serial>:
  board_led_write(false);
}

// Get USB Serial number string from unique ID if available. Return number of character.
// Input is string descriptor from index 1 (index 0 is type + len)
static inline size_t board_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b091      	sub	sp, #68	@ 0x44
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  // TODO work with make, but not working with esp32s3 cmake
  if ( board_get_unique_id ) {
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <board_usb_get_serial+0xc4>)
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <board_usb_get_serial+0x20>
    uid_len = board_get_unique_id(uid, sizeof(uid));
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4618      	mov	r0, r3
 8000be0:	f3af 8000 	nop.w
 8000be4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000be6:	e00b      	b.n	8000c00 <board_usb_get_serial+0x38>
  }else {
    // fixed serial string is 01234567889ABCDEF
    uint32_t* uid32 = (uint32_t*) (uintptr_t) uid;
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
    uid32[0] = 0x67452301;
 8000bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <board_usb_get_serial+0xc8>)
 8000bf2:	601a      	str	r2, [r3, #0]
    uid32[1] = 0xEFCDAB89;
 8000bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <board_usb_get_serial+0xcc>)
 8000bfa:	601a      	str	r2, [r3, #0]
    uid_len = 8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	085b      	lsrs	r3, r3, #1
 8000c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d902      	bls.n	8000c10 <board_usb_get_serial+0x48>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for ( size_t i = 0; i < uid_len; i++ ) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c14:	e030      	b.n	8000c78 <board_usb_get_serial+0xb0>
    for ( size_t j = 0; j < 2; j++ ) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c1a:	e027      	b.n	8000c6c <board_usb_get_serial+0xa4>
      const char nibble_to_hex[16] = {
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <board_usb_get_serial+0xd0>)
 8000c1e:	f107 040c 	add.w	r4, r7, #12
 8000c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 8000c28:	f107 021c 	add.w	r2, r7, #28
 8000c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	fa42 f303 	asr.w	r3, r2, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c4a:	3340      	adds	r3, #64	@ 0x40
 8000c4c:	443b      	add	r3, r7
 8000c4e:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8000c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c54:	005a      	lsls	r2, r3, #1
 8000c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	801a      	strh	r2, [r3, #0]
    for ( size_t j = 0; j < 2; j++ ) {
 8000c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c68:	3301      	adds	r3, #1
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d9d4      	bls.n	8000c1c <board_usb_get_serial+0x54>
  for ( size_t i = 0; i < uid_len; i++ ) {
 8000c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c74:	3301      	adds	r3, #1
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3ca      	bcc.n	8000c16 <board_usb_get_serial+0x4e>
    }
  }

  return 2 * uid_len;
 8000c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c82:	005b      	lsls	r3, r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3744      	adds	r7, #68	@ 0x44
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	00000000 	.word	0x00000000
 8000c90:	67452301 	.word	0x67452301
 8000c94:	efcdab89 	.word	0xefcdab89
 8000c98:	0800af54 	.word	0x0800af54

08000c9c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <tud_descriptor_device_cb+0x10>)
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	0800af88 	.word	0x0800af88

08000cb0 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8000cba:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	0800af9c 	.word	0x0800af9c

08000ccc <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <tud_descriptor_string_cb+0x1c>
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d009      	beq.n	8000cfa <tud_descriptor_string_cb+0x2e>
 8000ce6:	e00f      	b.n	8000d08 <tud_descriptor_string_cb+0x3c>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000ce8:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <tud_descriptor_string_cb+0xb4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <tud_descriptor_string_cb+0xb8>)
 8000cf2:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
      break;
 8000cf8:	e031      	b.n	8000d5e <tud_descriptor_string_cb+0x92>

    case STRID_SERIAL:
      chr_count = board_usb_get_serial(_desc_str + 1, 32);
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <tud_descriptor_string_cb+0xbc>)
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff62 	bl	8000bc8 <board_usb_get_serial>
 8000d04:	6178      	str	r0, [r7, #20]
      break;
 8000d06:	e02a      	b.n	8000d5e <tud_descriptor_string_cb+0x92>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d901      	bls.n	8000d12 <tud_descriptor_string_cb+0x46>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e031      	b.n	8000d76 <tud_descriptor_string_cb+0xaa>

      const char *str = string_desc_arr[index];
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4a1a      	ldr	r2, [pc, #104]	@ (8000d80 <tud_descriptor_string_cb+0xb4>)
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f7ff faf5 	bl	800030c <strlen>
 8000d22:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8000d24:	2320      	movs	r3, #32
 8000d26:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d901      	bls.n	8000d34 <tud_descriptor_string_cb+0x68>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	e00c      	b.n	8000d54 <tud_descriptor_string_cb+0x88>
        _desc_str[1 + i] = str[i];
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4611      	mov	r1, r2
 8000d48:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <tud_descriptor_string_cb+0xb8>)
 8000d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	3301      	adds	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3ee      	bcc.n	8000d3a <tud_descriptor_string_cb+0x6e>
      }
      break;
 8000d5c:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <tud_descriptor_string_cb+0xb8>)
 8000d72:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <tud_descriptor_string_cb+0xb8>)
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000000 	.word	0x24000000
 8000d84:	240005c8 	.word	0x240005c8
 8000d88:	240005ca 	.word	0x240005ca

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f000 f826 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f00a f88d 	bl	800aed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fcc2 	bl	8000746 <main>
  bx  lr
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000dc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dcc:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 8000dd0:	0800b1dc 	.word	0x0800b1dc
  ldr r2, =_sbss
 8000dd4:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 8000dd8:	24000af0 	.word	0x24000af0

08000ddc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC3_IRQHandler>
	...

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de4:	4b32      	ldr	r3, [pc, #200]	@ (8000eb0 <SystemInit+0xd0>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a31      	ldr	r2, [pc, #196]	@ (8000eb0 <SystemInit+0xd0>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <SystemInit+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d807      	bhi.n	8000e10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e00:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <SystemInit+0xd4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 030f 	bic.w	r3, r3, #15
 8000e08:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb4 <SystemInit+0xd4>)
 8000e0a:	f043 0307 	orr.w	r3, r3, #7
 8000e0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <SystemInit+0xd8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <SystemInit+0xd8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <SystemInit+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <SystemInit+0xd8>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4924      	ldr	r1, [pc, #144]	@ (8000eb8 <SystemInit+0xd8>)
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <SystemInit+0xdc>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <SystemInit+0xd4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <SystemInit+0xd4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 030f 	bic.w	r3, r3, #15
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <SystemInit+0xd4>)
 8000e44:	f043 0307 	orr.w	r3, r3, #7
 8000e48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <SystemInit+0xd8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <SystemInit+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <SystemInit+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <SystemInit+0xd8>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <SystemInit+0xe0>)
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <SystemInit+0xd8>)
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <SystemInit+0xe4>)
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <SystemInit+0xd8>)
 8000e6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <SystemInit+0xe8>)
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <SystemInit+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e74:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <SystemInit+0xd8>)
 8000e76:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <SystemInit+0xe8>)
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <SystemInit+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <SystemInit+0xd8>)
 8000e82:	4a11      	ldr	r2, [pc, #68]	@ (8000ec8 <SystemInit+0xe8>)
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <SystemInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <SystemInit+0xd8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <SystemInit+0xd8>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <SystemInit+0xd8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <SystemInit+0xec>)
 8000ea0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ea4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	52002000 	.word	0x52002000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ec0:	02020200 	.word	0x02020200
 8000ec4:	01ff0000 	.word	0x01ff0000
 8000ec8:	01010280 	.word	0x01010280
 8000ecc:	52004000 	.word	0x52004000

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f980 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000edc:	f001 fa70 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	4913      	ldr	r1, [pc, #76]	@ (8000f3c <HAL_Init+0x6c>)
 8000eee:	5ccb      	ldrb	r3, [r1, r3]
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_Init+0x68>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_Init+0x6c>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f10:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <HAL_Init+0x70>)
 8000f12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_Init+0x74>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f814 	bl	8000f48 <HAL_InitTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e002      	b.n	8000f30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2a:	f7ff fd4d 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	0800b030 	.word	0x0800b030
 8000f40:	24000018 	.word	0x24000018
 8000f44:	24000014 	.word	0x24000014

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_InitTick+0x60>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e021      	b.n	8000fa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_InitTick+0x64>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_InitTick+0x60>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f965 	bl	8001242 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f92f 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <HAL_InitTick+0x68>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000020 	.word	0x24000020
 8000fac:	24000014 	.word	0x24000014
 8000fb0:	2400001c 	.word	0x2400001c

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	24000020 	.word	0x24000020
 8000fd8:	2400060c 	.word	0x2400060c

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2400060c 	.word	0x2400060c

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24000020 	.word	0x24000020

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <__NVIC_SetPriority+0x50>)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff29 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff40 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff33 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa4 	bl	8001198 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800126a:	4b86      	ldr	r3, [pc, #536]	@ (8001484 <HAL_GPIO_Init+0x228>)
 800126c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800126e:	e18c      	b.n	800158a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 817e 	beq.w	8001584 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d005      	beq.n	80012a0 <HAL_GPIO_Init+0x44>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d130      	bne.n	8001302 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d6:	2201      	movs	r2, #1
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 0201 	and.w	r2, r3, #1
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b03      	cmp	r3, #3
 800130c:	d017      	beq.n	800133e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d123      	bne.n	8001392 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0203 	and.w	r2, r3, #3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80d8 	beq.w	8001584 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <HAL_GPIO_Init+0x22c>)
 80013d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <HAL_GPIO_Init+0x22c>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_GPIO_Init+0x22c>)
 80013e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x230>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <HAL_GPIO_Init+0x234>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d04a      	beq.n	80014b4 <HAL_GPIO_Init+0x258>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <HAL_GPIO_Init+0x238>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x222>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_GPIO_Init+0x23c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x21e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <HAL_GPIO_Init+0x240>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x21a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a19      	ldr	r2, [pc, #100]	@ (80014a0 <HAL_GPIO_Init+0x244>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x216>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <HAL_GPIO_Init+0x248>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x212>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_GPIO_Init+0x24c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x20e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <HAL_GPIO_Init+0x250>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x20a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_GPIO_Init+0x254>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x206>
 800145e:	2309      	movs	r3, #9
 8001460:	e029      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 8001462:	230a      	movs	r3, #10
 8001464:	e027      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 8001466:	2307      	movs	r3, #7
 8001468:	e025      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 800146a:	2306      	movs	r3, #6
 800146c:	e023      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 800146e:	2305      	movs	r3, #5
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 8001472:	2304      	movs	r3, #4
 8001474:	e01f      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 8001476:	2303      	movs	r3, #3
 8001478:	e01d      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 800147a:	2302      	movs	r3, #2
 800147c:	e01b      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 800147e:	2301      	movs	r3, #1
 8001480:	e019      	b.n	80014b6 <HAL_GPIO_Init+0x25a>
 8001482:	bf00      	nop
 8001484:	58000080 	.word	0x58000080
 8001488:	58024400 	.word	0x58024400
 800148c:	58000400 	.word	0x58000400
 8001490:	58020000 	.word	0x58020000
 8001494:	58020400 	.word	0x58020400
 8001498:	58020800 	.word	0x58020800
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58021000 	.word	0x58021000
 80014a4:	58021400 	.word	0x58021400
 80014a8:	58021800 	.word	0x58021800
 80014ac:	58021c00 	.word	0x58021c00
 80014b0:	58022400 	.word	0x58022400
 80014b4:	2300      	movs	r3, #0
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c6:	4938      	ldr	r1, [pc, #224]	@ (80015a8 <HAL_GPIO_Init+0x34c>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	3301      	adds	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f ae6b 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3724      	adds	r7, #36	@ 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	58000400 	.word	0x58000400

080015ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0fe      	b.n	80017bc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fa7c 	bl	8000ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 f8d5 	bl	8005794 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7c1a      	ldrb	r2, [r3, #16]
 80015f2:	f88d 2000 	strb.w	r2, [sp]
 80015f6:	3304      	adds	r3, #4
 80015f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fa:	f004 f859 	bl	80056b0 <USB_CoreInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0d5      	b.n	80017bc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f004 f8cd 	bl	80057b6 <USB_SetCurrentMode>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0c6      	b.n	80017bc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e04a      	b.n	80016ca <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3314      	adds	r3, #20
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b298      	uxth	r0, r3
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	332e      	adds	r3, #46	@ 0x2e
 8001670:	4602      	mov	r2, r0
 8001672:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3318      	adds	r3, #24
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	331c      	adds	r3, #28
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3320      	adds	r3, #32
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3324      	adds	r3, #36	@ 0x24
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	3301      	adds	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d3af      	bcc.n	8001634 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e044      	b.n	8001764 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	3301      	adds	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	429a      	cmp	r2, r3
 800176c:	d3b5      	bcc.n	80016da <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7c1a      	ldrb	r2, [r3, #16]
 8001776:	f88d 2000 	strb.w	r2, [sp]
 800177a:	3304      	adds	r3, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	f004 f867 	bl	8005850 <USB_DevInit>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e013      	b.n	80017bc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7b1b      	ldrb	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f80a 	bl	80017c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fa22 	bl	8005bfe <USB_DevDisconnect>

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_PCDEx_ActivateLPM+0x44>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	10000003 	.word	0x10000003

0800180c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_PWREx_ConfigSupply+0x70>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00a      	beq.n	8001836 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_PWREx_ConfigSupply+0x70>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e01f      	b.n	8001872 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e01d      	b.n	8001872 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_PWREx_ConfigSupply+0x70>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	490f      	ldr	r1, [pc, #60]	@ (800187c <HAL_PWREx_ConfigSupply+0x70>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4313      	orrs	r3, r2
 8001844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001846:	f7ff fbc9 	bl	8000fdc <HAL_GetTick>
 800184a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800184c:	e009      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800184e:	f7ff fbc5 	bl	8000fdc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800185c:	d901      	bls.n	8001862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e007      	b.n	8001872 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_PWREx_ConfigSupply+0x70>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800186e:	d1ee      	bne.n	800184e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	58024800 	.word	0x58024800

08001880 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	58024800 	.word	0x58024800

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3c8      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8087 	beq.w	80019ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c0:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ca:	4b86      	ldr	r3, [pc, #536]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d007      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46>
 80018d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d8:	2b18      	cmp	r3, #24
 80018da:	d110      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
 80018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d10b      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d06c      	beq.n	80019cc <HAL_RCC_OscConfig+0x12c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d168      	bne.n	80019cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e3a2      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x76>
 8001908:	4b76      	ldr	r3, [pc, #472]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a75      	ldr	r2, [pc, #468]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e02e      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b71      	ldr	r3, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a70      	ldr	r2, [pc, #448]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6d      	ldr	r2, [pc, #436]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0xbc>
 8001942:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a67      	ldr	r2, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b65      	ldr	r3, [pc, #404]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a64      	ldr	r2, [pc, #400]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 800195c:	4b61      	ldr	r3, [pc, #388]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a60      	ldr	r2, [pc, #384]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb2e 	bl	8000fdc <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fb2a 	bl	8000fdc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e356      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xe4>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb1a 	bl	8000fdc <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fb16 	bl	8000fdc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e342      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x10c>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 808c 	beq.w	8001af4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019dc:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019e6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_RCC_OscConfig+0x162>
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	2b18      	cmp	r3, #24
 80019f6:	d137      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d132      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x17a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e314      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0219 	bic.w	r2, r3, #25
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	492f      	ldr	r1, [pc, #188]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fad6 	bl	8000fdc <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fad2 	bl	8000fdc <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e2fe      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a46:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	061b      	lsls	r3, r3, #24
 8001a60:	4920      	ldr	r1, [pc, #128]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a66:	e045      	b.n	8001af4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d026      	beq.n	8001abe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0219 	bic.w	r2, r3, #25
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4919      	ldr	r1, [pc, #100]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff faab 	bl	8000fdc <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff faa7 	bl	8000fdc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e2d3      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	490b      	ldr	r1, [pc, #44]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e01a      	b.n	8001af4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa87 	bl	8000fdc <HAL_GetTick>
 8001ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa83 	bl	8000fdc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d903      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e2af      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
 8001ae4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae8:	4b96      	ldr	r3, [pc, #600]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06a      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b00:	4b90      	ldr	r3, [pc, #576]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d007      	beq.n	8001b26 <HAL_RCC_OscConfig+0x286>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b18      	cmp	r3, #24
 8001b1a:	d11b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2b4>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b26:	4b87      	ldr	r3, [pc, #540]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x29e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b80      	cmp	r3, #128	@ 0x80
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e282      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b3e:	4b81      	ldr	r3, [pc, #516]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	497d      	ldr	r1, [pc, #500]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b52:	e040      	b.n	8001bd6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b5c:	4b79      	ldr	r3, [pc, #484]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a78      	ldr	r2, [pc, #480]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fa38 	bl	8000fdc <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b70:	f7ff fa34 	bl	8000fdc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e260      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b82:	4b70      	ldr	r3, [pc, #448]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	4969      	ldr	r1, [pc, #420]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60cb      	str	r3, [r1, #12]
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ba4:	4b67      	ldr	r3, [pc, #412]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a66      	ldr	r2, [pc, #408]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa14 	bl	8000fdc <HAL_GetTick>
 8001bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fa10 	bl	8000fdc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e23c      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bca:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d036      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b56      	ldr	r3, [pc, #344]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bee:	4a55      	ldr	r2, [pc, #340]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f9f1 	bl	8000fdc <HAL_GetTick>
 8001bfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f9ed 	bl	8000fdc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e219      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c10:	4b4c      	ldr	r3, [pc, #304]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x35e>
 8001c1c:	e018      	b.n	8001c50 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c22:	4a48      	ldr	r2, [pc, #288]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f9d7 	bl	8000fdc <HAL_GetTick>
 8001c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff f9d3 	bl	8000fdc <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1ff      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c44:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d036      	beq.n	8001cca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c64:	4b37      	ldr	r3, [pc, #220]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a36      	ldr	r2, [pc, #216]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f9b4 	bl	8000fdc <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c78:	f7ff f9b0 	bl	8000fdc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1dc      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3d8>
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c98:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a29      	ldr	r2, [pc, #164]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f99a 	bl	8000fdc <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f996 	bl	8000fdc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1c2      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8086 	beq.w	8001de4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4a8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d48 <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f97a 	bl	8000fdc <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7ff f976 	bl	8000fdc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1a2      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_OscConfig+0x4a8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x480>
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1e:	e032      	b.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d111      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4ac>
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a02      	ldr	r2, [pc, #8]	@ (8001d44 <HAL_RCC_OscConfig+0x4a4>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d40:	e021      	b.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
 8001d42:	bf00      	nop
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58024800 	.word	0x58024800
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4ce>
 8001d54:	4b83      	ldr	r3, [pc, #524]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a82      	ldr	r2, [pc, #520]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d60:	4b80      	ldr	r3, [pc, #512]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d64:	4a7f      	ldr	r2, [pc, #508]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	4a7c      	ldr	r2, [pc, #496]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a79      	ldr	r2, [pc, #484]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f925 	bl	8000fdc <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff f921 	bl	8000fdc <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e14b      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dac:	4b6d      	ldr	r3, [pc, #436]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4f6>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff f90f 	bl	8000fdc <HAL_GetTick>
 8001dbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f90b 	bl	8000fdc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e135      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd8:	4b62      	ldr	r3, [pc, #392]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 812a 	beq.w	8002042 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dee:	4b5d      	ldr	r3, [pc, #372]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001df6:	2b18      	cmp	r3, #24
 8001df8:	f000 80ba 	beq.w	8001f70 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 8095 	bne.w	8001f30 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b57      	ldr	r3, [pc, #348]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f8e3 	bl	8000fdc <HAL_GetTick>
 8001e16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f8df 	bl	8000fdc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e10b      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_RCC_OscConfig+0x6c8>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	4945      	ldr	r1, [pc, #276]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e60:	3b01      	subs	r3, #1
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e82:	4938      	ldr	r1, [pc, #224]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e88:	4b36      	ldr	r3, [pc, #216]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	4a35      	ldr	r2, [pc, #212]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e94:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e98:	4b34      	ldr	r3, [pc, #208]	@ (8001f6c <HAL_RCC_OscConfig+0x6cc>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ea0:	00d2      	lsls	r2, r2, #3
 8001ea2:	4930      	ldr	r1, [pc, #192]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	f023 020c 	bic.w	r2, r3, #12
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	492b      	ldr	r1, [pc, #172]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f023 0202 	bic.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	4927      	ldr	r1, [pc, #156]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	4a24      	ldr	r2, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f868 	bl	8000fdc <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f864 	bl	8000fdc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e090      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x670>
 8001f2e:	e088      	b.n	8002042 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f84e 	bl	8000fdc <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f84a 	bl	8000fdc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e076      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f56:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_RCC_OscConfig+0x6c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x6a4>
 8001f62:	e06e      	b.n	8002042 <HAL_RCC_OscConfig+0x7a2>
 8001f64:	58024400 	.word	0x58024400
 8001f68:	fffffc0c 	.word	0xfffffc0c
 8001f6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f76:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d031      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d12a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d122      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0a5b      	lsrs	r3, r3, #9
 8001fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d111      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0c1b      	lsrs	r3, r3, #16
 8001fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0e1b      	lsrs	r3, r3, #24
 8001fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e02b      	b.n	8002044 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d01f      	beq.n	8002042 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200e:	f7fe ffe5 	bl	8000fdc <HAL_GetTick>
 8002012:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002014:	bf00      	nop
 8002016:	f7fe ffe1 	bl	8000fdc <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	4293      	cmp	r3, r2
 8002020:	d0f9      	beq.n	8002016 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8002024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_RCC_OscConfig+0x7b0>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	4906      	ldr	r1, [pc, #24]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_RCC_OscConfig+0x7ac>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3730      	adds	r7, #48	@ 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58024400 	.word	0x58024400
 8002050:	ffff0007 	.word	0xffff0007

08002054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e19c      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b8a      	ldr	r3, [pc, #552]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b87      	ldr	r3, [pc, #540]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	4985      	ldr	r1, [pc, #532]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b83      	ldr	r3, [pc, #524]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e184      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d908      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b4:	4b78      	ldr	r3, [pc, #480]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4975      	ldr	r1, [pc, #468]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020de:	429a      	cmp	r2, r3
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	496a      	ldr	r1, [pc, #424]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800210c:	429a      	cmp	r2, r3
 800210e:	d908      	bls.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002110:	4b61      	ldr	r3, [pc, #388]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	495e      	ldr	r1, [pc, #376]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800213a:	429a      	cmp	r2, r3
 800213c:	d908      	bls.n	8002150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800213e:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4953      	ldr	r1, [pc, #332]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800214c:	4313      	orrs	r3, r2
 800214e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f023 020f 	bic.w	r2, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4947      	ldr	r1, [pc, #284]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800217a:	4313      	orrs	r3, r2
 800217c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d055      	beq.n	8002236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800218a:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4940      	ldr	r1, [pc, #256]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0f6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021bc:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0ea      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0de      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f4:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f023 0207 	bic.w	r2, r3, #7
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4925      	ldr	r1, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002202:	4313      	orrs	r3, r2
 8002204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002206:	f7fe fee9 	bl	8000fdc <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	e00a      	b.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220e:	f7fe fee5 	bl	8000fdc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0be      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	429a      	cmp	r2, r3
 8002234:	d1eb      	bne.n	800220e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	490e      	ldr	r1, [pc, #56]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002260:	4313      	orrs	r3, r2
 8002262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d214      	bcs.n	800229c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	4906      	ldr	r1, [pc, #24]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e086      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
 8002294:	52002000 	.word	0x52002000
 8002298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b8:	4b3c      	ldr	r3, [pc, #240]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4939      	ldr	r1, [pc, #228]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d208      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	492e      	ldr	r1, [pc, #184]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4922      	ldr	r1, [pc, #136]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002322:	4313      	orrs	r3, r2
 8002324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d208      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4917      	ldr	r1, [pc, #92]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002350:	4313      	orrs	r3, r2
 8002352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002354:	f000 f834 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4912      	ldr	r1, [pc, #72]	@ (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x360>)
 800238a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800238c:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x364>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_ClockConfig+0x368>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fdd6 	bl	8000f48 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024400 	.word	0x58024400
 80023b0:	0800b030 	.word	0x0800b030
 80023b4:	24000018 	.word	0x24000018
 80023b8:	24000014 	.word	0x24000014
 80023bc:	2400001c 	.word	0x2400001c

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c6:	4bb3      	ldr	r3, [pc, #716]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ce:	2b18      	cmp	r3, #24
 80023d0:	f200 8155 	bhi.w	800267e <HAL_RCC_GetSysClockFreq+0x2be>
 80023d4:	a201      	add	r2, pc, #4	@ (adr r2, 80023dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	08002441 	.word	0x08002441
 80023e0:	0800267f 	.word	0x0800267f
 80023e4:	0800267f 	.word	0x0800267f
 80023e8:	0800267f 	.word	0x0800267f
 80023ec:	0800267f 	.word	0x0800267f
 80023f0:	0800267f 	.word	0x0800267f
 80023f4:	0800267f 	.word	0x0800267f
 80023f8:	0800267f 	.word	0x0800267f
 80023fc:	08002467 	.word	0x08002467
 8002400:	0800267f 	.word	0x0800267f
 8002404:	0800267f 	.word	0x0800267f
 8002408:	0800267f 	.word	0x0800267f
 800240c:	0800267f 	.word	0x0800267f
 8002410:	0800267f 	.word	0x0800267f
 8002414:	0800267f 	.word	0x0800267f
 8002418:	0800267f 	.word	0x0800267f
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800267f 	.word	0x0800267f
 8002424:	0800267f 	.word	0x0800267f
 8002428:	0800267f 	.word	0x0800267f
 800242c:	0800267f 	.word	0x0800267f
 8002430:	0800267f 	.word	0x0800267f
 8002434:	0800267f 	.word	0x0800267f
 8002438:	0800267f 	.word	0x0800267f
 800243c:	08002473 	.word	0x08002473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002440:	4b94      	ldr	r3, [pc, #592]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800244c:	4b91      	ldr	r3, [pc, #580]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	4a90      	ldr	r2, [pc, #576]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800245e:	e111      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002460:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002462:	61bb      	str	r3, [r7, #24]
      break;
 8002464:	e10e      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002466:	4b8d      	ldr	r3, [pc, #564]	@ (800269c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002468:	61bb      	str	r3, [r7, #24]
      break;
 800246a:	e10b      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800246c:	4b8c      	ldr	r3, [pc, #560]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800246e:	61bb      	str	r3, [r7, #24]
      break;
 8002470:	e108      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800247c:	4b85      	ldr	r3, [pc, #532]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002488:	4b82      	ldr	r3, [pc, #520]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002492:	4b80      	ldr	r3, [pc, #512]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80e1 	beq.w	8002678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f000 8083 	beq.w	80025c4 <HAL_RCC_GetSysClockFreq+0x204>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f200 80a1 	bhi.w	8002608 <HAL_RCC_GetSysClockFreq+0x248>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x114>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d056      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024d2:	e099      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250a:	4b62      	ldr	r3, [pc, #392]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251a:	ed97 6a02 	vldr	s12, [r7, #8]
 800251e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800252e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800253a:	e087      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800254a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002562:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257e:	e065      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800258e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002592:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025c2:	e043      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002606:	e021      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002612:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262a:	ed97 6a02 	vldr	s12, [r7, #8]
 800262e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800263e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800264a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	0a5b      	lsrs	r3, r3, #9
 8002652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002656:	3301      	adds	r3, #1
 8002658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002664:	edd7 6a07 	vldr	s13, [r7, #28]
 8002668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002670:	ee17 3a90 	vmov	r3, s15
 8002674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002676:	e005      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
      break;
 800267c:	e002      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002680:	61bb      	str	r3, [r7, #24]
      break;
 8002682:	bf00      	nop
  }

  return sysclockfreq;
 8002684:	69bb      	ldr	r3, [r7, #24]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	58024400 	.word	0x58024400
 8002698:	03d09000 	.word	0x03d09000
 800269c:	003d0900 	.word	0x003d0900
 80026a0:	017d7840 	.word	0x017d7840
 80026a4:	46000000 	.word	0x46000000
 80026a8:	4c742400 	.word	0x4c742400
 80026ac:	4a742400 	.word	0x4a742400
 80026b0:	4bbebc20 	.word	0x4bbebc20

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026ba:	f7ff fe81 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x50>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490f      	ldr	r1, [pc, #60]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x54>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x50>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4a09      	ldr	r2, [pc, #36]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x54>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_RCC_GetHCLKFreq+0x58>)
 80026f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026f2:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <HAL_RCC_GetHCLKFreq+0x58>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58024400 	.word	0x58024400
 8002708:	0800b030 	.word	0x0800b030
 800270c:	24000018 	.word	0x24000018
 8002710:	24000014 	.word	0x24000014

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002718:	f7ff ffcc 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58024400 	.word	0x58024400
 800273c:	0800b030 	.word	0x0800b030

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002744:	f7ff ffb6 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	58024400 	.word	0x58024400
 8002768:	0800b030 	.word	0x0800b030

0800276c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b0c6      	sub	sp, #280	@ 0x118
 8002772:	af00      	add	r7, sp, #0
 8002774:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002790:	2500      	movs	r5, #0
 8002792:	ea54 0305 	orrs.w	r3, r4, r5
 8002796:	d049      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800279c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800279e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027a2:	d02f      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027a8:	d828      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ae:	d01a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027b4:	d822      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027be:	d007      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c0:	e01c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c2:	4bab      	ldr	r3, [pc, #684]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	4aaa      	ldr	r2, [pc, #680]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ce:	e01a      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027d4:	3308      	adds	r3, #8
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fc25 	bl	8004028 <RCCEx_PLL2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027e4:	e00f      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ea:	3328      	adds	r3, #40	@ 0x28
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fccc 	bl	800418c <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027fa:	e004      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800280e:	4b98      	ldr	r3, [pc, #608]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800281a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800281c:	4a94      	ldr	r2, [pc, #592]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6513      	str	r3, [r2, #80]	@ 0x50
 8002822:	e003      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002838:	f04f 0900 	mov.w	r9, #0
 800283c:	ea58 0309 	orrs.w	r3, r8, r9
 8002840:	d047      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	2b04      	cmp	r3, #4
 800284a:	d82a      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800284c:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002869 	.word	0x08002869
 8002858:	08002877 	.word	0x08002877
 800285c:	0800288d 	.word	0x0800288d
 8002860:	080028ab 	.word	0x080028ab
 8002864:	080028ab 	.word	0x080028ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002868:	4b81      	ldr	r3, [pc, #516]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	4a80      	ldr	r2, [pc, #512]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002874:	e01a      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800287a:	3308      	adds	r3, #8
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fbd2 	bl	8004028 <RCCEx_PLL2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800288a:	e00f      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800288c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002890:	3328      	adds	r3, #40	@ 0x28
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fc79 	bl	800418c <RCCEx_PLL3_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b8:	f023 0107 	bic.w	r1, r3, #7
 80028bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80028c8:	e003      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80028de:	f04f 0b00 	mov.w	fp, #0
 80028e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028f0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80028f4:	d03b      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80028f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80028fa:	d834      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002900:	d037      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002906:	d82e      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002908:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800290c:	d033      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800290e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002912:	d828      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002918:	d01a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800291e:	d822      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002928:	d007      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800292a:	e01c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800292c:	4b50      	ldr	r3, [pc, #320]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	4a4f      	ldr	r2, [pc, #316]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002938:	e01e      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800293a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800293e:	3308      	adds	r3, #8
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fb70 	bl	8004028 <RCCEx_PLL2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800294e:	e013      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002954:	3328      	adds	r3, #40	@ 0x28
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fc17 	bl	800418c <RCCEx_PLL3_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002964:	e008      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800296c:	e004      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002980:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800298c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002990:	4a37      	ldr	r2, [pc, #220]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002992:	430b      	orrs	r3, r1
 8002994:	6593      	str	r3, [r2, #88]	@ 0x58
 8002996:	e003      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800299c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80029ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80029b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80029ba:	460b      	mov	r3, r1
 80029bc:	4313      	orrs	r3, r2
 80029be:	d05d      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80029cc:	d03b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80029d2:	d834      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029d8:	d037      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80029da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029de:	d82e      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029e4:	d033      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80029e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029ea:	d828      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f0:	d01a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80029f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f6:	d822      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a00:	d007      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a02:	e01c      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a10:	e01e      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a16:	3308      	adds	r3, #8
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fb04 	bl	8004028 <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a26:	e013      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a2c:	3328      	adds	r3, #40	@ 0x28
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fbab 	bl	800418c <RCCEx_PLL3_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a3c:	e008      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a44:	e004      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a46:	bf00      	nop
 8002a48:	e002      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a68:	4a01      	ldr	r2, [pc, #4]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a6e:	e005      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002a88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	d03a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	2b30      	cmp	r3, #48	@ 0x30
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002aa6:	2b30      	cmp	r3, #48	@ 0x30
 8002aa8:	d819      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d815      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d111      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aba:	4baa      	ldr	r3, [pc, #680]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	4aa9      	ldr	r2, [pc, #676]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ac6:	e011      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002acc:	3308      	adds	r3, #8
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 faa9 	bl	8004028 <RCCEx_PLL2_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002adc:	e006      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002af4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	4a98      	ldr	r2, [pc, #608]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b04:	430b      	orrs	r3, r1
 8002b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b08:	e003      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002b28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	d051      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b3c:	d035      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b42:	d82e      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b48:	d031      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002b4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b4e:	d828      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b54:	d01a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	d822      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b64:	d007      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4b7e      	ldr	r3, [pc, #504]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 fa52 	bl	8004028 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e011      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b90:	3328      	adds	r3, #40	@ 0x28
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 faf9 	bl	800418c <RCCEx_PLL3_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	4a67      	ldr	r2, [pc, #412]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002be2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	d053      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c00:	d033      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002c02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c06:	d82c      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c0c:	d02f      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002c0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c12:	d826      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c18:	d02b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c1e:	d820      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c24:	d012      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c2a:	d81a      	bhi.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d022      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d115      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f9f2 	bl	8004028 <RCCEx_PLL2_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c4a:	e015      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c50:	3328      	adds	r3, #40	@ 0x28
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 fa99 	bl	800418c <RCCEx_PLL3_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c60:	e00a      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c80:	4b38      	ldr	r3, [pc, #224]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002cb4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	d058      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cca:	d033      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd0:	d82c      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd6:	d02f      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d826      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ce2:	d02b      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002ce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ce8:	d820      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cee:	d012      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cf4:	d81a      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d022      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cfe:	d115      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d04:	3308      	adds	r3, #8
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f98d 	bl	8004028 <RCCEx_PLL2_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d14:	e015      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d1a:	3328      	adds	r3, #40	@ 0x28
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fa34 	bl	800418c <RCCEx_PLL3_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d32:	e006      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d34:	bf00      	nop
 8002d36:	e004      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d38:	bf00      	nop
 8002d3a:	e002      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d5a:	4a02      	ldr	r2, [pc, #8]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d60:	e006      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	d037      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9a:	d00e      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002da0:	d816      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d018      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dac:	4bc4      	ldr	r3, [pc, #784]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	4ac3      	ldr	r2, [pc, #780]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002db8:	e00f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f930 	bl	8004028 <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002de2:	4bb7      	ldr	r3, [pc, #732]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df0:	4ab3      	ldr	r2, [pc, #716]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d039      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d81c      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e41 	.word	0x08002e41
 8002e38:	08002e4f 	.word	0x08002e4f
 8002e3c:	08002e6d 	.word	0x08002e6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e40:	4b9f      	ldr	r3, [pc, #636]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	4a9e      	ldr	r2, [pc, #632]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e4c:	e00f      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e52:	3308      	adds	r3, #8
 8002e54:	2102      	movs	r1, #2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f8e6 	bl	8004028 <RCCEx_PLL2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e62:	e004      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e76:	4b92      	ldr	r3, [pc, #584]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	f023 0103 	bic.w	r1, r3, #3
 8002e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e84:	4a8e      	ldr	r2, [pc, #568]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e8a:	e003      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f000 8099 	beq.w	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb6:	4b83      	ldr	r3, [pc, #524]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a82      	ldr	r2, [pc, #520]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f88b 	bl	8000fdc <HAL_GetTick>
 8002ec6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe f886 	bl	8000fdc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	@ 0x64
 8002eda:	d903      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee4:	4b77      	ldr	r3, [pc, #476]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ed      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d173      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ef8:	4b71      	ldr	r3, [pc, #452]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f04:	4053      	eors	r3, r2
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f1a:	4b69      	ldr	r3, [pc, #420]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a68      	ldr	r2, [pc, #416]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f26:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f32:	4a63      	ldr	r2, [pc, #396]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f46:	d118      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f848 	bl	8000fdc <HAL_GetTick>
 8002f4c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f50:	e00d      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe f843 	bl	8000fdc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f5c:	1ad2      	subs	r2, r2, r3
 8002f5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d903      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002f6c:	e005      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f6e:	4b54      	ldr	r3, [pc, #336]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0eb      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d129      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f92:	d10e      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002f94:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fa4:	091a      	lsrs	r2, r3, #4
 8002fa6:	4b48      	ldr	r3, [pc, #288]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	4a45      	ldr	r2, [pc, #276]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6113      	str	r3, [r2, #16]
 8002fb0:	e005      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002fb2:	4b43      	ldr	r3, [pc, #268]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	4a42      	ldr	r2, [pc, #264]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fbc:	6113      	str	r3, [r2, #16]
 8002fbe:	4b40      	ldr	r3, [pc, #256]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	4a3c      	ldr	r2, [pc, #240]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002fde:	e003      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f002 0301 	and.w	r3, r2, #1
 8002ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	f000 808f 	beq.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800300a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003010:	2b28      	cmp	r3, #40	@ 0x28
 8003012:	d871      	bhi.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003101 	.word	0x08003101
 8003020:	080030f9 	.word	0x080030f9
 8003024:	080030f9 	.word	0x080030f9
 8003028:	080030f9 	.word	0x080030f9
 800302c:	080030f9 	.word	0x080030f9
 8003030:	080030f9 	.word	0x080030f9
 8003034:	080030f9 	.word	0x080030f9
 8003038:	080030f9 	.word	0x080030f9
 800303c:	080030cd 	.word	0x080030cd
 8003040:	080030f9 	.word	0x080030f9
 8003044:	080030f9 	.word	0x080030f9
 8003048:	080030f9 	.word	0x080030f9
 800304c:	080030f9 	.word	0x080030f9
 8003050:	080030f9 	.word	0x080030f9
 8003054:	080030f9 	.word	0x080030f9
 8003058:	080030f9 	.word	0x080030f9
 800305c:	080030e3 	.word	0x080030e3
 8003060:	080030f9 	.word	0x080030f9
 8003064:	080030f9 	.word	0x080030f9
 8003068:	080030f9 	.word	0x080030f9
 800306c:	080030f9 	.word	0x080030f9
 8003070:	080030f9 	.word	0x080030f9
 8003074:	080030f9 	.word	0x080030f9
 8003078:	080030f9 	.word	0x080030f9
 800307c:	08003101 	.word	0x08003101
 8003080:	080030f9 	.word	0x080030f9
 8003084:	080030f9 	.word	0x080030f9
 8003088:	080030f9 	.word	0x080030f9
 800308c:	080030f9 	.word	0x080030f9
 8003090:	080030f9 	.word	0x080030f9
 8003094:	080030f9 	.word	0x080030f9
 8003098:	080030f9 	.word	0x080030f9
 800309c:	08003101 	.word	0x08003101
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030f9 	.word	0x080030f9
 80030b0:	080030f9 	.word	0x080030f9
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	080030f9 	.word	0x080030f9
 80030bc:	08003101 	.word	0x08003101
 80030c0:	58024400 	.word	0x58024400
 80030c4:	58024800 	.word	0x58024800
 80030c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030d0:	3308      	adds	r3, #8
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ffa7 	bl	8004028 <RCCEx_PLL2_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030e0:	e00f      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e6:	3328      	adds	r3, #40	@ 0x28
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 f84e 	bl	800418c <RCCEx_PLL3_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030f6:	e004      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030fe:	e000      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800310a:	4bbf      	ldr	r3, [pc, #764]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003118:	4abb      	ldr	r2, [pc, #748]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800311a:	430b      	orrs	r3, r1
 800311c:	6553      	str	r3, [r2, #84]	@ 0x54
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f002 0302 	and.w	r3, r2, #2
 8003134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800313e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003142:	460b      	mov	r3, r1
 8003144:	4313      	orrs	r3, r2
 8003146:	d041      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314e:	2b05      	cmp	r3, #5
 8003150:	d824      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003152:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	080031a5 	.word	0x080031a5
 800315c:	08003171 	.word	0x08003171
 8003160:	08003187 	.word	0x08003187
 8003164:	080031a5 	.word	0x080031a5
 8003168:	080031a5 	.word	0x080031a5
 800316c:	080031a5 	.word	0x080031a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003174:	3308      	adds	r3, #8
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 ff55 	bl	8004028 <RCCEx_PLL2_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003184:	e00f      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318a:	3328      	adds	r3, #40	@ 0x28
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fffc 	bl	800418c <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ae:	4b96      	ldr	r3, [pc, #600]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b2:	f023 0107 	bic.w	r1, r3, #7
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031bc:	4a92      	ldr	r2, [pc, #584]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f002 0304 	and.w	r3, r2, #4
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	d044      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d825      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80031f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	0800324d 	.word	0x0800324d
 8003204:	08003219 	.word	0x08003219
 8003208:	0800322f 	.word	0x0800322f
 800320c:	0800324d 	.word	0x0800324d
 8003210:	0800324d 	.word	0x0800324d
 8003214:	0800324d 	.word	0x0800324d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	3308      	adds	r3, #8
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ff01 	bl	8004028 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800322c:	e00f      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003232:	3328      	adds	r3, #40	@ 0x28
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f000 ffa8 	bl	800418c <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003256:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f023 0107 	bic.w	r1, r3, #7
 800325e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	4a68      	ldr	r2, [pc, #416]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6593      	str	r3, [r2, #88]	@ 0x58
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f002 0320 	and.w	r3, r2, #32
 8003282:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800328c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d055      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a2:	d033      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80032a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a8:	d82c      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ae:	d02f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d826      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032ba:	d02b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80032bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032c0:	d820      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c6:	d012      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80032c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032cc:	d81a      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d022      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80032d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d6:	d115      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032dc:	3308      	adds	r3, #8
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fea1 	bl	8004028 <RCCEx_PLL2_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032ec:	e015      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f2:	3328      	adds	r3, #40	@ 0x28
 80032f4:	2102      	movs	r1, #2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 ff48 	bl	800418c <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003302:	e00a      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800330c:	bf00      	nop
 800330e:	e004      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003310:	bf00      	nop
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003322:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800332a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003332:	4a35      	ldr	r2, [pc, #212]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003334:	430b      	orrs	r3, r1
 8003336:	6553      	str	r3, [r2, #84]	@ 0x54
 8003338:	e003      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800333e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800334e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003358:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d058      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800336a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800336e:	d033      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003370:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003374:	d82c      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	d02f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003380:	d826      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003386:	d02b      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800338c:	d820      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003392:	d012      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003398:	d81a      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d022      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	d115      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a8:	3308      	adds	r3, #8
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fe3b 	bl	8004028 <RCCEx_PLL2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033b8:	e015      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033be:	3328      	adds	r3, #40	@ 0x28
 80033c0:	2102      	movs	r1, #2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fee2 	bl	800418c <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033ce:	e00a      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033d6:	e006      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033d8:	bf00      	nop
 80033da:	e004      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033dc:	bf00      	nop
 80033de:	e002      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80033f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fe:	4a02      	ldr	r2, [pc, #8]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003400:	430b      	orrs	r3, r1
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003406:	bf00      	nop
 8003408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003420:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800342e:	460b      	mov	r3, r1
 8003430:	4313      	orrs	r3, r2
 8003432:	d055      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800343c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003440:	d033      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003442:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003446:	d82c      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344c:	d02f      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800344e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003452:	d826      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003454:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003458:	d02b      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800345a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800345e:	d820      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003464:	d012      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346a:	d81a      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003474:	d115      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347a:	3308      	adds	r3, #8
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fdd2 	bl	8004028 <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800348a:	e015      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800348c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003490:	3328      	adds	r3, #40	@ 0x28
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fe79 	bl	800418c <RCCEx_PLL3_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034a0:	e00a      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034a8:	e006      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034aa:	bf00      	nop
 80034ac:	e004      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034d2:	430b      	orrs	r3, r1
 80034d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d6:	e003      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f002 0308 	and.w	r3, r2, #8
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d01e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800350e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003512:	3328      	adds	r3, #40	@ 0x28
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fe38 	bl	800418c <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003528:	4b86      	ldr	r3, [pc, #536]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003538:	4a82      	ldr	r2, [pc, #520]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800353e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f002 0310 	and.w	r3, r2, #16
 800354a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003554:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d01e      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800355e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356a:	d10c      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800356c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003570:	3328      	adds	r3, #40	@ 0x28
 8003572:	2102      	movs	r1, #2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fe09 	bl	800418c <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003586:	4b6f      	ldr	r3, [pc, #444]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800358e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003596:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003598:	430b      	orrs	r3, r1
 800359a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80035a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035aa:	2300      	movs	r3, #0
 80035ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035b2:	460b      	mov	r3, r1
 80035b4:	4313      	orrs	r3, r2
 80035b6:	d03e      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035c4:	d022      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ca:	d81b      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d00b      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80035d6:	e015      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035dc:	3308      	adds	r3, #8
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fd21 	bl	8004028 <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fdc8 	bl	800418c <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003602:	e004      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800360c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003616:	4b4b      	ldr	r3, [pc, #300]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800361e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003626:	4a47      	ldr	r2, [pc, #284]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003628:	430b      	orrs	r3, r1
 800362a:	6593      	str	r3, [r2, #88]	@ 0x58
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003632:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003642:	673b      	str	r3, [r7, #112]	@ 0x70
 8003644:	2300      	movs	r3, #0
 8003646:	677b      	str	r3, [r7, #116]	@ 0x74
 8003648:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d03b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800365e:	d01f      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003660:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003664:	d818      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003670:	d007      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	4a32      	ldr	r2, [pc, #200]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003680:	e00f      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003686:	3328      	adds	r3, #40	@ 0x28
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fd7e 	bl	800418c <RCCEx_PLL3_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003696:	e004      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80036a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036aa:	4b26      	ldr	r3, [pc, #152]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	6553      	str	r3, [r2, #84]	@ 0x54
 80036c0:	e003      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d8:	2300      	movs	r3, #0
 80036da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d034      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d007      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f8:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003704:	e00e      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370a:	3308      	adds	r3, #8
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fc8a 	bl	8004028 <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800371a:	e003      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800372e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003730:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373a:	4a02      	ldr	r2, [pc, #8]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800373c:	430b      	orrs	r3, r1
 800373e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003740:	e006      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800374c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800375c:	663b      	str	r3, [r7, #96]	@ 0x60
 800375e:	2300      	movs	r3, #0
 8003760:	667b      	str	r3, [r7, #100]	@ 0x64
 8003762:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d00c      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800376c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003770:	3328      	adds	r3, #40	@ 0x28
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd09 	bl	800418c <RCCEx_PLL3_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003792:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003794:	2300      	movs	r3, #0
 8003796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003798:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d036      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ac:	d018      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80037ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b2:	d811      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b8:	d014      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80037ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037be:	d80b      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c8:	d106      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4bb7      	ldr	r3, [pc, #732]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	4ab6      	ldr	r2, [pc, #728]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037de:	e004      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037e0:	bf00      	nop
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f2:	4bad      	ldr	r3, [pc, #692]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003800:	4aa9      	ldr	r2, [pc, #676]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003802:	430b      	orrs	r3, r1
 8003804:	6553      	str	r3, [r2, #84]	@ 0x54
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800380c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800381c:	653b      	str	r3, [r7, #80]	@ 0x50
 800381e:	2300      	movs	r3, #0
 8003820:	657b      	str	r3, [r7, #84]	@ 0x54
 8003822:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800382c:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800382e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003830:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	4a9b      	ldr	r2, [pc, #620]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800383c:	430b      	orrs	r3, r1
 800383e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	2300      	movs	r3, #0
 8003850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003852:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385c:	4b92      	ldr	r3, [pc, #584]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386a:	4a8f      	ldr	r2, [pc, #572]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	2300      	movs	r3, #0
 8003880:	647b      	str	r3, [r7, #68]	@ 0x44
 8003882:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388c:	4b86      	ldr	r3, [pc, #536]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	4a85      	ldr	r2, [pc, #532]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003892:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003896:	6113      	str	r3, [r2, #16]
 8003898:	4b83      	ldr	r3, [pc, #524]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800389a:	6919      	ldr	r1, [r3, #16]
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a4:	4a80      	ldr	r2, [pc, #512]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038a6:	430b      	orrs	r3, r1
 80038a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b8:	2300      	movs	r3, #0
 80038ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038c6:	4b78      	ldr	r3, [pc, #480]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	4a74      	ldr	r2, [pc, #464]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e8:	2300      	movs	r3, #0
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038f6:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003908:	430b      	orrs	r3, r1
 800390a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	2100      	movs	r1, #0
 8003916:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800391e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d011      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392c:	3308      	adds	r3, #8
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb79 	bl	8004028 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800393c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	2100      	movs	r1, #0
 8003956:	6239      	str	r1, [r7, #32]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
 800395e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003962:	460b      	mov	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	d011      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396c:	3308      	adds	r3, #8
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb59 	bl	8004028 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800397c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	2100      	movs	r1, #0
 8003996:	61b9      	str	r1, [r7, #24]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d011      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ac:	3308      	adds	r3, #8
 80039ae:	2102      	movs	r1, #2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fb39 	bl	8004028 <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80039bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	2100      	movs	r1, #0
 80039d6:	6139      	str	r1, [r7, #16]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d011      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ec:	3328      	adds	r3, #40	@ 0x28
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fbcb 	bl	800418c <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	2100      	movs	r1, #0
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d011      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	3328      	adds	r3, #40	@ 0x28
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fbab 	bl	800418c <RCCEx_PLL3_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	2100      	movs	r1, #0
 8003a56:	6039      	str	r1, [r7, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d011      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6c:	3328      	adds	r3, #40	@ 0x28
 8003a6e:	2102      	movs	r1, #2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fb8b 	bl	800418c <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003a8c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400

08003aac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ab0:	f7fe fe00 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	0800b030 	.word	0x0800b030

08003ad8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003aea:	4b9f      	ldr	r3, [pc, #636]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	0b1b      	lsrs	r3, r3, #12
 8003af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003af6:	4b9c      	ldr	r3, [pc, #624]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b02:	4b99      	ldr	r3, [pc, #612]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8111 	beq.w	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f000 8083 	beq.w	8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f200 80a1 	bhi.w	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d056      	beq.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b42:	e099      	b.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b44:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02d      	beq.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b50:	4b85      	ldr	r3, [pc, #532]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	4a84      	ldr	r2, [pc, #528]	@ (8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003baa:	e087      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bee:	e065      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c32:	e043      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b48      	ldr	r3, [pc, #288]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c76:	e021      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8a:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	0a5b      	lsrs	r3, r3, #9
 8003cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce2:	ee17 2a90 	vmov	r2, s15
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d10:	ee17 2a90 	vmov	r2, s15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3e:	ee17 2a90 	vmov	r2, s15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d46:	e008      	b.n	8003d5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
}
 8003d5a:	bf00      	nop
 8003d5c:	3724      	adds	r7, #36	@ 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	03d09000 	.word	0x03d09000
 8003d70:	46000000 	.word	0x46000000
 8003d74:	4c742400 	.word	0x4c742400
 8003d78:	4a742400 	.word	0x4a742400
 8003d7c:	4bbebc20 	.word	0x4bbebc20

08003d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d88:	4ba1      	ldr	r3, [pc, #644]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d92:	4b9f      	ldr	r3, [pc, #636]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	0d1b      	lsrs	r3, r3, #20
 8003d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003daa:	4b99      	ldr	r3, [pc, #612]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8111 	beq.w	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f000 8083 	beq.w	8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f200 80a1 	bhi.w	8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d056      	beq.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dea:	e099      	b.n	8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dec:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02d      	beq.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003df8:	4b85      	ldr	r3, [pc, #532]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	4a84      	ldr	r2, [pc, #528]	@ (8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e52:	e087      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800401c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e96:	e065      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eda:	e043      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b48      	ldr	r3, [pc, #288]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f1e:	e021      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b37      	ldr	r3, [pc, #220]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	0a5b      	lsrs	r3, r3, #9
 8003f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8a:	ee17 2a90 	vmov	r2, s15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f92:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	ee17 2a90 	vmov	r2, s15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe6:	ee17 2a90 	vmov	r2, s15
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	bf00      	nop
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
 8004014:	03d09000 	.word	0x03d09000
 8004018:	46000000 	.word	0x46000000
 800401c:	4c742400 	.word	0x4c742400
 8004020:	4a742400 	.word	0x4a742400
 8004024:	4bbebc20 	.word	0x4bbebc20

08004028 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004036:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b03      	cmp	r3, #3
 8004040:	d101      	bne.n	8004046 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e099      	b.n	800417a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004046:	4b4f      	ldr	r3, [pc, #316]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4e      	ldr	r2, [pc, #312]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800404c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004052:	f7fc ffc3 	bl	8000fdc <HAL_GetTick>
 8004056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004058:	e008      	b.n	800406c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800405a:	f7fc ffbf 	bl	8000fdc <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e086      	b.n	800417a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800406c:	4b45      	ldr	r3, [pc, #276]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004078:	4b42      	ldr	r3, [pc, #264]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	493f      	ldr	r1, [pc, #252]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	628b      	str	r3, [r1, #40]	@ 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	3b01      	subs	r3, #1
 8004092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	3b01      	subs	r3, #1
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	b29b      	uxth	r3, r3
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040bc:	4931      	ldr	r1, [pc, #196]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040c2:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	492d      	ldr	r1, [pc, #180]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f023 0220 	bic.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4928      	ldr	r1, [pc, #160]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040e6:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040f2:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f6:	4b24      	ldr	r3, [pc, #144]	@ (8004188 <RCCEx_PLL2_Config+0x160>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	69d2      	ldr	r2, [r2, #28]
 80040fe:	00d2      	lsls	r2, r2, #3
 8004100:	4920      	ldr	r1, [pc, #128]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004106:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800410c:	f043 0310 	orr.w	r3, r3, #16
 8004110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004118:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800411e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004124:	e00f      	b.n	8004146 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004138:	e005      	b.n	8004146 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004146:	4b0f      	ldr	r3, [pc, #60]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a0e      	ldr	r2, [pc, #56]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800414c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004152:	f7fc ff43 	bl	8000fdc <HAL_GetTick>
 8004156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004158:	e008      	b.n	800416c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800415a:	f7fc ff3f 	bl	8000fdc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e006      	b.n	800417a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	ffff0007 	.word	0xffff0007

0800418c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800419a:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d101      	bne.n	80041aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e099      	b.n	80042de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041aa:	4b4f      	ldr	r3, [pc, #316]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a4e      	ldr	r2, [pc, #312]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fc ff11 	bl	8000fdc <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041be:	f7fc ff0d 	bl	8000fdc <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e086      	b.n	80042de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041dc:	4b42      	ldr	r3, [pc, #264]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	051b      	lsls	r3, r3, #20
 80041ea:	493f      	ldr	r1, [pc, #252]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	b29b      	uxth	r3, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	3b01      	subs	r3, #1
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004220:	4931      	ldr	r1, [pc, #196]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004226:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	492d      	ldr	r1, [pc, #180]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004238:	4b2b      	ldr	r3, [pc, #172]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4928      	ldr	r1, [pc, #160]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800424a:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004256:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <RCCEx_PLL3_Config+0x160>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	69d2      	ldr	r2, [r2, #28]
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	4920      	ldr	r1, [pc, #128]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800426a:	4b1f      	ldr	r3, [pc, #124]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a1e      	ldr	r2, [pc, #120]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004282:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004288:	e00f      	b.n	80042aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800429c:	e005      	b.n	80042aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042aa:	4b0f      	ldr	r3, [pc, #60]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a0e      	ldr	r2, [pc, #56]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b6:	f7fc fe91 	bl	8000fdc <HAL_GetTick>
 80042ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042be:	f7fc fe8d 	bl	8000fdc <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e006      	b.n	80042de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
 80042ec:	ffff0007 	.word	0xffff0007

080042f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e042      	b.n	8004388 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fc fb71 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2224      	movs	r2, #36	@ 0x24
 800431e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fe94 	bl	8005068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f825 	bl	8004390 <UART_SetConfig>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800435e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 ff13 	bl	80051ac <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b092      	sub	sp, #72	@ 0x48
 8004396:	af00      	add	r7, sp, #0
 8004398:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4bbe      	ldr	r3, [pc, #760]	@ (80046b8 <UART_SetConfig+0x328>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4ab3      	ldr	r2, [pc, #716]	@ (80046bc <UART_SetConfig+0x32c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f8:	4313      	orrs	r3, r2
 80043fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4baf      	ldr	r3, [pc, #700]	@ (80046c0 <UART_SetConfig+0x330>)
 8004404:	4013      	ands	r3, r2
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800440c:	430b      	orrs	r3, r1
 800440e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	f023 010f 	bic.w	r1, r3, #15
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4aa6      	ldr	r2, [pc, #664]	@ (80046c4 <UART_SetConfig+0x334>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d177      	bne.n	8004520 <UART_SetConfig+0x190>
 8004430:	4ba5      	ldr	r3, [pc, #660]	@ (80046c8 <UART_SetConfig+0x338>)
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004438:	2b28      	cmp	r3, #40	@ 0x28
 800443a:	d86d      	bhi.n	8004518 <UART_SetConfig+0x188>
 800443c:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <UART_SetConfig+0xb4>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	080044e9 	.word	0x080044e9
 8004448:	08004519 	.word	0x08004519
 800444c:	08004519 	.word	0x08004519
 8004450:	08004519 	.word	0x08004519
 8004454:	08004519 	.word	0x08004519
 8004458:	08004519 	.word	0x08004519
 800445c:	08004519 	.word	0x08004519
 8004460:	08004519 	.word	0x08004519
 8004464:	080044f1 	.word	0x080044f1
 8004468:	08004519 	.word	0x08004519
 800446c:	08004519 	.word	0x08004519
 8004470:	08004519 	.word	0x08004519
 8004474:	08004519 	.word	0x08004519
 8004478:	08004519 	.word	0x08004519
 800447c:	08004519 	.word	0x08004519
 8004480:	08004519 	.word	0x08004519
 8004484:	080044f9 	.word	0x080044f9
 8004488:	08004519 	.word	0x08004519
 800448c:	08004519 	.word	0x08004519
 8004490:	08004519 	.word	0x08004519
 8004494:	08004519 	.word	0x08004519
 8004498:	08004519 	.word	0x08004519
 800449c:	08004519 	.word	0x08004519
 80044a0:	08004519 	.word	0x08004519
 80044a4:	08004501 	.word	0x08004501
 80044a8:	08004519 	.word	0x08004519
 80044ac:	08004519 	.word	0x08004519
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004519 	.word	0x08004519
 80044b8:	08004519 	.word	0x08004519
 80044bc:	08004519 	.word	0x08004519
 80044c0:	08004519 	.word	0x08004519
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004511 	.word	0x08004511
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ee:	e326      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80044f0:	2304      	movs	r3, #4
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f6:	e322      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80044f8:	2308      	movs	r3, #8
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fe:	e31e      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004506:	e31a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004508:	2320      	movs	r3, #32
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450e:	e316      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004510:	2340      	movs	r3, #64	@ 0x40
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004516:	e312      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800451e:	e30e      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a69      	ldr	r2, [pc, #420]	@ (80046cc <UART_SetConfig+0x33c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d130      	bne.n	800458c <UART_SetConfig+0x1fc>
 800452a:	4b67      	ldr	r3, [pc, #412]	@ (80046c8 <UART_SetConfig+0x338>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b05      	cmp	r3, #5
 8004534:	d826      	bhi.n	8004584 <UART_SetConfig+0x1f4>
 8004536:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <UART_SetConfig+0x1ac>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004555 	.word	0x08004555
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004565 	.word	0x08004565
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455a:	e2f0      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004562:	e2ec      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456a:	e2e8      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004572:	e2e4      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004574:	2320      	movs	r3, #32
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457a:	e2e0      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800457c:	2340      	movs	r3, #64	@ 0x40
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004582:	e2dc      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458a:	e2d8      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4f      	ldr	r2, [pc, #316]	@ (80046d0 <UART_SetConfig+0x340>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d130      	bne.n	80045f8 <UART_SetConfig+0x268>
 8004596:	4b4c      	ldr	r3, [pc, #304]	@ (80046c8 <UART_SetConfig+0x338>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d826      	bhi.n	80045f0 <UART_SetConfig+0x260>
 80045a2:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <UART_SetConfig+0x218>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045c9 	.word	0x080045c9
 80045b0:	080045d1 	.word	0x080045d1
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c6:	e2ba      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ce:	e2b6      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d6:	e2b2      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045de:	e2ae      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045e0:	2320      	movs	r3, #32
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e6:	e2aa      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045e8:	2340      	movs	r3, #64	@ 0x40
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ee:	e2a6      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f6:	e2a2      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	@ (80046d4 <UART_SetConfig+0x344>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d130      	bne.n	8004664 <UART_SetConfig+0x2d4>
 8004602:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <UART_SetConfig+0x338>)
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b05      	cmp	r3, #5
 800460c:	d826      	bhi.n	800465c <UART_SetConfig+0x2cc>
 800460e:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <UART_SetConfig+0x284>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	0800462d 	.word	0x0800462d
 8004618:	08004635 	.word	0x08004635
 800461c:	0800463d 	.word	0x0800463d
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004632:	e284      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004634:	2304      	movs	r3, #4
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463a:	e280      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800463c:	2308      	movs	r3, #8
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004642:	e27c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004644:	2310      	movs	r3, #16
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464a:	e278      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800464c:	2320      	movs	r3, #32
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004652:	e274      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004654:	2340      	movs	r3, #64	@ 0x40
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800465a:	e270      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004662:	e26c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <UART_SetConfig+0x348>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d142      	bne.n	80046f4 <UART_SetConfig+0x364>
 800466e:	4b16      	ldr	r3, [pc, #88]	@ (80046c8 <UART_SetConfig+0x338>)
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b05      	cmp	r3, #5
 8004678:	d838      	bhi.n	80046ec <UART_SetConfig+0x35c>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <UART_SetConfig+0x2f0>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004699 	.word	0x08004699
 8004684:	080046a1 	.word	0x080046a1
 8004688:	080046a9 	.word	0x080046a9
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046dd 	.word	0x080046dd
 8004694:	080046e5 	.word	0x080046e5
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469e:	e24e      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a6:	e24a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ae:	e246      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e242      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046b8:	cfff69f3 	.word	0xcfff69f3
 80046bc:	58000c00 	.word	0x58000c00
 80046c0:	11fff4ff 	.word	0x11fff4ff
 80046c4:	40011000 	.word	0x40011000
 80046c8:	58024400 	.word	0x58024400
 80046cc:	40004400 	.word	0x40004400
 80046d0:	40004800 	.word	0x40004800
 80046d4:	40004c00 	.word	0x40004c00
 80046d8:	40005000 	.word	0x40005000
 80046dc:	2320      	movs	r3, #32
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e22c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046e4:	2340      	movs	r3, #64	@ 0x40
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e228      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e224      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4ab1      	ldr	r2, [pc, #708]	@ (80049c0 <UART_SetConfig+0x630>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d176      	bne.n	80047ec <UART_SetConfig+0x45c>
 80046fe:	4bb1      	ldr	r3, [pc, #708]	@ (80049c4 <UART_SetConfig+0x634>)
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004706:	2b28      	cmp	r3, #40	@ 0x28
 8004708:	d86c      	bhi.n	80047e4 <UART_SetConfig+0x454>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x380>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	080047b5 	.word	0x080047b5
 8004714:	080047e5 	.word	0x080047e5
 8004718:	080047e5 	.word	0x080047e5
 800471c:	080047e5 	.word	0x080047e5
 8004720:	080047e5 	.word	0x080047e5
 8004724:	080047e5 	.word	0x080047e5
 8004728:	080047e5 	.word	0x080047e5
 800472c:	080047e5 	.word	0x080047e5
 8004730:	080047bd 	.word	0x080047bd
 8004734:	080047e5 	.word	0x080047e5
 8004738:	080047e5 	.word	0x080047e5
 800473c:	080047e5 	.word	0x080047e5
 8004740:	080047e5 	.word	0x080047e5
 8004744:	080047e5 	.word	0x080047e5
 8004748:	080047e5 	.word	0x080047e5
 800474c:	080047e5 	.word	0x080047e5
 8004750:	080047c5 	.word	0x080047c5
 8004754:	080047e5 	.word	0x080047e5
 8004758:	080047e5 	.word	0x080047e5
 800475c:	080047e5 	.word	0x080047e5
 8004760:	080047e5 	.word	0x080047e5
 8004764:	080047e5 	.word	0x080047e5
 8004768:	080047e5 	.word	0x080047e5
 800476c:	080047e5 	.word	0x080047e5
 8004770:	080047cd 	.word	0x080047cd
 8004774:	080047e5 	.word	0x080047e5
 8004778:	080047e5 	.word	0x080047e5
 800477c:	080047e5 	.word	0x080047e5
 8004780:	080047e5 	.word	0x080047e5
 8004784:	080047e5 	.word	0x080047e5
 8004788:	080047e5 	.word	0x080047e5
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047d5 	.word	0x080047d5
 8004794:	080047e5 	.word	0x080047e5
 8004798:	080047e5 	.word	0x080047e5
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047e5 	.word	0x080047e5
 80047a4:	080047e5 	.word	0x080047e5
 80047a8:	080047e5 	.word	0x080047e5
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ba:	e1c0      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e1bc      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e1b8      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e1b4      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047d4:	2320      	movs	r3, #32
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e1b0      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047dc:	2340      	movs	r3, #64	@ 0x40
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e2:	e1ac      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047e4:	2380      	movs	r3, #128	@ 0x80
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ea:	e1a8      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a75      	ldr	r2, [pc, #468]	@ (80049c8 <UART_SetConfig+0x638>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d130      	bne.n	8004858 <UART_SetConfig+0x4c8>
 80047f6:	4b73      	ldr	r3, [pc, #460]	@ (80049c4 <UART_SetConfig+0x634>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d826      	bhi.n	8004850 <UART_SetConfig+0x4c0>
 8004802:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0x478>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004821 	.word	0x08004821
 800480c:	08004829 	.word	0x08004829
 8004810:	08004831 	.word	0x08004831
 8004814:	08004839 	.word	0x08004839
 8004818:	08004841 	.word	0x08004841
 800481c:	08004849 	.word	0x08004849
 8004820:	2300      	movs	r3, #0
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e18a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004828:	2304      	movs	r3, #4
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e186      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004830:	2308      	movs	r3, #8
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e182      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e17e      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004840:	2320      	movs	r3, #32
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e17a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004848:	2340      	movs	r3, #64	@ 0x40
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484e:	e176      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e172      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5b      	ldr	r2, [pc, #364]	@ (80049cc <UART_SetConfig+0x63c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d130      	bne.n	80048c4 <UART_SetConfig+0x534>
 8004862:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <UART_SetConfig+0x634>)
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b05      	cmp	r3, #5
 800486c:	d826      	bhi.n	80048bc <UART_SetConfig+0x52c>
 800486e:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <UART_SetConfig+0x4e4>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	0800488d 	.word	0x0800488d
 8004878:	08004895 	.word	0x08004895
 800487c:	0800489d 	.word	0x0800489d
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048b5 	.word	0x080048b5
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e154      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489a:	e150      	b.n	8004b3e <UART_SetConfig+0x7ae>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e14c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048aa:	e148      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80048ac:	2320      	movs	r3, #32
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e144      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80048b4:	2340      	movs	r3, #64	@ 0x40
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	e140      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e13c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a41      	ldr	r2, [pc, #260]	@ (80049d0 <UART_SetConfig+0x640>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f040 8082 	bne.w	80049d4 <UART_SetConfig+0x644>
 80048d0:	4b3c      	ldr	r3, [pc, #240]	@ (80049c4 <UART_SetConfig+0x634>)
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d8:	2b28      	cmp	r3, #40	@ 0x28
 80048da:	d86d      	bhi.n	80049b8 <UART_SetConfig+0x628>
 80048dc:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <UART_SetConfig+0x554>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004989 	.word	0x08004989
 80048e8:	080049b9 	.word	0x080049b9
 80048ec:	080049b9 	.word	0x080049b9
 80048f0:	080049b9 	.word	0x080049b9
 80048f4:	080049b9 	.word	0x080049b9
 80048f8:	080049b9 	.word	0x080049b9
 80048fc:	080049b9 	.word	0x080049b9
 8004900:	080049b9 	.word	0x080049b9
 8004904:	08004991 	.word	0x08004991
 8004908:	080049b9 	.word	0x080049b9
 800490c:	080049b9 	.word	0x080049b9
 8004910:	080049b9 	.word	0x080049b9
 8004914:	080049b9 	.word	0x080049b9
 8004918:	080049b9 	.word	0x080049b9
 800491c:	080049b9 	.word	0x080049b9
 8004920:	080049b9 	.word	0x080049b9
 8004924:	08004999 	.word	0x08004999
 8004928:	080049b9 	.word	0x080049b9
 800492c:	080049b9 	.word	0x080049b9
 8004930:	080049b9 	.word	0x080049b9
 8004934:	080049b9 	.word	0x080049b9
 8004938:	080049b9 	.word	0x080049b9
 800493c:	080049b9 	.word	0x080049b9
 8004940:	080049b9 	.word	0x080049b9
 8004944:	080049a1 	.word	0x080049a1
 8004948:	080049b9 	.word	0x080049b9
 800494c:	080049b9 	.word	0x080049b9
 8004950:	080049b9 	.word	0x080049b9
 8004954:	080049b9 	.word	0x080049b9
 8004958:	080049b9 	.word	0x080049b9
 800495c:	080049b9 	.word	0x080049b9
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049a9 	.word	0x080049a9
 8004968:	080049b9 	.word	0x080049b9
 800496c:	080049b9 	.word	0x080049b9
 8004970:	080049b9 	.word	0x080049b9
 8004974:	080049b9 	.word	0x080049b9
 8004978:	080049b9 	.word	0x080049b9
 800497c:	080049b9 	.word	0x080049b9
 8004980:	080049b9 	.word	0x080049b9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e0d6      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e0d2      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e0ce      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e0ca      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80049a8:	2320      	movs	r3, #32
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ae:	e0c6      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80049b0:	2340      	movs	r3, #64	@ 0x40
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e0c2      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80049b8:	2380      	movs	r3, #128	@ 0x80
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049be:	e0be      	b.n	8004b3e <UART_SetConfig+0x7ae>
 80049c0:	40011400 	.word	0x40011400
 80049c4:	58024400 	.word	0x58024400
 80049c8:	40007800 	.word	0x40007800
 80049cc:	40007c00 	.word	0x40007c00
 80049d0:	40011800 	.word	0x40011800
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4aad      	ldr	r2, [pc, #692]	@ (8004c90 <UART_SetConfig+0x900>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d176      	bne.n	8004acc <UART_SetConfig+0x73c>
 80049de:	4bad      	ldr	r3, [pc, #692]	@ (8004c94 <UART_SetConfig+0x904>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049e6:	2b28      	cmp	r3, #40	@ 0x28
 80049e8:	d86c      	bhi.n	8004ac4 <UART_SetConfig+0x734>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0x660>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a95 	.word	0x08004a95
 80049f4:	08004ac5 	.word	0x08004ac5
 80049f8:	08004ac5 	.word	0x08004ac5
 80049fc:	08004ac5 	.word	0x08004ac5
 8004a00:	08004ac5 	.word	0x08004ac5
 8004a04:	08004ac5 	.word	0x08004ac5
 8004a08:	08004ac5 	.word	0x08004ac5
 8004a0c:	08004ac5 	.word	0x08004ac5
 8004a10:	08004a9d 	.word	0x08004a9d
 8004a14:	08004ac5 	.word	0x08004ac5
 8004a18:	08004ac5 	.word	0x08004ac5
 8004a1c:	08004ac5 	.word	0x08004ac5
 8004a20:	08004ac5 	.word	0x08004ac5
 8004a24:	08004ac5 	.word	0x08004ac5
 8004a28:	08004ac5 	.word	0x08004ac5
 8004a2c:	08004ac5 	.word	0x08004ac5
 8004a30:	08004aa5 	.word	0x08004aa5
 8004a34:	08004ac5 	.word	0x08004ac5
 8004a38:	08004ac5 	.word	0x08004ac5
 8004a3c:	08004ac5 	.word	0x08004ac5
 8004a40:	08004ac5 	.word	0x08004ac5
 8004a44:	08004ac5 	.word	0x08004ac5
 8004a48:	08004ac5 	.word	0x08004ac5
 8004a4c:	08004ac5 	.word	0x08004ac5
 8004a50:	08004aad 	.word	0x08004aad
 8004a54:	08004ac5 	.word	0x08004ac5
 8004a58:	08004ac5 	.word	0x08004ac5
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004ac5 	.word	0x08004ac5
 8004a64:	08004ac5 	.word	0x08004ac5
 8004a68:	08004ac5 	.word	0x08004ac5
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ab5 	.word	0x08004ab5
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004ac5 	.word	0x08004ac5
 8004a7c:	08004ac5 	.word	0x08004ac5
 8004a80:	08004ac5 	.word	0x08004ac5
 8004a84:	08004ac5 	.word	0x08004ac5
 8004a88:	08004ac5 	.word	0x08004ac5
 8004a8c:	08004ac5 	.word	0x08004ac5
 8004a90:	08004abd 	.word	0x08004abd
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e050      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e04c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e048      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004aac:	2310      	movs	r3, #16
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e044      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e040      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004abc:	2340      	movs	r3, #64	@ 0x40
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e03c      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aca:	e038      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a71      	ldr	r2, [pc, #452]	@ (8004c98 <UART_SetConfig+0x908>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d130      	bne.n	8004b38 <UART_SetConfig+0x7a8>
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8004c94 <UART_SetConfig+0x904>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d826      	bhi.n	8004b30 <UART_SetConfig+0x7a0>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <UART_SetConfig+0x758>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	08004b11 	.word	0x08004b11
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	2302      	movs	r3, #2
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e01a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e016      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b10:	2308      	movs	r3, #8
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e012      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e00e      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b20:	2320      	movs	r3, #32
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e00a      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b28:	2340      	movs	r3, #64	@ 0x40
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e006      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b36:	e002      	b.n	8004b3e <UART_SetConfig+0x7ae>
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a55      	ldr	r2, [pc, #340]	@ (8004c98 <UART_SetConfig+0x908>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	f040 80f8 	bne.w	8004d3a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	dc46      	bgt.n	8004be0 <UART_SetConfig+0x850>
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	db75      	blt.n	8004c42 <UART_SetConfig+0x8b2>
 8004b56:	3b02      	subs	r3, #2
 8004b58:	2b1e      	cmp	r3, #30
 8004b5a:	d872      	bhi.n	8004c42 <UART_SetConfig+0x8b2>
 8004b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b64 <UART_SetConfig+0x7d4>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004be7 	.word	0x08004be7
 8004b68:	08004c43 	.word	0x08004c43
 8004b6c:	08004bef 	.word	0x08004bef
 8004b70:	08004c43 	.word	0x08004c43
 8004b74:	08004c43 	.word	0x08004c43
 8004b78:	08004c43 	.word	0x08004c43
 8004b7c:	08004bff 	.word	0x08004bff
 8004b80:	08004c43 	.word	0x08004c43
 8004b84:	08004c43 	.word	0x08004c43
 8004b88:	08004c43 	.word	0x08004c43
 8004b8c:	08004c43 	.word	0x08004c43
 8004b90:	08004c43 	.word	0x08004c43
 8004b94:	08004c43 	.word	0x08004c43
 8004b98:	08004c43 	.word	0x08004c43
 8004b9c:	08004c0f 	.word	0x08004c0f
 8004ba0:	08004c43 	.word	0x08004c43
 8004ba4:	08004c43 	.word	0x08004c43
 8004ba8:	08004c43 	.word	0x08004c43
 8004bac:	08004c43 	.word	0x08004c43
 8004bb0:	08004c43 	.word	0x08004c43
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c43 	.word	0x08004c43
 8004bbc:	08004c43 	.word	0x08004c43
 8004bc0:	08004c43 	.word	0x08004c43
 8004bc4:	08004c43 	.word	0x08004c43
 8004bc8:	08004c43 	.word	0x08004c43
 8004bcc:	08004c43 	.word	0x08004c43
 8004bd0:	08004c43 	.word	0x08004c43
 8004bd4:	08004c43 	.word	0x08004c43
 8004bd8:	08004c43 	.word	0x08004c43
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	2b40      	cmp	r3, #64	@ 0x40
 8004be2:	d02a      	beq.n	8004c3a <UART_SetConfig+0x8aa>
 8004be4:	e02d      	b.n	8004c42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004be6:	f7fe ff61 	bl	8003aac <HAL_RCCEx_GetD3PCLK1Freq>
 8004bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bec:	e02f      	b.n	8004c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe ff70 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bfc:	e027      	b.n	8004c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bfe:	f107 0318 	add.w	r3, r7, #24
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f8bc 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c0c:	e01f      	b.n	8004c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c0e:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <UART_SetConfig+0x904>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c94 <UART_SetConfig+0x904>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <UART_SetConfig+0x90c>)
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c2c:	e00f      	b.n	8004c4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <UART_SetConfig+0x90c>)
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c32:	e00c      	b.n	8004c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <UART_SetConfig+0x910>)
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c38:	e009      	b.n	8004c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c40:	e005      	b.n	8004c4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 81ee 	beq.w	8005032 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <UART_SetConfig+0x914>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d305      	bcc.n	8004c86 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d910      	bls.n	8004ca8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c8c:	e1d1      	b.n	8005032 <UART_SetConfig+0xca2>
 8004c8e:	bf00      	nop
 8004c90:	40011c00 	.word	0x40011c00
 8004c94:	58024400 	.word	0x58024400
 8004c98:	58000c00 	.word	0x58000c00
 8004c9c:	03d09000 	.word	0x03d09000
 8004ca0:	003d0900 	.word	0x003d0900
 8004ca4:	0800b040 	.word	0x0800b040
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004caa:	2200      	movs	r2, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	4ac0      	ldr	r2, [pc, #768]	@ (8004fb8 <UART_SetConfig+0xc28>)
 8004cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cca:	f7fb fb27 	bl	800031c <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	020b      	lsls	r3, r1, #8
 8004ce0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ce4:	0202      	lsls	r2, r0, #8
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	6849      	ldr	r1, [r1, #4]
 8004cea:	0849      	lsrs	r1, r1, #1
 8004cec:	2000      	movs	r0, #0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	eb12 0804 	adds.w	r8, r2, r4
 8004cf6:	eb43 0905 	adc.w	r9, r3, r5
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	469a      	mov	sl, r3
 8004d02:	4693      	mov	fp, r2
 8004d04:	4652      	mov	r2, sl
 8004d06:	465b      	mov	r3, fp
 8004d08:	4640      	mov	r0, r8
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	f7fb fb06 	bl	800031c <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1e:	d308      	bcc.n	8004d32 <UART_SetConfig+0x9a2>
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d26:	d204      	bcs.n	8004d32 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d2e:	60da      	str	r2, [r3, #12]
 8004d30:	e17f      	b.n	8005032 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d38:	e17b      	b.n	8005032 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d42:	f040 80bd 	bne.w	8004ec0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	dc48      	bgt.n	8004de0 <UART_SetConfig+0xa50>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db7b      	blt.n	8004e4a <UART_SetConfig+0xaba>
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d879      	bhi.n	8004e4a <UART_SetConfig+0xaba>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0x9cc>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004de7 	.word	0x08004de7
 8004d60:	08004def 	.word	0x08004def
 8004d64:	08004e4b 	.word	0x08004e4b
 8004d68:	08004e4b 	.word	0x08004e4b
 8004d6c:	08004df7 	.word	0x08004df7
 8004d70:	08004e4b 	.word	0x08004e4b
 8004d74:	08004e4b 	.word	0x08004e4b
 8004d78:	08004e4b 	.word	0x08004e4b
 8004d7c:	08004e07 	.word	0x08004e07
 8004d80:	08004e4b 	.word	0x08004e4b
 8004d84:	08004e4b 	.word	0x08004e4b
 8004d88:	08004e4b 	.word	0x08004e4b
 8004d8c:	08004e4b 	.word	0x08004e4b
 8004d90:	08004e4b 	.word	0x08004e4b
 8004d94:	08004e4b 	.word	0x08004e4b
 8004d98:	08004e4b 	.word	0x08004e4b
 8004d9c:	08004e17 	.word	0x08004e17
 8004da0:	08004e4b 	.word	0x08004e4b
 8004da4:	08004e4b 	.word	0x08004e4b
 8004da8:	08004e4b 	.word	0x08004e4b
 8004dac:	08004e4b 	.word	0x08004e4b
 8004db0:	08004e4b 	.word	0x08004e4b
 8004db4:	08004e4b 	.word	0x08004e4b
 8004db8:	08004e4b 	.word	0x08004e4b
 8004dbc:	08004e4b 	.word	0x08004e4b
 8004dc0:	08004e4b 	.word	0x08004e4b
 8004dc4:	08004e4b 	.word	0x08004e4b
 8004dc8:	08004e4b 	.word	0x08004e4b
 8004dcc:	08004e4b 	.word	0x08004e4b
 8004dd0:	08004e4b 	.word	0x08004e4b
 8004dd4:	08004e4b 	.word	0x08004e4b
 8004dd8:	08004e4b 	.word	0x08004e4b
 8004ddc:	08004e3d 	.word	0x08004e3d
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d02e      	beq.n	8004e42 <UART_SetConfig+0xab2>
 8004de4:	e031      	b.n	8004e4a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de6:	f7fd fc95 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004dea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dec:	e033      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dee:	f7fd fca7 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004df4:	e02f      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fe6c 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e04:	e027      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e06:	f107 0318 	add.w	r3, r7, #24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe ffb8 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e14:	e01f      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e16:	4b69      	ldr	r3, [pc, #420]	@ (8004fbc <UART_SetConfig+0xc2c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e22:	4b66      	ldr	r3, [pc, #408]	@ (8004fbc <UART_SetConfig+0xc2c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	08db      	lsrs	r3, r3, #3
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	4a64      	ldr	r2, [pc, #400]	@ (8004fc0 <UART_SetConfig+0xc30>)
 8004e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e34:	e00f      	b.n	8004e56 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004e36:	4b62      	ldr	r3, [pc, #392]	@ (8004fc0 <UART_SetConfig+0xc30>)
 8004e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e3a:	e00c      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e3c:	4b61      	ldr	r3, [pc, #388]	@ (8004fc4 <UART_SetConfig+0xc34>)
 8004e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ea 	beq.w	8005032 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	4a55      	ldr	r2, [pc, #340]	@ (8004fb8 <UART_SetConfig+0xc28>)
 8004e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d916      	bls.n	8004eb8 <UART_SetConfig+0xb28>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d212      	bcs.n	8004eb8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f023 030f 	bic.w	r3, r3, #15
 8004e9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	e0bc      	b.n	8005032 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ebe:	e0b8      	b.n	8005032 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	dc4b      	bgt.n	8004f60 <UART_SetConfig+0xbd0>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f2c0 8087 	blt.w	8004fdc <UART_SetConfig+0xc4c>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	f200 8084 	bhi.w	8004fdc <UART_SetConfig+0xc4c>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0xb4c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004f6f 	.word	0x08004f6f
 8004ee4:	08004fdd 	.word	0x08004fdd
 8004ee8:	08004fdd 	.word	0x08004fdd
 8004eec:	08004f77 	.word	0x08004f77
 8004ef0:	08004fdd 	.word	0x08004fdd
 8004ef4:	08004fdd 	.word	0x08004fdd
 8004ef8:	08004fdd 	.word	0x08004fdd
 8004efc:	08004f87 	.word	0x08004f87
 8004f00:	08004fdd 	.word	0x08004fdd
 8004f04:	08004fdd 	.word	0x08004fdd
 8004f08:	08004fdd 	.word	0x08004fdd
 8004f0c:	08004fdd 	.word	0x08004fdd
 8004f10:	08004fdd 	.word	0x08004fdd
 8004f14:	08004fdd 	.word	0x08004fdd
 8004f18:	08004fdd 	.word	0x08004fdd
 8004f1c:	08004f97 	.word	0x08004f97
 8004f20:	08004fdd 	.word	0x08004fdd
 8004f24:	08004fdd 	.word	0x08004fdd
 8004f28:	08004fdd 	.word	0x08004fdd
 8004f2c:	08004fdd 	.word	0x08004fdd
 8004f30:	08004fdd 	.word	0x08004fdd
 8004f34:	08004fdd 	.word	0x08004fdd
 8004f38:	08004fdd 	.word	0x08004fdd
 8004f3c:	08004fdd 	.word	0x08004fdd
 8004f40:	08004fdd 	.word	0x08004fdd
 8004f44:	08004fdd 	.word	0x08004fdd
 8004f48:	08004fdd 	.word	0x08004fdd
 8004f4c:	08004fdd 	.word	0x08004fdd
 8004f50:	08004fdd 	.word	0x08004fdd
 8004f54:	08004fdd 	.word	0x08004fdd
 8004f58:	08004fdd 	.word	0x08004fdd
 8004f5c:	08004fcf 	.word	0x08004fcf
 8004f60:	2b40      	cmp	r3, #64	@ 0x40
 8004f62:	d037      	beq.n	8004fd4 <UART_SetConfig+0xc44>
 8004f64:	e03a      	b.n	8004fdc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f66:	f7fd fbd5 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004f6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f6c:	e03c      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6e:	f7fd fbe7 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f74:	e038      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe fdac 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f84:	e030      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fef8 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f94:	e028      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f96:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <UART_SetConfig+0xc2c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d012      	beq.n	8004fc8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <UART_SetConfig+0xc2c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	08db      	lsrs	r3, r3, #3
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <UART_SetConfig+0xc30>)
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fb4:	e018      	b.n	8004fe8 <UART_SetConfig+0xc58>
 8004fb6:	bf00      	nop
 8004fb8:	0800b040 	.word	0x0800b040
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b24      	ldr	r3, [pc, #144]	@ (800505c <UART_SetConfig+0xccc>)
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fcc:	e00c      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <UART_SetConfig+0xcd0>)
 8004fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd2:	e009      	b.n	8004fe8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fda:	e005      	b.n	8004fe8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fe6:	bf00      	nop
    }

    if (pclk != 0U)
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d021      	beq.n	8005032 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <UART_SetConfig+0xcd4>)
 8004ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	441a      	add	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	2b0f      	cmp	r3, #15
 8005016:	d909      	bls.n	800502c <UART_SetConfig+0xc9c>
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501e:	d205      	bcs.n	800502c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	b29a      	uxth	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e002      	b.n	8005032 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2201      	movs	r2, #1
 8005036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2201      	movs	r2, #1
 800503e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800504e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005052:	4618      	mov	r0, r3
 8005054:	3748      	adds	r7, #72	@ 0x48
 8005056:	46bd      	mov	sp, r7
 8005058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505c:	03d09000 	.word	0x03d09000
 8005060:	003d0900 	.word	0x003d0900
 8005064:	0800b040 	.word	0x0800b040

08005068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01a      	beq.n	800517e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005166:	d10a      	bne.n	800517e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b098      	sub	sp, #96	@ 0x60
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051bc:	f7fb ff0e 	bl	8000fdc <HAL_GetTick>
 80051c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d12f      	bne.n	8005230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f88e 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
 800520a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800520e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e063      	b.n	80052f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d149      	bne.n	80052d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005246:	2200      	movs	r2, #0
 8005248:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f857 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03c      	beq.n	80052d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	623b      	str	r3, [r7, #32]
   return(result);
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800526c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005276:	633b      	str	r3, [r7, #48]	@ 0x30
 8005278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800527c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60fb      	str	r3, [r7, #12]
   return(result);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052aa:	61fa      	str	r2, [r7, #28]
 80052ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	69b9      	ldr	r1, [r7, #24]
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	617b      	str	r3, [r7, #20]
   return(result);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e012      	b.n	80052f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3758      	adds	r7, #88	@ 0x58
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005310:	e04f      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d04b      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fb fe5f 	bl	8000fdc <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <UART_WaitOnFlagUntilTimeout+0x30>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e04e      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d037      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b80      	cmp	r3, #128	@ 0x80
 8005346:	d034      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d031      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d110      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2208      	movs	r2, #8
 8005362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f839 	bl	80053dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2208      	movs	r2, #8
 800536e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e029      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d111      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f81f 	bl	80053dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00f      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d0a0      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b095      	sub	sp, #84	@ 0x54
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005402:	643b      	str	r3, [r7, #64]	@ 0x40
 8005404:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e6      	bne.n	80053e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	61fb      	str	r3, [r7, #28]
   return(result);
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <UART_EndRxTransfer+0xc8>)
 800542a:	4013      	ands	r3, r2
 800542c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d118      	bne.n	8005484 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	647b      	str	r3, [r7, #68]	@ 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	613b      	str	r3, [r7, #16]
   return(result);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e6      	bne.n	8005452 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005498:	bf00      	nop
 800549a:	3754      	adds	r7, #84	@ 0x54
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	effffffe 	.word	0xeffffffe

080054a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UARTEx_DisableFifoMode+0x16>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e027      	b.n	800550e <HAL_UARTEx_DisableFifoMode+0x66>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2224      	movs	r2, #36	@ 0x24
 80054ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800552e:	2302      	movs	r3, #2
 8005530:	e02d      	b.n	800558e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2224      	movs	r2, #36	@ 0x24
 800553e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f850 	bl	8005614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e02d      	b.n	800560a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2224      	movs	r2, #36	@ 0x24
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f812 	bl	8005614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005620:	2b00      	cmp	r3, #0
 8005622:	d108      	bne.n	8005636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005634:	e031      	b.n	800569a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005636:	2310      	movs	r3, #16
 8005638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800563a:	2310      	movs	r3, #16
 800563c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	0e5b      	lsrs	r3, r3, #25
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	0f5b      	lsrs	r3, r3, #29
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	7b3a      	ldrb	r2, [r7, #12]
 8005662:	4911      	ldr	r1, [pc, #68]	@ (80056a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005664:	5c8a      	ldrb	r2, [r1, r2]
 8005666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800566a:	7b3a      	ldrb	r2, [r7, #12]
 800566c:	490f      	ldr	r1, [pc, #60]	@ (80056ac <UARTEx_SetNbDataToProcess+0x98>)
 800566e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005670:	fb93 f3f2 	sdiv	r3, r3, r2
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	7b7a      	ldrb	r2, [r7, #13]
 8005680:	4909      	ldr	r1, [pc, #36]	@ (80056a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005682:	5c8a      	ldrb	r2, [r1, r2]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005688:	7b7a      	ldrb	r2, [r7, #13]
 800568a:	4908      	ldr	r1, [pc, #32]	@ (80056ac <UARTEx_SetNbDataToProcess+0x98>)
 800568c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800568e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	0800b058 	.word	0x0800b058
 80056ac:	0800b060 	.word	0x0800b060

080056b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b0:	b084      	sub	sp, #16
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	f107 001c 	add.w	r0, r7, #28
 80056be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d121      	bne.n	800570e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <USB_CoreInit+0xdc>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 faaa 	bl	8005c5c <USB_CoreReset>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	e01b      	b.n	8005746 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa9e 	bl	8005c5c <USB_CoreReset>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005724:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
 8005738:	e005      	b.n	8005746 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005746:	7fbb      	ldrb	r3, [r7, #30]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d116      	bne.n	800577a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800575a:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <USB_CoreInit+0xe0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f043 0206 	orr.w	r2, r3, #6
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005786:	b004      	add	sp, #16
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	ffbdffbf 	.word	0xffbdffbf
 8005790:	03ee0000 	.word	0x03ee0000

08005794 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 0201 	bic.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d115      	bne.n	8005804 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057e4:	200a      	movs	r0, #10
 80057e6:	f7fb fc05 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	330a      	adds	r3, #10
 80057ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fa25 	bl	8005c40 <USB_GetMode>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d01e      	beq.n	800583a <USB_SetCurrentMode+0x84>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005800:	d9f0      	bls.n	80057e4 <USB_SetCurrentMode+0x2e>
 8005802:	e01a      	b.n	800583a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005816:	200a      	movs	r0, #10
 8005818:	f7fb fbec 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	330a      	adds	r3, #10
 8005820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa0c 	bl	8005c40 <USB_GetMode>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <USB_SetCurrentMode+0x84>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2bc7      	cmp	r3, #199	@ 0xc7
 8005832:	d9f0      	bls.n	8005816 <USB_SetCurrentMode+0x60>
 8005834:	e001      	b.n	800583a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e005      	b.n	8005846 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2bc8      	cmp	r3, #200	@ 0xc8
 800583e:	d101      	bne.n	8005844 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005850:	b084      	sub	sp, #16
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800585e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	e009      	b.n	8005884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3340      	adds	r3, #64	@ 0x40
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	3301      	adds	r3, #1
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b0e      	cmp	r3, #14
 8005888:	d9f2      	bls.n	8005870 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800588a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11c      	bne.n	80058cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e005      	b.n	80058d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10d      	bne.n	8005908 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058f4:	2100      	movs	r1, #0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f968 	bl	8005bcc <USB_SetDevSpeed>
 80058fc:	e008      	b.n	8005910 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058fe:	2101      	movs	r1, #1
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f963 	bl	8005bcc <USB_SetDevSpeed>
 8005906:	e003      	b.n	8005910 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005908:	2103      	movs	r1, #3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f95e 	bl	8005bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005910:	2110      	movs	r1, #16
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8fa 	bl	8005b0c <USB_FlushTxFifo>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f924 	bl	8005b70 <USB_FlushRxFifo>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005938:	461a      	mov	r2, r3
 800593a:	2300      	movs	r3, #0
 800593c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e043      	b.n	80059e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800596e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005972:	d118      	bne.n	80059a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005986:	461a      	mov	r2, r3
 8005988:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e013      	b.n	80059b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599c:	461a      	mov	r2, r3
 800599e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e008      	b.n	80059b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c4:	461a      	mov	r2, r3
 80059c6:	2300      	movs	r3, #0
 80059c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d6:	461a      	mov	r2, r3
 80059d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3301      	adds	r3, #1
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059e8:	461a      	mov	r2, r3
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d3b5      	bcc.n	800595c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	e043      	b.n	8005a7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a0c:	d118      	bne.n	8005a40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a20:	461a      	mov	r2, r3
 8005a22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	e013      	b.n	8005a52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a36:	461a      	mov	r2, r3
 8005a38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e008      	b.n	8005a52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	461a      	mov	r2, r3
 8005a72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a82:	461a      	mov	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d3b5      	bcc.n	80059f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005aaa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f043 0210 	orr.w	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <USB_DevInit+0x2b4>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005acc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f043 0208 	orr.w	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <USB_DevInit+0x2b8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b00:	b004      	add	sp, #16
 8005b02:	4770      	bx	lr
 8005b04:	803c3800 	.word	0x803c3800
 8005b08:	40000004 	.word	0x40000004

08005b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b26:	d901      	bls.n	8005b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e01b      	b.n	8005b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	daf2      	bge.n	8005b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	019b      	lsls	r3, r3, #6
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b50:	d901      	bls.n	8005b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e006      	b.n	8005b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d0f0      	beq.n	8005b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b88:	d901      	bls.n	8005b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e018      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	daf2      	bge.n	8005b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bac:	d901      	bls.n	8005bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e006      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d0f0      	beq.n	8005ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c74:	d901      	bls.n	8005c7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e01b      	b.n	8005cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	daf2      	bge.n	8005c68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c9e:	d901      	bls.n	8005ca4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e006      	b.n	8005cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d0f0      	beq.n	8005c92 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	22a8      	movs	r2, #168	@ 0xa8
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	4a30      	ldr	r2, [pc, #192]	@ (8005d98 <_prep_out_transaction+0xd8>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d9c <_prep_out_transaction+0xdc>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005ce6:	f001 fb17 	bl	8007318 <tud_mounted>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <_prep_out_transaction+0x44>
 8005cf0:	f001 fb24 	bl	800733c <tud_suspended>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f083 0301 	eor.w	r3, r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <_prep_out_transaction+0x44>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <_prep_out_transaction+0x46>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <_prep_out_transaction+0x5e>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <_prep_out_transaction+0x62>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e035      	b.n	8005d8e <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3310      	adds	r3, #16
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f989 	bl	800703e <tu_fifo_remaining>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8005d30:	897b      	ldrh	r3, [r7, #10]
 8005d32:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d34:	d801      	bhi.n	8005d3a <_prep_out_transaction+0x7a>
 8005d36:	2300      	movs	r3, #0
 8005d38:	e029      	b.n	8005d8e <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	78da      	ldrb	r2, [r3, #3]
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f002 fd9e 	bl	8008884 <usbd_edpt_claim>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <_prep_out_transaction+0x98>
 8005d54:	2300      	movs	r3, #0
 8005d56:	e01a      	b.n	8005d8e <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f96e 	bl	800703e <tu_fifo_remaining>
 8005d62:	4603      	mov	r3, r0
 8005d64:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d6a:	d908      	bls.n	8005d7e <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	78d9      	ldrb	r1, [r3, #3]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	7df8      	ldrb	r0, [r7, #23]
 8005d74:	2340      	movs	r3, #64	@ 0x40
 8005d76:	f002 fdd9 	bl	800892c <usbd_edpt_xfer>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	e007      	b.n	8005d8e <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	78da      	ldrb	r2, [r3, #3]
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f002 fda6 	bl	80088d8 <usbd_edpt_release>
    return false;
 8005d8c:	2300      	movs	r3, #0
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	24000610 	.word	0x24000610
 8005d9c:	24000760 	.word	0x24000760

08005da0 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	22a8      	movs	r2, #168	@ 0xa8
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	3310      	adds	r3, #16
 8005db4:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <tud_cdc_n_available+0x28>)
 8005db6:	4413      	add	r3, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 f8cb 	bl	8006f54 <tu_fifo_count>
 8005dbe:	4603      	mov	r3, r0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	24000610 	.word	0x24000610

08005dcc <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	22a8      	movs	r2, #168	@ 0xa8
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	4a0f      	ldr	r2, [pc, #60]	@ (8005e20 <tud_cdc_n_read+0x54>)
 8005de4:	4413      	add	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f103 0010 	add.w	r0, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d802      	bhi.n	8005dfe <tud_cdc_n_read+0x32>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	e001      	b.n	8005e02 <tud_cdc_n_read+0x36>
 8005dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e02:	461a      	mov	r2, r3
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	f001 f976 	bl	80070f6 <tu_fifo_read_n>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff ff55 	bl	8005cc0 <_prep_out_transaction>
  return num_read;
 8005e16:	693b      	ldr	r3, [r7, #16]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	24000610 	.word	0x24000610

08005e24 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	22a8      	movs	r2, #168	@ 0xa8
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	4a13      	ldr	r2, [pc, #76]	@ (8005e88 <tud_cdc_n_write+0x64>)
 8005e3c:	4413      	add	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f103 001c 	add.w	r0, r3, #28
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d802      	bhi.n	8005e56 <tud_cdc_n_write+0x32>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	e001      	b.n	8005e5a <tud_cdc_n_write+0x36>
 8005e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	f001 f9b1 	bl	80071c4 <tu_fifo_write_n>
 8005e62:	4603      	mov	r3, r0
 8005e64:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	331c      	adds	r3, #28
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f872 	bl	8006f54 <tu_fifo_count>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e74:	d903      	bls.n	8005e7e <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 f807 	bl	8005e8c <tud_cdc_n_write_flush>
  }

  return ret;
 8005e7e:	8a7b      	ldrh	r3, [r7, #18]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	24000610 	.word	0x24000610

08005e8c <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	22a8      	movs	r2, #168	@ 0xa8
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	4a39      	ldr	r2, [pc, #228]	@ (8005f84 <tud_cdc_n_write_flush+0xf8>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	01db      	lsls	r3, r3, #7
 8005ea8:	4a37      	ldr	r2, [pc, #220]	@ (8005f88 <tud_cdc_n_write_flush+0xfc>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	f001 fa33 	bl	8007318 <tud_mounted>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <tud_cdc_n_write_flush+0x40>
 8005eb8:	f001 fa40 	bl	800733c <tud_suspended>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <tud_cdc_n_write_flush+0x40>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <tud_cdc_n_write_flush+0x42>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <tud_cdc_n_write_flush+0x56>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e04c      	b.n	8005f7c <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	331c      	adds	r3, #28
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 f834 	bl	8006f54 <tu_fifo_count>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e042      	b.n	8005f7c <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	789a      	ldrb	r2, [r3, #2]
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f002 fcbe 	bl	8008884 <usbd_edpt_claim>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f083 0301 	eor.w	r3, r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <tud_cdc_n_write_flush+0x8c>
 8005f14:	2300      	movs	r3, #0
 8005f16:	e031      	b.n	8005f7c <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f103 001c 	add.w	r0, r3, #28
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3340      	adds	r3, #64	@ 0x40
 8005f22:	2240      	movs	r2, #64	@ 0x40
 8005f24:	4619      	mov	r1, r3
 8005f26:	f001 f8e6 	bl	80070f6 <tu_fifo_read_n>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8005f2e:	89bb      	ldrh	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	7899      	ldrb	r1, [r3, #2]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	7bf8      	ldrb	r0, [r7, #15]
 8005f42:	f002 fcf3 	bl	800892c <usbd_edpt_xfer>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f083 0301 	eor.w	r3, r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <tud_cdc_n_write_flush+0xdc>
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <tud_cdc_n_write_flush+0x100>)
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d000      	beq.n	8005f64 <tud_cdc_n_write_flush+0xd8>
 8005f62:	be00      	bkpt	0x0000
 8005f64:	2300      	movs	r3, #0
 8005f66:	e009      	b.n	8005f7c <tud_cdc_n_write_flush+0xf0>
    return count;
 8005f68:	89bb      	ldrh	r3, [r7, #12]
 8005f6a:	e007      	b.n	8005f7c <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	789a      	ldrb	r2, [r3, #2]
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f002 fcaf 	bl	80088d8 <usbd_edpt_release>
    return 0;
 8005f7a:	2300      	movs	r3, #0
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	24000610 	.word	0x24000610
 8005f88:	24000760 	.word	0x24000760
 8005f8c:	e000edf0 	.word	0xe000edf0

08005f90 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8005f96:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4822      	ldr	r0, [pc, #136]	@ (8006028 <cdcd_init+0x98>)
 8005f9e:	f004 ff92 	bl	800aec6 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4821      	ldr	r0, [pc, #132]	@ (800602c <cdcd_init+0x9c>)
 8005fa8:	f004 ff8d 	bl	800aec6 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005fac:	2300      	movs	r3, #0
 8005fae:	71fb      	strb	r3, [r7, #7]
 8005fb0:	e031      	b.n	8006016 <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	22a8      	movs	r2, #168	@ 0xa8
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <cdcd_init+0x98>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	22ff      	movs	r2, #255	@ 0xff
 8005fc4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005fcc:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f103 0010 	add.w	r0, r3, #16
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	2240      	movs	r2, #64	@ 0x40
 8005ff4:	f000 fb1c 	bl	8006630 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f103 001c 	add.w	r0, r3, #28
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006004:	2301      	movs	r3, #1
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2301      	movs	r3, #1
 800600a:	2240      	movs	r2, #64	@ 0x40
 800600c:	f000 fb10 	bl	8006630 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	3301      	adds	r3, #1
 8006014:	71fb      	strb	r3, [r7, #7]
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d9ca      	bls.n	8005fb2 <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	24000610 	.word	0x24000610
 800602c:	24000860 	.word	0x24000860

08006030 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006034:	2301      	movs	r3, #1
}
 8006036:	4618      	mov	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
 800604e:	e02c      	b.n	80060aa <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	22a8      	movs	r2, #168	@ 0xa8
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <cdcd_reset+0x7c>)
 800605a:	4413      	add	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800605e:	2205      	movs	r2, #5
 8006060:	2100      	movs	r1, #0
 8006062:	68b8      	ldr	r0, [r7, #8]
 8006064:	f004 ff2f 	bl	800aec6 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 8006068:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <cdcd_reset+0x80>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3310      	adds	r3, #16
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f8c6 	bl	800720c <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 8006080:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <cdcd_reset+0x80>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	331c      	adds	r3, #28
 8006092:	4618      	mov	r0, r3
 8006094:	f001 f8ba 	bl	800720c <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	331c      	adds	r3, #28
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f8c5 	bl	800722e <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	3301      	adds	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d9cf      	bls.n	8006050 <cdcd_reset+0x10>
  }
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	24000610 	.word	0x24000610
 80060c0:	24000860 	.word	0x24000860

080060c4 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b09a      	sub	sp, #104	@ 0x68
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	4603      	mov	r3, r0
 80060cc:	6039      	str	r1, [r7, #0]
 80060ce:	71fb      	strb	r3, [r7, #7]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	795b      	ldrb	r3, [r3, #5]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d103      	bne.n	80060e4 <cdcd_open+0x20>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	799b      	ldrb	r3, [r3, #6]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d001      	beq.n	80060e8 <cdcd_open+0x24>
 80060e4:	2300      	movs	r3, #0
 80060e6:	e0da      	b.n	800629e <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80060ee:	e010      	b.n	8006112 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 80060f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80060f4:	22a8      	movs	r2, #168	@ 0xa8
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	4a6b      	ldr	r2, [pc, #428]	@ (80062a8 <cdcd_open+0x1e4>)
 80060fc:	4413      	add	r3, r2
 80060fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006102:	789b      	ldrb	r3, [r3, #2]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006108:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800610c:	3301      	adds	r3, #1
 800610e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006112:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006116:	2b01      	cmp	r3, #1
 8006118:	d9ea      	bls.n	80060f0 <cdcd_open+0x2c>
 800611a:	e000      	b.n	800611e <cdcd_open+0x5a>
      break;
 800611c:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 800611e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006122:	2b01      	cmp	r3, #1
 8006124:	d90a      	bls.n	800613c <cdcd_open+0x78>
 8006126:	4b61      	ldr	r3, [pc, #388]	@ (80062ac <cdcd_open+0x1e8>)
 8006128:	647b      	str	r3, [r7, #68]	@ 0x44
 800612a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d000      	beq.n	8006138 <cdcd_open+0x74>
 8006136:	be00      	bkpt	0x0000
 8006138:	2300      	movs	r3, #0
 800613a:	e0b0      	b.n	800629e <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	789a      	ldrb	r2, [r3, #2]
 8006140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006142:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006144:	2309      	movs	r3, #9
 8006146:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800614e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615a:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 800615c:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 800615e:	e013      	b.n	8006188 <cdcd_open+0xc4>
 8006160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006168:	461a      	mov	r2, r3
 800616a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800616e:	4413      	add	r3, r2
 8006170:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006176:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 800617c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006186:	657b      	str	r3, [r7, #84]	@ 0x54
 8006188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	3301      	adds	r3, #1
 8006190:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006192:	2b24      	cmp	r3, #36	@ 0x24
 8006194:	d104      	bne.n	80061a0 <cdcd_open+0xdc>
 8006196:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800619a:	88bb      	ldrh	r3, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d9df      	bls.n	8006160 <cdcd_open+0x9c>
 80061a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	3301      	adds	r3, #1
 80061a8:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d12f      	bne.n	800620e <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80061ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061b0:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061b6:	4618      	mov	r0, r3
 80061b8:	f002 fb20 	bl	80087fc <usbd_edpt_open>
 80061bc:	4603      	mov	r3, r0
 80061be:	f083 0301 	eor.w	r3, r3, #1
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <cdcd_open+0x11a>
 80061c8:	4b38      	ldr	r3, [pc, #224]	@ (80062ac <cdcd_open+0x1e8>)
 80061ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d000      	beq.n	80061da <cdcd_open+0x116>
 80061d8:	be00      	bkpt	0x0000
 80061da:	2300      	movs	r3, #0
 80061dc:	e05f      	b.n	800629e <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80061de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e0:	789a      	ldrb	r2, [r3, #2]
 80061e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061e4:	705a      	strb	r2, [r3, #1]
 80061e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e8:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80061f4:	4413      	add	r3, r2
 80061f6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800620c:	657b      	str	r3, [r7, #84]	@ 0x54
 800620e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006210:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	3301      	adds	r3, #1
 8006216:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006218:	2b04      	cmp	r3, #4
 800621a:	d139      	bne.n	8006290 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 800621c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621e:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006220:	2b0a      	cmp	r3, #10
 8006222:	d135      	bne.n	8006290 <cdcd_open+0x1cc>
 8006224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006226:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800622c:	461a      	mov	r2, r3
 800622e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006232:	4413      	add	r3, r2
 8006234:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800624a:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 800624c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624e:	3303      	adds	r3, #3
 8006250:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006252:	3202      	adds	r2, #2
 8006254:	79f8      	ldrb	r0, [r7, #7]
 8006256:	9201      	str	r2, [sp, #4]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	2302      	movs	r3, #2
 800625c:	2202      	movs	r2, #2
 800625e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006260:	f002 fa64 	bl	800872c <usbd_open_edpt_pair>
 8006264:	4603      	mov	r3, r0
 8006266:	f083 0301 	eor.w	r3, r3, #1
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <cdcd_open+0x1c2>
 8006270:	4b0e      	ldr	r3, [pc, #56]	@ (80062ac <cdcd_open+0x1e8>)
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d000      	beq.n	8006282 <cdcd_open+0x1be>
 8006280:	be00      	bkpt	0x0000
 8006282:	2300      	movs	r3, #0
 8006284:	e00b      	b.n	800629e <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8006286:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800628a:	330e      	adds	r3, #14
 800628c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8006290:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fd13 	bl	8005cc0 <_prep_out_transaction>

  return drv_len;
 800629a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3760      	adds	r7, #96	@ 0x60
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	24000610 	.word	0x24000610
 80062ac:	e000edf0 	.word	0xe000edf0

080062b0 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	@ 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	603a      	str	r2, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
 80062bc:	460b      	mov	r3, r1
 80062be:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d001      	beq.n	80062d2 <cdcd_control_xfer_cb+0x22>
 80062ce:	2300      	movs	r3, #0
 80062d0:	e0d7      	b.n	8006482 <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062d8:	e014      	b.n	8006304 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062de:	22a8      	movs	r2, #168	@ 0xa8
 80062e0:	fb02 f303 	mul.w	r3, r2, r3
 80062e4:	4a69      	ldr	r2, [pc, #420]	@ (800648c <cdcd_control_xfer_cb+0x1dc>)
 80062e6:	4413      	add	r3, r2
 80062e8:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	889b      	ldrh	r3, [r3, #4]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d009      	beq.n	800630e <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80062fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062fe:	3301      	adds	r3, #1
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006308:	2b01      	cmp	r3, #1
 800630a:	d9e6      	bls.n	80062da <cdcd_control_xfer_cb+0x2a>
 800630c:	e000      	b.n	8006310 <cdcd_control_xfer_cb+0x60>
      break;
 800630e:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006314:	2b01      	cmp	r3, #1
 8006316:	d901      	bls.n	800631c <cdcd_control_xfer_cb+0x6c>
 8006318:	2300      	movs	r3, #0
 800631a:	e0b2      	b.n	8006482 <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	3b20      	subs	r3, #32
 8006322:	2b03      	cmp	r3, #3
 8006324:	f200 80a3 	bhi.w	800646e <cdcd_control_xfer_cb+0x1be>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <cdcd_control_xfer_cb+0x80>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006341 	.word	0x08006341
 8006334:	0800637d 	.word	0x0800637d
 8006338:	08006395 	.word	0x08006395
 800633c:	0800643d 	.word	0x0800643d
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006340:	79bb      	ldrb	r3, [r7, #6]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d108      	bne.n	8006358 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	f103 0208 	add.w	r2, r3, #8
 800634c:	79f8      	ldrb	r0, [r7, #7]
 800634e:	2307      	movs	r3, #7
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	f002 fca5 	bl	8008ca0 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8006356:	e08c      	b.n	8006472 <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006358:	79bb      	ldrb	r3, [r7, #6]
 800635a:	2b03      	cmp	r3, #3
 800635c:	f040 8089 	bne.w	8006472 <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 8006360:	4b4b      	ldr	r3, [pc, #300]	@ (8006490 <cdcd_control_xfer_cb+0x1e0>)
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8085 	beq.w	8006472 <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	f103 0208 	add.w	r2, r3, #8
 800636e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f3af 8000 	nop.w
      break;
 800637a:	e07a      	b.n	8006472 <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 800637c:	79bb      	ldrb	r3, [r7, #6]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d179      	bne.n	8006476 <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f103 0208 	add.w	r2, r3, #8
 8006388:	79f8      	ldrb	r0, [r7, #7]
 800638a:	2307      	movs	r3, #7
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	f002 fc87 	bl	8008ca0 <tud_control_xfer>
      }
      break;
 8006392:	e070      	b.n	8006476 <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8006394:	79bb      	ldrb	r3, [r7, #6]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f002 fc0c 	bl	8008bbc <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80063a4:	e069      	b.n	800647a <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 80063a6:	79bb      	ldrb	r3, [r7, #6]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d166      	bne.n	800647a <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	885b      	ldrh	r3, [r3, #2]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	885b      	ldrh	r3, [r3, #2]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	2301      	movs	r3, #1
 80063da:	75fb      	strb	r3, [r7, #23]
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	885b      	ldrh	r3, [r3, #2]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	f103 021c 	add.w	r2, r3, #28
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f083 0301 	eor.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f000 ff04 	bl	800722e <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8006426:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <cdcd_control_xfer_cb+0x1e4>)
 8006428:	2b00      	cmp	r3, #0
 800642a:	d026      	beq.n	800647a <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 800642c:	7fba      	ldrb	r2, [r7, #30]
 800642e:	7ff9      	ldrb	r1, [r7, #31]
 8006430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006434:	4618      	mov	r0, r3
 8006436:	f3af 8000 	nop.w
      break;
 800643a:	e01e      	b.n	800647a <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 800643c:	79bb      	ldrb	r3, [r7, #6]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f002 fbb8 	bl	8008bbc <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 800644c:	e017      	b.n	800647e <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 800644e:	79bb      	ldrb	r3, [r7, #6]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d114      	bne.n	800647e <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 8006454:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <cdcd_control_xfer_cb+0x1e8>)
 8006456:	2b00      	cmp	r3, #0
 8006458:	d011      	beq.n	800647e <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	885b      	ldrh	r3, [r3, #2]
 800645e:	b29a      	uxth	r2, r3
 8006460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006464:	4611      	mov	r1, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f3af 8000 	nop.w
      break;
 800646c:	e007      	b.n	800647e <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 800646e:	2300      	movs	r3, #0
 8006470:	e007      	b.n	8006482 <cdcd_control_xfer_cb+0x1d2>
      break;
 8006472:	bf00      	nop
 8006474:	e004      	b.n	8006480 <cdcd_control_xfer_cb+0x1d0>
      break;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <cdcd_control_xfer_cb+0x1d0>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <cdcd_control_xfer_cb+0x1d0>
      break;
 800647e:	bf00      	nop
  }

  return true;
 8006480:	2301      	movs	r3, #1
}
 8006482:	4618      	mov	r0, r3
 8006484:	3728      	adds	r7, #40	@ 0x28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	24000610 	.word	0x24000610
	...

0800649c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4603      	mov	r3, r0
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	460b      	mov	r3, r1
 80064aa:	71bb      	strb	r3, [r7, #6]
 80064ac:	4613      	mov	r3, r2
 80064ae:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80064b0:	2300      	movs	r3, #0
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e013      	b.n	80064de <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	22a8      	movs	r2, #168	@ 0xa8
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	4a56      	ldr	r2, [pc, #344]	@ (8006618 <cdcd_xfer_cb+0x17c>)
 80064c0:	4413      	add	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	79ba      	ldrb	r2, [r7, #6]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d00a      	beq.n	80064e4 <cdcd_xfer_cb+0x48>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	789b      	ldrb	r3, [r3, #2]
 80064d2:	79ba      	ldrb	r2, [r7, #6]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d005      	beq.n	80064e4 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80064d8:	7ffb      	ldrb	r3, [r7, #31]
 80064da:	3301      	adds	r3, #1
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	7ffb      	ldrb	r3, [r7, #31]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d9e8      	bls.n	80064b6 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80064e4:	7ffb      	ldrb	r3, [r7, #31]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d90a      	bls.n	8006500 <cdcd_xfer_cb+0x64>
 80064ea:	4b4c      	ldr	r3, [pc, #304]	@ (800661c <cdcd_xfer_cb+0x180>)
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d000      	beq.n	80064fc <cdcd_xfer_cb+0x60>
 80064fa:	be00      	bkpt	0x0000
 80064fc:	2300      	movs	r3, #0
 80064fe:	e087      	b.n	8006610 <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006500:	7ffb      	ldrb	r3, [r7, #31]
 8006502:	01db      	lsls	r3, r3, #7
 8006504:	4a46      	ldr	r2, [pc, #280]	@ (8006620 <cdcd_xfer_cb+0x184>)
 8006506:	4413      	add	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	78db      	ldrb	r3, [r3, #3]
 800650e:	79ba      	ldrb	r2, [r7, #6]
 8006510:	429a      	cmp	r2, r3
 8006512:	d148      	bne.n	80065a6 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3310      	adds	r3, #16
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	b292      	uxth	r2, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fe50 	bl	80071c4 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8006524:	4b3f      	ldr	r3, [pc, #252]	@ (8006624 <cdcd_xfer_cb+0x188>)
 8006526:	2b00      	cmp	r3, #0
 8006528:	d027      	beq.n	800657a <cdcd_xfer_cb+0xde>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	795b      	ldrb	r3, [r3, #5]
 800652e:	2bff      	cmp	r3, #255	@ 0xff
 8006530:	d023      	beq.n	800657a <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e01c      	b.n	8006572 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	795a      	ldrb	r2, [r3, #5]
 800653c:	6939      	ldr	r1, [r7, #16]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	440b      	add	r3, r1
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d111      	bne.n	800656c <cdcd_xfer_cb+0xd0>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	3310      	adds	r3, #16
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fd33 	bl	8006fb8 <tu_fifo_empty>
 8006552:	4603      	mov	r3, r0
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	795a      	ldrb	r2, [r3, #5]
 8006562:	7ffb      	ldrb	r3, [r7, #31]
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3301      	adds	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d3de      	bcc.n	8006538 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 800657a:	4b2b      	ldr	r3, [pc, #172]	@ (8006628 <cdcd_xfer_cb+0x18c>)
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00e      	beq.n	800659e <cdcd_xfer_cb+0x102>
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	3310      	adds	r3, #16
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fd17 	bl	8006fb8 <tu_fifo_empty>
 800658a:	4603      	mov	r3, r0
 800658c:	f083 0301 	eor.w	r3, r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8006596:	7ffb      	ldrb	r3, [r7, #31]
 8006598:	4618      	mov	r0, r3
 800659a:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800659e:	7ffb      	ldrb	r3, [r7, #31]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fb8d 	bl	8005cc0 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	789b      	ldrb	r3, [r3, #2]
 80065aa:	79ba      	ldrb	r2, [r7, #6]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d12e      	bne.n	800660e <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80065b0:	4b1e      	ldr	r3, [pc, #120]	@ (800662c <cdcd_xfer_cb+0x190>)
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80065b6:	7ffb      	ldrb	r3, [r7, #31]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80065be:	7ffb      	ldrb	r3, [r7, #31]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff fc63 	bl	8005e8c <tud_cdc_n_write_flush>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d120      	bne.n	800660e <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	331c      	adds	r3, #28
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fcbf 	bl	8006f54 <tu_fifo_count>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d118      	bne.n	800660e <cdcd_xfer_cb+0x172>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d015      	beq.n	800660e <cdcd_xfer_cb+0x172>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d110      	bne.n	800660e <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	789a      	ldrb	r2, [r3, #2]
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f002 f945 	bl	8008884 <usbd_edpt_claim>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	7899      	ldrb	r1, [r3, #2]
 8006604:	79f8      	ldrb	r0, [r7, #7]
 8006606:	2300      	movs	r3, #0
 8006608:	2200      	movs	r2, #0
 800660a:	f002 f98f 	bl	800892c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800660e:	2301      	movs	r3, #1
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	24000610 	.word	0x24000610
 800661c:	e000edf0 	.word	0xe000edf0
 8006620:	24000760 	.word	0x24000760
	...

08006630 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	460b      	mov	r3, r1
 8006640:	80fb      	strh	r3, [r7, #6]
 8006642:	4613      	mov	r3, r2
 8006644:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664c:	d901      	bls.n	8006652 <tu_fifo_config+0x22>
 800664e:	2300      	movs	r3, #0
 8006650:	e01b      	b.n	800668a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006664:	b299      	uxth	r1, r3
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	88d3      	ldrh	r3, [r2, #6]
 800666a:	f361 030e 	bfi	r3, r1, #0, #15
 800666e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	79d3      	ldrb	r3, [r2, #7]
 8006674:	7e39      	ldrb	r1, [r7, #24]
 8006676:	f361 13c7 	bfi	r3, r1, #7, #1
 800667a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006688:	2301      	movs	r3, #1
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08a      	sub	sp, #40	@ 0x28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	089b      	lsrs	r3, r3, #2
 80066ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80066ae:	e00b      	b.n	80066c8 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	61ba      	str	r2, [r7, #24]
 80066b8:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	601a      	str	r2, [r3, #0]
}
 80066c0:	bf00      	nop
    ff_buf += 4;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3304      	adds	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80066c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066ca:	1e5a      	subs	r2, r3, #1
 80066cc:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ee      	bne.n	80066b0 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80066e8:	7ffa      	ldrb	r2, [r7, #31]
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f004 fc15 	bl	800af20 <memcpy>
  }
}
 80066f6:	bf00      	nop
 80066f8:	3728      	adds	r7, #40	@ 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08a      	sub	sp, #40	@ 0x28
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8006716:	e008      	b.n	800672a <_ff_pull_const_addr+0x2c>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	3304      	adds	r3, #4
 8006728:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800672a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800672c:	1e5a      	subs	r2, r3, #1
 800672e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f1      	bne.n	8006718 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800673e:	7ffb      	ldrb	r3, [r7, #31]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8006748:	7ffa      	ldrb	r2, [r7, #31]
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f004 fbe5 	bl	800af20 <memcpy>

    *reg_tx = tmp32;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	601a      	str	r2, [r3, #0]
  }
}
 800675c:	bf00      	nop
 800675e:	3728      	adds	r7, #40	@ 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	88c9      	ldrh	r1, [r1, #6]
 800677c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006780:	b289      	uxth	r1, r1
 8006782:	fb01 f202 	mul.w	r2, r1, r2
 8006786:	1898      	adds	r0, r3, r2
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88db      	ldrh	r3, [r3, #6]
 800678c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	f004 fbc3 	bl	800af20 <memcpy>
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08e      	sub	sp, #56	@ 0x38
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	4611      	mov	r1, r2
 80067ae:	461a      	mov	r2, r3
 80067b0:	460b      	mov	r3, r1
 80067b2:	80fb      	strh	r3, [r7, #6]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	889a      	ldrh	r2, [r3, #4]
 80067bc:	88bb      	ldrh	r3, [r7, #4]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88db      	ldrh	r3, [r3, #6]
 80067ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067d8:	fb13 f302 	smulbb	r3, r3, r2
 80067dc:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88db      	ldrh	r3, [r3, #6]
 80067e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ec:	fb13 f302 	smulbb	r3, r3, r2
 80067f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	88ba      	ldrh	r2, [r7, #4]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	88c9      	ldrh	r1, [r1, #6]
 80067fc:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006800:	b289      	uxth	r1, r1
 8006802:	fb01 f202 	mul.w	r2, r1, r2
 8006806:	4413      	add	r3, r2
 8006808:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800680a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <_ff_push_n+0x76>
 8006812:	2b01      	cmp	r3, #1
 8006814:	d022      	beq.n	800685c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8006816:	e09e      	b.n	8006956 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800681c:	429a      	cmp	r2, r3
 800681e:	d80d      	bhi.n	800683c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	88d2      	ldrh	r2, [r2, #6]
 8006826:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800682a:	b292      	uxth	r2, r2
 800682c:	fb02 f303 	mul.w	r3, r2, r3
 8006830:	461a      	mov	r2, r3
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006836:	f004 fb73 	bl	800af20 <memcpy>
      break;
 800683a:	e08c      	b.n	8006956 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800683c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800683e:	461a      	mov	r2, r3
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006844:	f004 fb6c 	bl	800af20 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006854:	4619      	mov	r1, r3
 8006856:	f004 fb63 	bl	800af20 <memcpy>
      break;
 800685a:	e07c      	b.n	8006956 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006860:	429a      	cmp	r2, r3
 8006862:	d80f      	bhi.n	8006884 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88db      	ldrh	r3, [r3, #6]
 8006868:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	fb13 f302 	smulbb	r3, r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800687e:	f7ff ff0a 	bl	8006696 <_ff_push_const_addr>
      break;
 8006882:	e067      	b.n	8006954 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8006884:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800688c:	8c3b      	ldrh	r3, [r7, #32]
 800688e:	461a      	mov	r2, r3
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006894:	f7ff feff 	bl	8006696 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006898:	8c3b      	ldrh	r3, [r7, #32]
 800689a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689c:	4413      	add	r3, r2
 800689e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80068a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80068ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d043      	beq.n	800693c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80068b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f1c3 0304 	rsb	r3, r3, #4
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068c6:	837b      	strh	r3, [r7, #26]
 80068c8:	4613      	mov	r3, r2
 80068ca:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80068cc:	8b7a      	ldrh	r2, [r7, #26]
 80068ce:	8b3b      	ldrh	r3, [r7, #24]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bf28      	it	cs
 80068d4:	4613      	movcs	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80068dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80068ee:	f107 0314 	add.w	r3, r7, #20
 80068f2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80068f4:	e007      	b.n	8006906 <_ff_push_n+0x164>
 80068f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068f8:	1c53      	adds	r3, r2, #1
 80068fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	6339      	str	r1, [r7, #48]	@ 0x30
 8006902:	7812      	ldrb	r2, [r2, #0]
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800690a:	1e5a      	subs	r2, r3, #1
 800690c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1f0      	bne.n	80068f6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800691a:	e007      	b.n	800692c <_ff_push_n+0x18a>
 800691c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800691e:	1c53      	adds	r3, r2, #1
 8006920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	1c59      	adds	r1, r3, #1
 8006926:	6339      	str	r1, [r7, #48]	@ 0x30
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006930:	1e5a      	subs	r2, r3, #1
 8006932:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <_ff_push_n+0x17a>
 800693a:	e002      	b.n	8006942 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8006942:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <_ff_push_n+0x1b2>
 8006948:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800694a:	461a      	mov	r2, r3
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006950:	f7ff fea1 	bl	8006696 <_ff_push_const_addr>
      break;
 8006954:	bf00      	nop
  }
}
 8006956:	bf00      	nop
 8006958:	3738      	adds	r7, #56	@ 0x38
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	4613      	mov	r3, r2
 800696a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	88c9      	ldrh	r1, [r1, #6]
 8006976:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800697a:	b289      	uxth	r1, r1
 800697c:	fb01 f202 	mul.w	r2, r1, r2
 8006980:	1899      	adds	r1, r3, r2
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	68b8      	ldr	r0, [r7, #8]
 8006990:	f004 fac6 	bl	800af20 <memcpy>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08e      	sub	sp, #56	@ 0x38
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	460b      	mov	r3, r1
 80069ac:	80fb      	strh	r3, [r7, #6]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	889a      	ldrh	r2, [r3, #4]
 80069b6:	88bb      	ldrh	r3, [r7, #4]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88db      	ldrh	r3, [r3, #6]
 80069c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069d2:	fb13 f302 	smulbb	r3, r3, r2
 80069d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	88db      	ldrh	r3, [r3, #6]
 80069dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069e6:	fb13 f302 	smulbb	r3, r3, r2
 80069ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	88ba      	ldrh	r2, [r7, #4]
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	88c9      	ldrh	r1, [r1, #6]
 80069f6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80069fa:	b289      	uxth	r1, r1
 80069fc:	fb01 f202 	mul.w	r2, r1, r2
 8006a00:	4413      	add	r3, r2
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006a04:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <_ff_pull_n+0x76>
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d022      	beq.n	8006a56 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8006a10:	e0a0      	b.n	8006b54 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d80d      	bhi.n	8006a36 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	88d2      	ldrh	r2, [r2, #6]
 8006a20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006a24:	b292      	uxth	r2, r2
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f004 fa76 	bl	800af20 <memcpy>
    break;
 8006a34:	e08e      	b.n	8006b54 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8006a36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a3c:	68b8      	ldr	r0, [r7, #8]
 8006a3e:	f004 fa6f 	bl	800af20 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8006a42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	18d0      	adds	r0, r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f004 fa66 	bl	800af20 <memcpy>
    break;
 8006a54:	e07e      	b.n	8006b54 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d80f      	bhi.n	8006a7e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	fb13 f302 	smulbb	r3, r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f7ff fe41 	bl	80066fe <_ff_pull_const_addr>
    break;
 8006a7c:	e069      	b.n	8006b52 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8006a7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8006a86:	8c3b      	ldrh	r3, [r7, #32]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a8c:	68b8      	ldr	r0, [r7, #8]
 8006a8e:	f7ff fe36 	bl	80066fe <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006a92:	8c3b      	ldrh	r3, [r7, #32]
 8006a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a96:	4413      	add	r3, r2
 8006a98:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006a9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d045      	beq.n	8006b3a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f1c3 0304 	rsb	r3, r3, #4
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ac0:	837b      	strh	r3, [r7, #26]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	833b      	strh	r3, [r7, #24]
 8006ac6:	8b7a      	ldrh	r2, [r7, #26]
 8006ac8:	8b3b      	ldrh	r3, [r7, #24]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf28      	it	cs
 8006ace:	4613      	movcs	r3, r2
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006aec:	e007      	b.n	8006afe <_ff_pull_n+0x162>
 8006aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af0:	1c53      	adds	r3, r2, #1
 8006af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006b12:	e007      	b.n	8006b24 <_ff_pull_n+0x188>
 8006b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b16:	1c53      	adds	r3, r2, #1
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e002      	b.n	8006b40 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006b40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <_ff_pull_n+0x1b6>
 8006b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b4c:	68b8      	ldr	r0, [r7, #8]
 8006b4e:	f7ff fdd6 	bl	80066fe <_ff_pull_const_addr>
    break;
 8006b52:	bf00      	nop
  }
}
 8006b54:	bf00      	nop
 8006b56:	3738      	adds	r7, #56	@ 0x38
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	80fb      	strh	r3, [r7, #6]
 8006b66:	460b      	mov	r3, r1
 8006b68:	80bb      	strh	r3, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006b6e:	88ba      	ldrh	r2, [r7, #4]
 8006b70:	887b      	ldrh	r3, [r7, #2]
 8006b72:	4413      	add	r3, r2
 8006b74:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006b76:	88ba      	ldrh	r2, [r7, #4]
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d804      	bhi.n	8006b88 <advance_index+0x2c>
 8006b7e:	89fa      	ldrh	r2, [r7, #14]
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	429a      	cmp	r2, r3
 8006b86:	db08      	blt.n	8006b9a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	425b      	negs	r3, r3
 8006b90:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006b92:	89fa      	ldrh	r2, [r7, #14]
 8006b94:	89bb      	ldrh	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	80fb      	strh	r3, [r7, #6]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	889b      	ldrh	r3, [r3, #4]
 8006bc2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	843b      	strh	r3, [r7, #32]
 8006bc8:	88bb      	ldrh	r3, [r7, #4]
 8006bca:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006bcc:	8c3a      	ldrh	r2, [r7, #32]
 8006bce:	8bfb      	ldrh	r3, [r7, #30]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d304      	bcc.n	8006bde <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006bd4:	8c3a      	ldrh	r2, [r7, #32]
 8006bd6:	8bfb      	ldrh	r3, [r7, #30]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	e008      	b.n	8006bf0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	8c39      	ldrh	r1, [r7, #32]
 8006be6:	8bfb      	ldrh	r3, [r7, #30]
 8006be8:	1acb      	subs	r3, r1, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4413      	add	r3, r2
 8006bee:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8006bf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <_tu_fifo_peek+0x54>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e037      	b.n	8006c6c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	889b      	ldrh	r3, [r3, #4]
 8006c00:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d91b      	bls.n	8006c3e <_tu_fifo_peek+0x96>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	889b      	ldrh	r3, [r3, #4]
 8006c12:	8afa      	ldrh	r2, [r7, #22]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d305      	bcc.n	8006c24 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	889b      	ldrh	r3, [r3, #4]
 8006c1c:	8afa      	ldrh	r2, [r7, #22]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	82bb      	strh	r3, [r7, #20]
 8006c22:	e004      	b.n	8006c2e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	889a      	ldrh	r2, [r3, #4]
 8006c28:	8afb      	ldrh	r3, [r7, #22]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	8aba      	ldrh	r2, [r7, #20]
 8006c32:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006c34:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006c36:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	889b      	ldrh	r3, [r3, #4]
 8006c3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	889b      	ldrh	r3, [r3, #4]
 8006c42:	827b      	strh	r3, [r7, #18]
 8006c44:	88bb      	ldrh	r3, [r7, #4]
 8006c46:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006c48:	e003      	b.n	8006c52 <_tu_fifo_peek+0xaa>
 8006c4a:	8a3a      	ldrh	r2, [r7, #16]
 8006c4c:	8a7b      	ldrh	r3, [r7, #18]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	823b      	strh	r3, [r7, #16]
 8006c52:	8a7a      	ldrh	r2, [r7, #18]
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d9f7      	bls.n	8006c4a <_tu_fifo_peek+0xa2>
  return idx;
 8006c5a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006c5c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c60:	461a      	mov	r2, r3
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fe7a 	bl	800695e <_ff_pull>

  return true;
 8006c6a:	2301      	movs	r3, #1
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	@ 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08c      	sub	sp, #48	@ 0x30
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	460b      	mov	r3, r1
 8006c84:	80fb      	strh	r3, [r7, #6]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	889b      	ldrh	r3, [r3, #4]
 8006c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c90:	88bb      	ldrh	r3, [r7, #4]
 8006c92:	843b      	strh	r3, [r7, #32]
 8006c94:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006c96:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006c98:	8c3a      	ldrh	r2, [r7, #32]
 8006c9a:	8bfb      	ldrh	r3, [r7, #30]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d304      	bcc.n	8006caa <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006ca0:	8c3a      	ldrh	r2, [r7, #32]
 8006ca2:	8bfb      	ldrh	r3, [r7, #30]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	e008      	b.n	8006cbc <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	8c39      	ldrh	r1, [r7, #32]
 8006cb2:	8bfb      	ldrh	r3, [r7, #30]
 8006cb4:	1acb      	subs	r3, r1, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4413      	add	r3, r2
 8006cba:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8006cbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <_tu_fifo_peek_n+0x54>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e041      	b.n	8006d4c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	889b      	ldrh	r3, [r3, #4]
 8006ccc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d91b      	bls.n	8006d0a <_tu_fifo_peek_n+0x96>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	88bb      	ldrh	r3, [r7, #4]
 8006cd8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	889b      	ldrh	r3, [r3, #4]
 8006cde:	8afa      	ldrh	r2, [r7, #22]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d305      	bcc.n	8006cf0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	889b      	ldrh	r3, [r3, #4]
 8006ce8:	8afa      	ldrh	r2, [r7, #22]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	82bb      	strh	r3, [r7, #20]
 8006cee:	e004      	b.n	8006cfa <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	889a      	ldrh	r2, [r3, #4]
 8006cf4:	8afb      	ldrh	r3, [r7, #22]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	8aba      	ldrh	r2, [r7, #20]
 8006cfe:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006d00:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006d02:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	889b      	ldrh	r3, [r3, #4]
 8006d08:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006d0a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d201      	bcs.n	8006d16 <_tu_fifo_peek_n+0xa2>
 8006d12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d14:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	889b      	ldrh	r3, [r3, #4]
 8006d1a:	827b      	strh	r3, [r7, #18]
 8006d1c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006d1e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006d20:	e003      	b.n	8006d2a <_tu_fifo_peek_n+0xb6>
 8006d22:	8a3a      	ldrh	r2, [r7, #16]
 8006d24:	8a7b      	ldrh	r3, [r7, #18]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	823b      	strh	r3, [r7, #16]
 8006d2a:	8a7a      	ldrh	r2, [r7, #18]
 8006d2c:	8a3b      	ldrh	r3, [r7, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d9f7      	bls.n	8006d22 <_tu_fifo_peek_n+0xae>
  return idx;
 8006d32:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006d34:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006d36:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	460b      	mov	r3, r1
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fe29 	bl	800699c <_ff_pull_n>

  return n;
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3728      	adds	r7, #40	@ 0x28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b092      	sub	sp, #72	@ 0x48
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	460b      	mov	r3, r1
 8006d64:	80fb      	strh	r3, [r7, #6]
 8006d66:	4613      	mov	r3, r2
 8006d68:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <_tu_fifo_write_n+0x20>
 8006d70:	2300      	movs	r3, #0
 8006d72:	e0bc      	b.n	8006eee <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	891b      	ldrh	r3, [r3, #8]
 8006d78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	895b      	ldrh	r3, [r3, #10]
 8006d7e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	79db      	ldrb	r3, [r3, #7]
 8006d88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f083 0301 	eor.w	r3, r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d036      	beq.n	8006e06 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	889b      	ldrh	r3, [r3, #4]
 8006d9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006d9e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006da0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006da2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006da4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006da6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006da8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dac:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006dae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006db0:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8006db2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006db4:	8c3b      	ldrh	r3, [r7, #32]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d304      	bcc.n	8006dc4 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8006dba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006dbc:	8c3b      	ldrh	r3, [r7, #32]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	e008      	b.n	8006dd6 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006dc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006dcc:	8c3b      	ldrh	r3, [r7, #32]
 8006dce:	1acb      	subs	r3, r1, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006dd6:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006dd8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006dda:	8bfb      	ldrh	r3, [r7, #30]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d904      	bls.n	8006dea <_tu_fifo_write_n+0x96>
 8006de0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006de2:	8bfb      	ldrh	r3, [r7, #30]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	e000      	b.n	8006dec <_tu_fifo_write_n+0x98>
 8006dea:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006dec:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006df2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006df4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006df6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006df8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	bf28      	it	cs
 8006dfe:	4613      	movcs	r3, r2
 8006e00:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8006e02:	80fb      	strh	r3, [r7, #6]
 8006e04:	e04b      	b.n	8006e9e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	889b      	ldrh	r3, [r3, #4]
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d317      	bcc.n	8006e40 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006e10:	797b      	ldrb	r3, [r7, #5]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10e      	bne.n	8006e34 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	8892      	ldrh	r2, [r2, #4]
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	88d2      	ldrh	r2, [r2, #6]
 8006e22:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006e26:	b292      	uxth	r2, r2
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	4413      	add	r3, r2
 8006e32:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	889b      	ldrh	r3, [r3, #4]
 8006e38:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006e3e:	e02e      	b.n	8006e9e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	889b      	ldrh	r3, [r3, #4]
 8006e44:	83bb      	strh	r3, [r7, #28]
 8006e46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e48:	837b      	strh	r3, [r7, #26]
 8006e4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e4c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006e4e:	8b7a      	ldrh	r2, [r7, #26]
 8006e50:	8b3b      	ldrh	r3, [r7, #24]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d304      	bcc.n	8006e60 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8006e56:	8b7a      	ldrh	r2, [r7, #26]
 8006e58:	8b3b      	ldrh	r3, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	e008      	b.n	8006e72 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006e60:	8bbb      	ldrh	r3, [r7, #28]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	8b79      	ldrh	r1, [r7, #26]
 8006e68:	8b3b      	ldrh	r3, [r7, #24]
 8006e6a:	1acb      	subs	r3, r1, r3
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	4413      	add	r3, r2
 8006e70:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006e72:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8006e74:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	889b      	ldrh	r3, [r3, #4]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	429a      	cmp	r2, r3
 8006e82:	db0c      	blt.n	8006e9e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8898      	ldrh	r0, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	889a      	ldrh	r2, [r3, #4]
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e94:	4619      	mov	r1, r3
 8006e96:	f7ff fe61 	bl	8006b5c <advance_index>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d023      	beq.n	8006eec <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	889b      	ldrh	r3, [r3, #4]
 8006ea8:	82fb      	strh	r3, [r7, #22]
 8006eaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006eac:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006eae:	e003      	b.n	8006eb8 <_tu_fifo_write_n+0x164>
 8006eb0:	8aba      	ldrh	r2, [r7, #20]
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	82bb      	strh	r3, [r7, #20]
 8006eb8:	8afa      	ldrh	r2, [r7, #22]
 8006eba:	8abb      	ldrh	r3, [r7, #20]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d9f7      	bls.n	8006eb0 <_tu_fifo_write_n+0x15c>
  return idx;
 8006ec0:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006ec2:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8006ec4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	797b      	ldrb	r3, [r7, #5]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fc66 	bl	80067a2 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	889b      	ldrh	r3, [r3, #4]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fe3c 	bl	8006b5c <advance_index>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006eec:	88fb      	ldrh	r3, [r7, #6]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3740      	adds	r7, #64	@ 0x40
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af02      	add	r7, sp, #8
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	460b      	mov	r3, r1
 8006f06:	80fb      	strh	r3, [r7, #6]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	891b      	ldrh	r3, [r3, #8]
 8006f10:	b298      	uxth	r0, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	895b      	ldrh	r3, [r3, #10]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	88f9      	ldrh	r1, [r7, #6]
 8006f1a:	797a      	ldrb	r2, [r7, #5]
 8006f1c:	9201      	str	r2, [sp, #4]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4603      	mov	r3, r0
 8006f22:	460a      	mov	r2, r1
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fea4 	bl	8006c74 <_tu_fifo_peek_n>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8898      	ldrh	r0, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	895b      	ldrh	r3, [r3, #10]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	f7ff fe0d 	bl	8006b5c <advance_index>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8899      	ldrh	r1, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	891b      	ldrh	r3, [r3, #8]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	895b      	ldrh	r3, [r3, #10]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8279      	strh	r1, [r7, #18]
 8006f6e:	823a      	strh	r2, [r7, #16]
 8006f70:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8006f72:	8a3a      	ldrh	r2, [r7, #16]
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d304      	bcc.n	8006f84 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006f7a:	8a3a      	ldrh	r2, [r7, #16]
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	e008      	b.n	8006f96 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006f84:	8a7b      	ldrh	r3, [r7, #18]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	8a39      	ldrh	r1, [r7, #16]
 8006f8c:	89fb      	ldrh	r3, [r7, #14]
 8006f8e:	1acb      	subs	r3, r1, r3
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4413      	add	r3, r2
 8006f94:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	8892      	ldrh	r2, [r2, #4]
 8006f9a:	82fb      	strh	r3, [r7, #22]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	82bb      	strh	r3, [r7, #20]
 8006fa0:	8afa      	ldrh	r2, [r7, #22]
 8006fa2:	8abb      	ldrh	r3, [r7, #20]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	bf28      	it	cs
 8006fa8:	4613      	movcs	r3, r2
 8006faa:	b29b      	uxth	r3, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	891b      	ldrh	r3, [r3, #8]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	895b      	ldrh	r3, [r3, #10]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8899      	ldrh	r1, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	891b      	ldrh	r3, [r3, #8]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	81f9      	strh	r1, [r7, #14]
 8006ffc:	81ba      	strh	r2, [r7, #12]
 8006ffe:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8007000:	89ba      	ldrh	r2, [r7, #12]
 8007002:	897b      	ldrh	r3, [r7, #10]
 8007004:	429a      	cmp	r2, r3
 8007006:	d304      	bcc.n	8007012 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8007008:	89ba      	ldrh	r2, [r7, #12]
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	b29b      	uxth	r3, r3
 8007010:	e008      	b.n	8007024 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	89b9      	ldrh	r1, [r7, #12]
 800701a:	897b      	ldrh	r3, [r7, #10]
 800701c:	1acb      	subs	r3, r1, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	4413      	add	r3, r2
 8007022:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	8892      	ldrh	r2, [r2, #4]
 8007028:	4293      	cmp	r3, r2
 800702a:	bf2c      	ite	cs
 800702c:	2301      	movcs	r3, #1
 800702e:	2300      	movcc	r3, #0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 800703e:	b480      	push	{r7}
 8007040:	b087      	sub	sp, #28
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	8899      	ldrh	r1, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	891b      	ldrh	r3, [r3, #8]
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	895b      	ldrh	r3, [r3, #10]
 8007054:	b29b      	uxth	r3, r3
 8007056:	82f9      	strh	r1, [r7, #22]
 8007058:	82ba      	strh	r2, [r7, #20]
 800705a:	827b      	strh	r3, [r7, #18]
 800705c:	8afb      	ldrh	r3, [r7, #22]
 800705e:	823b      	strh	r3, [r7, #16]
 8007060:	8abb      	ldrh	r3, [r7, #20]
 8007062:	81fb      	strh	r3, [r7, #14]
 8007064:	8a7b      	ldrh	r3, [r7, #18]
 8007066:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8007068:	89fa      	ldrh	r2, [r7, #14]
 800706a:	89bb      	ldrh	r3, [r7, #12]
 800706c:	429a      	cmp	r2, r3
 800706e:	d304      	bcc.n	800707a <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8007070:	89fa      	ldrh	r2, [r7, #14]
 8007072:	89bb      	ldrh	r3, [r7, #12]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	b29b      	uxth	r3, r3
 8007078:	e008      	b.n	800708c <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800707a:	8a3b      	ldrh	r3, [r7, #16]
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	89f9      	ldrh	r1, [r7, #14]
 8007082:	89bb      	ldrh	r3, [r7, #12]
 8007084:	1acb      	subs	r3, r1, r3
 8007086:	b29b      	uxth	r3, r3
 8007088:	4413      	add	r3, r2
 800708a:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800708c:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800708e:	8afa      	ldrh	r2, [r7, #22]
 8007090:	897b      	ldrh	r3, [r7, #10]
 8007092:	429a      	cmp	r2, r3
 8007094:	d904      	bls.n	80070a0 <tu_fifo_remaining+0x62>
 8007096:	8afa      	ldrh	r2, [r7, #22]
 8007098:	897b      	ldrh	r3, [r7, #10]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	b29b      	uxth	r3, r3
 800709e:	e000      	b.n	80070a2 <tu_fifo_remaining+0x64>
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	891b      	ldrh	r3, [r3, #8]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	895b      	ldrh	r3, [r3, #10]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fd6e 	bl	8006ba8 <_tu_fifo_peek>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8898      	ldrh	r0, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	895b      	ldrh	r3, [r3, #10]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	b292      	uxth	r2, r2
 80070de:	4619      	mov	r1, r3
 80070e0:	f7ff fd3c 	bl	8006b5c <advance_index>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8007104:	88fa      	ldrh	r2, [r7, #6]
 8007106:	2300      	movs	r3, #0
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fef3 	bl	8006ef6 <_tu_fifo_read_n>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	4613      	mov	r3, r2
 8007126:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	2301      	movs	r3, #1
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff fee1 	bl	8006ef6 <_tu_fifo_read_n>
 8007134:	4603      	mov	r3, r0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	891b      	ldrh	r3, [r3, #8]
 800714c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff ff47 	bl	8006fe2 <tu_fifo_full>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <tu_fifo_write+0x36>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	79db      	ldrb	r3, [r3, #7]
 800715e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f083 0301 	eor.w	r3, r3, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <tu_fifo_write+0x36>
  {
    ret = false;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]
 8007172:	e022      	b.n	80071ba <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	889b      	ldrh	r3, [r3, #4]
 8007178:	823b      	strh	r3, [r7, #16]
 800717a:	8abb      	ldrh	r3, [r7, #20]
 800717c:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800717e:	e003      	b.n	8007188 <tu_fifo_write+0x4a>
 8007180:	89fa      	ldrh	r2, [r7, #14]
 8007182:	8a3b      	ldrh	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	81fb      	strh	r3, [r7, #14]
 8007188:	8a3a      	ldrh	r2, [r7, #16]
 800718a:	89fb      	ldrh	r3, [r7, #14]
 800718c:	429a      	cmp	r2, r3
 800718e:	d9f7      	bls.n	8007180 <tu_fifo_write+0x42>
  return idx;
 8007190:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007192:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8007194:	8a7b      	ldrh	r3, [r7, #18]
 8007196:	461a      	mov	r2, r3
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fae2 	bl	8006764 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	889b      	ldrh	r3, [r3, #4]
 80071a4:	8ab9      	ldrh	r1, [r7, #20]
 80071a6:	2201      	movs	r2, #1
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fcd7 	bl	8006b5c <advance_index>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	811a      	strh	r2, [r3, #8]

    ret = true;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	2300      	movs	r3, #0
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fdbb 	bl	8006d54 <_tu_fifo_write_n>
 80071de:	4603      	mov	r3, r0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	2301      	movs	r3, #1
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fda9 	bl	8006d54 <_tu_fifo_write_n>
 8007202:	4603      	mov	r3, r0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8007220:	2301      	movs	r3, #1
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	79d3      	ldrb	r3, [r2, #7]
 800723e:	78f9      	ldrb	r1, [r7, #3]
 8007240:	f361 13c7 	bfi	r3, r1, #7, #1
 8007244:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007246:	2301      	movs	r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
 8007260:	4613      	mov	r3, r2
 8007262:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return NULL;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  return NULL;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <tud_suspend_cb>:
}

TU_ATTR_WEAK void tud_umount_cb(void) {
}

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	603a      	str	r2, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
 80072ec:	460b      	mov	r3, r1
 80072ee:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8007308:	2301      	movs	r3, #1
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <tud_mounted+0x20>)
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	bf14      	ite	ne
 8007326:	2301      	movne	r3, #1
 8007328:	2300      	moveq	r3, #0
 800732a:	b2db      	uxtb	r3, r3
}
 800732c:	4618      	mov	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	24000864 	.word	0x24000864

0800733c <tud_suspended>:

bool tud_suspended(void) {
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8007340:	4b07      	ldr	r3, [pc, #28]	@ (8007360 <tud_suspended+0x24>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	bf14      	ite	ne
 800734e:	2301      	movne	r3, #1
 8007350:	2300      	moveq	r3, #0
 8007352:	b2db      	uxtb	r3, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	24000864 	.word	0x24000864

08007364 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8007368:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <tud_inited+0x1c>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2bff      	cmp	r3, #255	@ 0xff
 800736e:	bf14      	ite	ne
 8007370:	2301      	movne	r3, #1
 8007372:	2300      	moveq	r3, #0
 8007374:	b2db      	uxtb	r3, r3
}
 8007376:	4618      	mov	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	24000021 	.word	0x24000021

08007384 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	@ 0x30
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8007390:	f7ff ffe8 	bl	8007364 <tud_inited>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 800739a:	2301      	movs	r3, #1
 800739c:	e099      	b.n	80074d2 <tud_rhport_init+0x14e>
  }
  TU_ASSERT(rh_init);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <tud_rhport_init+0x36>
 80073a4:	4b4d      	ldr	r3, [pc, #308]	@ (80074dc <tud_rhport_init+0x158>)
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d000      	beq.n	80073b6 <tud_rhport_init+0x32>
 80073b4:	be00      	bkpt	0x0000
 80073b6:	2300      	movs	r3, #0
 80073b8:	e08b      	b.n	80074d2 <tud_rhport_init+0x14e>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80073ba:	2238      	movs	r2, #56	@ 0x38
 80073bc:	2100      	movs	r1, #0
 80073be:	4848      	ldr	r0, [pc, #288]	@ (80074e0 <tud_rhport_init+0x15c>)
 80073c0:	f003 fd81 	bl	800aec6 <memset>
  _usbd_queued_setup = 0;
 80073c4:	4b47      	ldr	r3, [pc, #284]	@ (80074e4 <tud_rhport_init+0x160>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	4b47      	ldr	r3, [pc, #284]	@ (80074e8 <tud_rhport_init+0x164>)
 80073cc:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff ff1a 	bl	800720c <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80073d8:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80073da:	4a44      	ldr	r2, [pc, #272]	@ (80074ec <tud_rhport_init+0x168>)
 80073dc:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <tud_rhport_init+0x168>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <tud_rhport_init+0x78>
 80073e6:	4b3d      	ldr	r3, [pc, #244]	@ (80074dc <tud_rhport_init+0x158>)
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d000      	beq.n	80073f8 <tud_rhport_init+0x74>
 80073f6:	be00      	bkpt	0x0000
 80073f8:	2300      	movs	r3, #0
 80073fa:	e06a      	b.n	80074d2 <tud_rhport_init+0x14e>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 80073fc:	4b3c      	ldr	r3, [pc, #240]	@ (80074f0 <tud_rhport_init+0x16c>)
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <tud_rhport_init+0x8a>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8007402:	483c      	ldr	r0, [pc, #240]	@ (80074f4 <tud_rhport_init+0x170>)
 8007404:	f3af 8000 	nop.w
 8007408:	4603      	mov	r3, r0
 800740a:	4a3b      	ldr	r2, [pc, #236]	@ (80074f8 <tud_rhport_init+0x174>)
 800740c:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800740e:	2300      	movs	r3, #0
 8007410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007414:	e039      	b.n	800748a <tud_rhport_init+0x106>
 8007416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800741a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8007420:	4b34      	ldr	r3, [pc, #208]	@ (80074f4 <tud_rhport_init+0x170>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	7cfa      	ldrb	r2, [r7, #19]
 8007426:	429a      	cmp	r2, r3
 8007428:	d206      	bcs.n	8007438 <tud_rhport_init+0xb4>
    driver = &_app_driver[drvid];
 800742a:	4b33      	ldr	r3, [pc, #204]	@ (80074f8 <tud_rhport_init+0x174>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	7cfb      	ldrb	r3, [r7, #19]
 8007430:	015b      	lsls	r3, r3, #5
 8007432:	4413      	add	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	e00c      	b.n	8007452 <tud_rhport_init+0xce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007438:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <tud_rhport_init+0x170>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	7cfa      	ldrb	r2, [r7, #19]
 800743e:	429a      	cmp	r2, r3
 8007440:	d807      	bhi.n	8007452 <tud_rhport_init+0xce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007442:	7cfb      	ldrb	r3, [r7, #19]
 8007444:	4a2b      	ldr	r2, [pc, #172]	@ (80074f4 <tud_rhport_init+0x170>)
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	015b      	lsls	r3, r3, #5
 800744c:	4a2b      	ldr	r2, [pc, #172]	@ (80074fc <tud_rhport_init+0x178>)
 800744e:	4413      	add	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  return driver;
 8007452:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <tud_rhport_init+0xe0>
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <tud_rhport_init+0xf6>
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <tud_rhport_init+0x158>)
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d000      	beq.n	8007476 <tud_rhport_init+0xf2>
 8007474:	be00      	bkpt	0x0000
 8007476:	2300      	movs	r3, #0
 8007478:	e02b      	b.n	80074d2 <tud_rhport_init+0x14e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007484:	3301      	adds	r3, #1
 8007486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800748a:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <tud_rhport_init+0x170>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007492:	429a      	cmp	r2, r3
 8007494:	d9bf      	bls.n	8007416 <tud_rhport_init+0x92>
  }

  _usbd_rhport = rhport;
 8007496:	4a1a      	ldr	r2, [pc, #104]	@ (8007500 <tud_rhport_init+0x17c>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f002 f959 	bl	8009758 <dcd_init>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f083 0301 	eor.w	r3, r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <tud_rhport_init+0x144>
 80074b2:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <tud_rhport_init+0x158>)
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d000      	beq.n	80074c4 <tud_rhport_init+0x140>
 80074c2:	be00      	bkpt	0x0000
 80074c4:	2300      	movs	r3, #0
 80074c6:	e004      	b.n	80074d2 <tud_rhport_init+0x14e>
  dcd_int_enable(rhport);
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f002 f9d8 	bl	8009880 <dcd_int_enable>

  return true;
 80074d0:	2301      	movs	r3, #1
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3730      	adds	r7, #48	@ 0x30
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	e000edf0 	.word	0xe000edf0
 80074e0:	24000864 	.word	0x24000864
 80074e4:	2400089c 	.word	0x2400089c
 80074e8:	24000024 	.word	0x24000024
 80074ec:	24000968 	.word	0x24000968
 80074f0:	00000000 	.word	0x00000000
 80074f4:	240008a4 	.word	0x240008a4
 80074f8:	240008a0 	.word	0x240008a0
 80074fc:	0800b068 	.word	0x0800b068
 8007500:	24000021 	.word	0x24000021

08007504 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800750e:	2300      	movs	r3, #0
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e033      	b.n	800757c <configuration_reset+0x78>
 8007514:	7ffb      	ldrb	r3, [r7, #31]
 8007516:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 800751c:	4b24      	ldr	r3, [pc, #144]	@ (80075b0 <configuration_reset+0xac>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	7cfa      	ldrb	r2, [r7, #19]
 8007522:	429a      	cmp	r2, r3
 8007524:	d206      	bcs.n	8007534 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8007526:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <configuration_reset+0xb0>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	7cfb      	ldrb	r3, [r7, #19]
 800752c:	015b      	lsls	r3, r3, #5
 800752e:	4413      	add	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	e00c      	b.n	800754e <configuration_reset+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007534:	4b1e      	ldr	r3, [pc, #120]	@ (80075b0 <configuration_reset+0xac>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	7cfa      	ldrb	r2, [r7, #19]
 800753a:	429a      	cmp	r2, r3
 800753c:	d807      	bhi.n	800754e <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800753e:	7cfb      	ldrb	r3, [r7, #19]
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <configuration_reset+0xac>)
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	015b      	lsls	r3, r3, #5
 8007548:	4a1b      	ldr	r2, [pc, #108]	@ (80075b8 <configuration_reset+0xb4>)
 800754a:	4413      	add	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  return driver;
 800754e:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8007550:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <configuration_reset+0x68>
 8007558:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <configuration_reset+0xb8>)
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <configuration_reset+0xa2>
 8007568:	be00      	bkpt	0x0000
 800756a:	e01c      	b.n	80075a6 <configuration_reset+0xa2>
    driver->reset(rhport);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	79fa      	ldrb	r2, [r7, #7]
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	3301      	adds	r3, #1
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <configuration_reset+0xac>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	7ffa      	ldrb	r2, [r7, #31]
 8007582:	429a      	cmp	r2, r3
 8007584:	d9c6      	bls.n	8007514 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8007586:	2238      	movs	r2, #56	@ 0x38
 8007588:	2100      	movs	r1, #0
 800758a:	480d      	ldr	r0, [pc, #52]	@ (80075c0 <configuration_reset+0xbc>)
 800758c:	f003 fc9b 	bl	800aec6 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8007590:	2210      	movs	r2, #16
 8007592:	21ff      	movs	r1, #255	@ 0xff
 8007594:	480b      	ldr	r0, [pc, #44]	@ (80075c4 <configuration_reset+0xc0>)
 8007596:	f003 fc96 	bl	800aec6 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 800759a:	2212      	movs	r2, #18
 800759c:	21ff      	movs	r1, #255	@ 0xff
 800759e:	480a      	ldr	r0, [pc, #40]	@ (80075c8 <configuration_reset+0xc4>)
 80075a0:	f003 fc91 	bl	800aec6 <memset>
 80075a4:	e000      	b.n	80075a8 <configuration_reset+0xa4>
    TU_ASSERT(driver,);
 80075a6:	bf00      	nop
}
 80075a8:	3720      	adds	r7, #32
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	240008a4 	.word	0x240008a4
 80075b4:	240008a0 	.word	0x240008a0
 80075b8:	0800b068 	.word	0x0800b068
 80075bc:	e000edf0 	.word	0xe000edf0
 80075c0:	24000864 	.word	0x24000864
 80075c4:	24000868 	.word	0x24000868
 80075c8:	24000878 	.word	0x24000878

080075cc <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ff93 	bl	8007504 <configuration_reset>
  usbd_control_reset();
 80075de:	f001 fbcf 	bl	8008d80 <usbd_control_reset>
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b093      	sub	sp, #76	@ 0x4c
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 80075f8:	f7ff feb4 	bl	8007364 <tud_inited>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f083 0301 	eor.w	r3, r3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 8189 	bne.w	800791c <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800760a:	4bb1      	ldr	r3, [pc, #708]	@ (80078d0 <tud_task_ext+0x2e4>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2000      	movs	r0, #0
 8007620:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	3304      	adds	r3, #4
 8007626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fd40 	bl	80070ae <tu_fifo_read>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2001      	movs	r0, #1
 800763a:	4798      	blx	r3

  return success;
 800763c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007640:	f083 0301 	eor.w	r3, r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 816a 	bne.w	8007920 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 800764c:	7b7b      	ldrb	r3, [r7, #13]
 800764e:	3b01      	subs	r3, #1
 8007650:	2b07      	cmp	r3, #7
 8007652:	f200 814b 	bhi.w	80078ec <tud_task_ext+0x300>
 8007656:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <tud_task_ext+0x70>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	0800767d 	.word	0x0800767d
 8007660:	0800768d 	.word	0x0800768d
 8007664:	0800789f 	.word	0x0800789f
 8007668:	08007851 	.word	0x08007851
 800766c:	0800787b 	.word	0x0800787b
 8007670:	0800769b 	.word	0x0800769b
 8007674:	0800774b 	.word	0x0800774b
 8007678:	0800788f 	.word	0x0800788f
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 800767c:	7b3b      	ldrb	r3, [r7, #12]
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff ffa4 	bl	80075cc <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8007684:	7c3a      	ldrb	r2, [r7, #16]
 8007686:	4b93      	ldr	r3, [pc, #588]	@ (80078d4 <tud_task_ext+0x2e8>)
 8007688:	709a      	strb	r2, [r3, #2]
        break;
 800768a:	e146      	b.n	800791a <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 800768c:	7b3b      	ldrb	r3, [r7, #12]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff ff9c 	bl	80075cc <usbd_reset>
        tud_umount_cb();
 8007694:	f7f9 f81f 	bl	80006d6 <tud_umount_cb>
        break;
 8007698:	e13f      	b.n	800791a <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 800769a:	4b8f      	ldr	r3, [pc, #572]	@ (80078d8 <tud_task_ext+0x2ec>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <tud_task_ext+0xce>
 80076a4:	4b8d      	ldr	r3, [pc, #564]	@ (80078dc <tud_task_ext+0x2f0>)
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8137 	beq.w	8007924 <tud_task_ext+0x338>
 80076b6:	be00      	bkpt	0x0000
 80076b8:	e134      	b.n	8007924 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 80076ba:	4b87      	ldr	r3, [pc, #540]	@ (80078d8 <tud_task_ext+0x2ec>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	4b84      	ldr	r3, [pc, #528]	@ (80078d8 <tud_task_ext+0x2ec>)
 80076c6:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 80076c8:	4b83      	ldr	r3, [pc, #524]	@ (80078d8 <tud_task_ext+0x2ec>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8116 	bne.w	8007900 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80076d4:	4a7f      	ldr	r2, [pc, #508]	@ (80078d4 <tud_task_ext+0x2e8>)
 80076d6:	7813      	ldrb	r3, [r2, #0]
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80076de:	4a7d      	ldr	r2, [pc, #500]	@ (80078d4 <tud_task_ext+0x2e8>)
 80076e0:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 80076e4:	f36f 0300 	bfc	r3, #0, #1
 80076e8:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80076ec:	4a79      	ldr	r2, [pc, #484]	@ (80078d4 <tud_task_ext+0x2e8>)
 80076ee:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 80076f2:	f36f 0382 	bfc	r3, #2, #1
 80076f6:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 80076fa:	4a76      	ldr	r2, [pc, #472]	@ (80078d4 <tud_task_ext+0x2e8>)
 80076fc:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 8007700:	f36f 0300 	bfc	r3, #0, #1
 8007704:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8007708:	4a72      	ldr	r2, [pc, #456]	@ (80078d4 <tud_task_ext+0x2e8>)
 800770a:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 800770e:	f36f 0382 	bfc	r3, #2, #1
 8007712:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8007716:	7b3a      	ldrb	r2, [r7, #12]
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f000 f91f 	bl	8007964 <process_control_request>
 8007726:	4603      	mov	r3, r0
 8007728:	f083 0301 	eor.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80e8 	beq.w	8007904 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007734:	7b3b      	ldrb	r3, [r7, #12]
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f002 faa5 	bl	8009c88 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800773e:	7b3b      	ldrb	r3, [r7, #12]
 8007740:	2180      	movs	r1, #128	@ 0x80
 8007742:	4618      	mov	r0, r3
 8007744:	f002 faa0 	bl	8009c88 <dcd_edpt_stall>
        }
        break;
 8007748:	e0dc      	b.n	8007904 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800774a:	7c3b      	ldrb	r3, [r7, #16]
 800774c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007750:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007754:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007758:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800775c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007760:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8007762:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8007766:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800776a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800776e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007772:	09db      	lsrs	r3, r3, #7
 8007774:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8007776:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800777a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800777e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007782:	4954      	ldr	r1, [pc, #336]	@ (80078d4 <tud_task_ext+0x2e8>)
 8007784:	0052      	lsls	r2, r2, #1
 8007786:	440a      	add	r2, r1
 8007788:	4413      	add	r3, r2
 800778a:	f103 0220 	add.w	r2, r3, #32
 800778e:	7993      	ldrb	r3, [r2, #6]
 8007790:	f36f 0300 	bfc	r3, #0, #1
 8007794:	7193      	strb	r3, [r2, #6]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8007796:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800779a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800779e:	494d      	ldr	r1, [pc, #308]	@ (80078d4 <tud_task_ext+0x2e8>)
 80077a0:	0052      	lsls	r2, r2, #1
 80077a2:	440a      	add	r2, r1
 80077a4:	4413      	add	r3, r2
 80077a6:	f103 0220 	add.w	r2, r3, #32
 80077aa:	7993      	ldrb	r3, [r2, #6]
 80077ac:	f36f 0382 	bfc	r3, #2, #1
 80077b0:	7193      	strb	r3, [r2, #6]

        if (0 == epnum) {
 80077b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80077ba:	7b38      	ldrb	r0, [r7, #12]
 80077bc:	7c7a      	ldrb	r2, [r7, #17]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80077c4:	f001 fb12 	bl	8008dec <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 80077c8:	e0a7      	b.n	800791a <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80077ca:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80077ce:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80077d2:	4940      	ldr	r1, [pc, #256]	@ (80078d4 <tud_task_ext+0x2e8>)
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	440a      	add	r2, r1
 80077d8:	4413      	add	r3, r2
 80077da:	3314      	adds	r3, #20
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80077e6:	4b3e      	ldr	r3, [pc, #248]	@ (80078e0 <tud_task_ext+0x2f4>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d207      	bcs.n	8007802 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 80077f2:	4b3c      	ldr	r3, [pc, #240]	@ (80078e4 <tud_task_ext+0x2f8>)
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077fa:	015b      	lsls	r3, r3, #5
 80077fc:	4413      	add	r3, r2
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	e00e      	b.n	8007820 <tud_task_ext+0x234>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007802:	4b37      	ldr	r3, [pc, #220]	@ (80078e0 <tud_task_ext+0x2f4>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800780a:	429a      	cmp	r2, r3
 800780c:	d808      	bhi.n	8007820 <tud_task_ext+0x234>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800780e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007812:	4a33      	ldr	r2, [pc, #204]	@ (80078e0 <tud_task_ext+0x2f4>)
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	015b      	lsls	r3, r3, #5
 800781a:	4a33      	ldr	r2, [pc, #204]	@ (80078e8 <tud_task_ext+0x2fc>)
 800781c:	4413      	add	r3, r2
 800781e:	623b      	str	r3, [r7, #32]
  return driver;
 8007820:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007822:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8007824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <tud_task_ext+0x252>
 800782a:	4b2c      	ldr	r3, [pc, #176]	@ (80078dc <tud_task_ext+0x2f0>)
 800782c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800782e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d076      	beq.n	8007928 <tud_task_ext+0x33c>
 800783a:	be00      	bkpt	0x0000
 800783c:	e074      	b.n	8007928 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800783e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007840:	699c      	ldr	r4, [r3, #24]
 8007842:	7b38      	ldrb	r0, [r7, #12]
 8007844:	7c7a      	ldrb	r2, [r7, #17]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800784c:	47a0      	blx	r4
        break;
 800784e:	e064      	b.n	800791a <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8007850:	4b20      	ldr	r3, [pc, #128]	@ (80078d4 <tud_task_ext+0x2e8>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d054      	beq.n	8007908 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800785e:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <tud_task_ext+0x2e8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fd22 	bl	80072bc <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8007878:	e046      	b.n	8007908 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <tud_task_ext+0x2e8>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d041      	beq.n	800790c <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8007888:	f7ff fd23 	bl	80072d2 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800788c:	e03e      	b.n	800790c <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d03d      	beq.n	8007910 <tud_task_ext+0x324>
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
        break;
 800789c:	e038      	b.n	8007910 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <tud_task_ext+0x2e8>)
 80078a0:	78db      	ldrb	r3, [r3, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	2300      	movs	r3, #0
 80078a8:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80078aa:	7efb      	ldrb	r3, [r7, #27]
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	fa22 f303 	lsr.w	r3, r2, r3
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d027      	beq.n	8007914 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fcd2 	bl	8007270 <tud_sof_cb>
        }
      break;
 80078cc:	e022      	b.n	8007914 <tud_task_ext+0x328>
 80078ce:	bf00      	nop
 80078d0:	24000968 	.word	0x24000968
 80078d4:	24000864 	.word	0x24000864
 80078d8:	2400089c 	.word	0x2400089c
 80078dc:	e000edf0 	.word	0xe000edf0
 80078e0:	240008a4 	.word	0x240008a4
 80078e4:	240008a0 	.word	0x240008a0
 80078e8:	0800b068 	.word	0x0800b068

      default:
        TU_BREAKPOINT();
 80078ec:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <tud_task_ext+0x344>)
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00d      	beq.n	8007918 <tud_task_ext+0x32c>
 80078fc:	be00      	bkpt	0x0000
        break;
 80078fe:	e00b      	b.n	8007918 <tud_task_ext+0x32c>
          break;
 8007900:	bf00      	nop
 8007902:	e682      	b.n	800760a <tud_task_ext+0x1e>
        break;
 8007904:	bf00      	nop
 8007906:	e680      	b.n	800760a <tud_task_ext+0x1e>
        break;
 8007908:	bf00      	nop
 800790a:	e67e      	b.n	800760a <tud_task_ext+0x1e>
        break;
 800790c:	bf00      	nop
 800790e:	e67c      	b.n	800760a <tud_task_ext+0x1e>
        break;
 8007910:	bf00      	nop
 8007912:	e67a      	b.n	800760a <tud_task_ext+0x1e>
      break;
 8007914:	bf00      	nop
 8007916:	e678      	b.n	800760a <tud_task_ext+0x1e>
        break;
 8007918:	bf00      	nop
  while (1) {
 800791a:	e676      	b.n	800760a <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800791c:	bf00      	nop
 800791e:	e004      	b.n	800792a <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007920:	bf00      	nop
 8007922:	e002      	b.n	800792a <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8007928:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 800792a:	374c      	adds	r7, #76	@ 0x4c
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	e000edf0 	.word	0xe000edf0

08007934 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fa26 	bl	8008d98 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	7bf8      	ldrb	r0, [r7, #15]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	2101      	movs	r1, #1
 8007956:	4798      	blx	r3
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b09a      	sub	sp, #104	@ 0x68
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007970:	2000      	movs	r0, #0
 8007972:	f001 fa11 	bl	8008d98 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b60      	cmp	r3, #96	@ 0x60
 8007982:	d10a      	bne.n	800799a <process_control_request+0x36>
 8007984:	4ba4      	ldr	r3, [pc, #656]	@ (8007c18 <process_control_request+0x2b4>)
 8007986:	633b      	str	r3, [r7, #48]	@ 0x30
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d000      	beq.n	8007996 <process_control_request+0x32>
 8007994:	be00      	bkpt	0x0000
 8007996:	2300      	movs	r3, #0
 8007998:	e2b7      	b.n	8007f0a <process_control_request+0x5a6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d10a      	bne.n	80079be <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80079a8:	489c      	ldr	r0, [pc, #624]	@ (8007c1c <process_control_request+0x2b8>)
 80079aa:	f001 f9f5 	bl	8008d98 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	2101      	movs	r1, #1
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fc93 	bl	80072e0 <tud_vendor_control_xfer_cb>
 80079ba:	4603      	mov	r3, r0
 80079bc:	e2a5      	b.n	8007f0a <process_control_request+0x5a6>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	f000 81c7 	beq.w	8007d5c <process_control_request+0x3f8>
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	f300 828e 	bgt.w	8007ef0 <process_control_request+0x58c>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <process_control_request+0x7c>
 80079d8:	2b01      	cmp	r3, #1
 80079da:	f000 814f 	beq.w	8007c7c <process_control_request+0x318>
 80079de:	e287      	b.n	8007ef0 <process_control_request+0x58c>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d142      	bne.n	8007a74 <process_control_request+0x110>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	889b      	ldrh	r3, [r3, #4]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80079f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80079fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d901      	bls.n	8007a0a <process_control_request+0xa6>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e27f      	b.n	8007f0a <process_control_request+0x5a6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a0e:	4a84      	ldr	r2, [pc, #528]	@ (8007c20 <process_control_request+0x2bc>)
 8007a10:	4413      	add	r3, r2
 8007a12:	791b      	ldrb	r3, [r3, #4]
 8007a14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007a1c:	4b81      	ldr	r3, [pc, #516]	@ (8007c24 <process_control_request+0x2c0>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d207      	bcs.n	8007a38 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8007a28:	4b7f      	ldr	r3, [pc, #508]	@ (8007c28 <process_control_request+0x2c4>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007a30:	015b      	lsls	r3, r3, #5
 8007a32:	4413      	add	r3, r2
 8007a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a36:	e00e      	b.n	8007a56 <process_control_request+0xf2>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007a38:	4b7a      	ldr	r3, [pc, #488]	@ (8007c24 <process_control_request+0x2c0>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d808      	bhi.n	8007a56 <process_control_request+0xf2>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007a44:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007a48:	4a76      	ldr	r2, [pc, #472]	@ (8007c24 <process_control_request+0x2c0>)
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	015b      	lsls	r3, r3, #5
 8007a50:	4a76      	ldr	r2, [pc, #472]	@ (8007c2c <process_control_request+0x2c8>)
 8007a52:	4413      	add	r3, r2
 8007a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8007a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <process_control_request+0x100>
 8007a60:	2300      	movs	r3, #0
 8007a62:	e252      	b.n	8007f0a <process_control_request+0x5a6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ff62 	bl	8007934 <invoke_class_control>
 8007a70:	4603      	mov	r3, r0
 8007a72:	e24a      	b.n	8007f0a <process_control_request+0x5a6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <process_control_request+0x134>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8007a82:	4b65      	ldr	r3, [pc, #404]	@ (8007c18 <process_control_request+0x2b4>)
 8007a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d000      	beq.n	8007a94 <process_control_request+0x130>
 8007a92:	be00      	bkpt	0x0000
        return false;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e238      	b.n	8007f0a <process_control_request+0x5a6>
      }

      switch ( p_request->bRequest ) {
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	f200 80e0 	bhi.w	8007c62 <process_control_request+0x2fe>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <process_control_request+0x144>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007c31 	.word	0x08007c31
 8007aac:	08007bf5 	.word	0x08007bf5
 8007ab0:	08007c63 	.word	0x08007c63
 8007ab4:	08007bcf 	.word	0x08007bcf
 8007ab8:	08007c63 	.word	0x08007c63
 8007abc:	08007ad1 	.word	0x08007ad1
 8007ac0:	08007bb5 	.word	0x08007bb5
 8007ac4:	08007c63 	.word	0x08007c63
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	08007b0d 	.word	0x08007b0d
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007ad0:	6838      	ldr	r0, [r7, #0]
 8007ad2:	f001 f971 	bl	8008db8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	885b      	ldrh	r3, [r3, #2]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 ff1c 	bl	8009920 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8007c20 <process_control_request+0x2bc>)
 8007aea:	7813      	ldrb	r3, [r2, #0]
 8007aec:	f043 0302 	orr.w	r3, r3, #2
 8007af0:	7013      	strb	r3, [r2, #0]
        break;
 8007af2:	e0c2      	b.n	8007c7a <process_control_request+0x316>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007af4:	4b4a      	ldr	r3, [pc, #296]	@ (8007c20 <process_control_request+0x2bc>)
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007afc:	f107 0213 	add.w	r2, r7, #19
 8007b00:	79f8      	ldrb	r0, [r7, #7]
 8007b02:	2301      	movs	r3, #1
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	f001 f8cb 	bl	8008ca0 <tud_control_xfer>
        }
        break;
 8007b0a:	e0b6      	b.n	8007c7a <process_control_request+0x316>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8007b16:	4b42      	ldr	r3, [pc, #264]	@ (8007c20 <process_control_request+0x2bc>)
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d041      	beq.n	8007ba8 <process_control_request+0x244>
            if ( _usbd_dev.cfg_num ) {
 8007b24:	4b3e      	ldr	r3, [pc, #248]	@ (8007c20 <process_control_request+0x2bc>)
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d014      	beq.n	8007b58 <process_control_request+0x1f4>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 ff74 	bl	8009a20 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 ffd8 	bl	8009af0 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007b40:	4b37      	ldr	r3, [pc, #220]	@ (8007c20 <process_control_request+0x2bc>)
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fcda 	bl	8007504 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007b50:	4a33      	ldr	r2, [pc, #204]	@ (8007c20 <process_control_request+0x2bc>)
 8007b52:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007b56:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8007b58:	4a31      	ldr	r2, [pc, #196]	@ (8007c20 <process_control_request+0x2bc>)
 8007b5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b5e:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8007b60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01d      	beq.n	8007ba4 <process_control_request+0x240>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8007b68:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f9d3 	bl	8007f1c <process_set_config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f083 0301 	eor.w	r3, r3, #1
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <process_control_request+0x23a>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 8007b82:	4b25      	ldr	r3, [pc, #148]	@ (8007c18 <process_control_request+0x2b4>)
 8007b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d000      	beq.n	8007b94 <process_control_request+0x230>
 8007b92:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <process_control_request+0x2bc>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	705a      	strb	r2, [r3, #1]
                return false;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e1b5      	b.n	8007f0a <process_control_request+0x5a6>
              }
              tud_mount_cb();
 8007b9e:	f7f8 fd93 	bl	80006c8 <tud_mount_cb>
 8007ba2:	e001      	b.n	8007ba8 <process_control_request+0x244>
            } else {
              tud_umount_cb();
 8007ba4:	f7f8 fd97 	bl	80006d6 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 f805 	bl	8008bbc <tud_control_status>
        }
        break;
 8007bb2:	e062      	b.n	8007c7a <process_control_request+0x316>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fae1 	bl	8008180 <process_get_descriptor>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f083 0301 	eor.w	r3, r3, #1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d056      	beq.n	8007c78 <process_control_request+0x314>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e19d      	b.n	8007f0a <process_control_request+0x5a6>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10b      	bne.n	8007bf0 <process_control_request+0x28c>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8007bd8:	4a11      	ldr	r2, [pc, #68]	@ (8007c20 <process_control_request+0x2bc>)
 8007bda:	7813      	ldrb	r3, [r2, #0]
 8007bdc:	f043 0308 	orr.w	r3, r3, #8
 8007be0:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 ffe8 	bl	8008bbc <tud_control_status>
            break;
 8007bec:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8007bee:	e044      	b.n	8007c7a <process_control_request+0x316>
            default: return false;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e18a      	b.n	8007f0a <process_control_request+0x5a6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	885b      	ldrh	r3, [r3, #2]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d001      	beq.n	8007c02 <process_control_request+0x29e>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e183      	b.n	8007f0a <process_control_request+0x5a6>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007c02:	4a07      	ldr	r2, [pc, #28]	@ (8007c20 <process_control_request+0x2bc>)
 8007c04:	7813      	ldrb	r3, [r2, #0]
 8007c06:	f36f 03c3 	bfc	r3, #3, #1
 8007c0a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 ffd3 	bl	8008bbc <tud_control_status>
        break;
 8007c16:	e030      	b.n	8007c7a <process_control_request+0x316>
 8007c18:	e000edf0 	.word	0xe000edf0
 8007c1c:	080072e1 	.word	0x080072e1
 8007c20:	24000864 	.word	0x24000864
 8007c24:	240008a4 	.word	0x240008a4
 8007c28:	240008a0 	.word	0x240008a0
 8007c2c:	0800b068 	.word	0x0800b068

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007c30:	4b93      	ldr	r3, [pc, #588]	@ (8007e80 <process_control_request+0x51c>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	4b90      	ldr	r3, [pc, #576]	@ (8007e80 <process_control_request+0x51c>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	089b      	lsrs	r3, r3, #2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007c52:	f107 0210 	add.w	r2, r7, #16
 8007c56:	79f8      	ldrb	r0, [r7, #7]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	f001 f820 	bl	8008ca0 <tud_control_xfer>
          break;
 8007c60:	e00b      	b.n	8007c7a <process_control_request+0x316>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007c62:	4b88      	ldr	r3, [pc, #544]	@ (8007e84 <process_control_request+0x520>)
 8007c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d000      	beq.n	8007c74 <process_control_request+0x310>
 8007c72:	be00      	bkpt	0x0000
 8007c74:	2300      	movs	r3, #0
 8007c76:	e148      	b.n	8007f0a <process_control_request+0x5a6>
        break;
 8007c78:	bf00      	nop
      }
    break;
 8007c7a:	e145      	b.n	8007f08 <process_control_request+0x5a4>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	889b      	ldrh	r3, [r3, #4]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007c84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	d901      	bls.n	8007c98 <process_control_request+0x334>
 8007c94:	2300      	movs	r3, #0
 8007c96:	e138      	b.n	8007f0a <process_control_request+0x5a6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c9c:	4a78      	ldr	r2, [pc, #480]	@ (8007e80 <process_control_request+0x51c>)
 8007c9e:	4413      	add	r3, r2
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007caa:	4b77      	ldr	r3, [pc, #476]	@ (8007e88 <process_control_request+0x524>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d207      	bcs.n	8007cc6 <process_control_request+0x362>
    driver = &_app_driver[drvid];
 8007cb6:	4b75      	ldr	r3, [pc, #468]	@ (8007e8c <process_control_request+0x528>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cbe:	015b      	lsls	r3, r3, #5
 8007cc0:	4413      	add	r3, r2
 8007cc2:	623b      	str	r3, [r7, #32]
 8007cc4:	e00e      	b.n	8007ce4 <process_control_request+0x380>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007cc6:	4b70      	ldr	r3, [pc, #448]	@ (8007e88 <process_control_request+0x524>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d808      	bhi.n	8007ce4 <process_control_request+0x380>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007cd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8007e88 <process_control_request+0x524>)
 8007cd8:	7812      	ldrb	r2, [r2, #0]
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	015b      	lsls	r3, r3, #5
 8007cde:	4a6c      	ldr	r2, [pc, #432]	@ (8007e90 <process_control_request+0x52c>)
 8007ce0:	4413      	add	r3, r2
 8007ce2:	623b      	str	r3, [r7, #32]
  return driver;
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007ce6:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8007ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <process_control_request+0x38e>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e10b      	b.n	8007f0a <process_control_request+0x5a6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fe1b 	bl	8007934 <invoke_class_control>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f083 0301 	eor.w	r3, r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80fd 	beq.w	8007f06 <process_control_request+0x5a2>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <process_control_request+0x3ba>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e0f5      	b.n	8007f0a <process_control_request+0x5a6>

        switch(p_request->bRequest) {
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	3b0a      	subs	r3, #10
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d816      	bhi.n	8007d56 <process_control_request+0x3f2>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f001 f835 	bl	8008d98 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b0a      	cmp	r3, #10
 8007d34:	d109      	bne.n	8007d4a <process_control_request+0x3e6>
              uint8_t alternate = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007d3a:	f107 020f 	add.w	r2, r7, #15
 8007d3e:	79f8      	ldrb	r0, [r7, #7]
 8007d40:	2301      	movs	r3, #1
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	f000 ffac 	bl	8008ca0 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8007d48:	e007      	b.n	8007d5a <process_control_request+0x3f6>
              tud_control_status(rhport, p_request);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 ff34 	bl	8008bbc <tud_control_status>
          break;
 8007d54:	e001      	b.n	8007d5a <process_control_request+0x3f6>

          default: return false;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e0d7      	b.n	8007f0a <process_control_request+0x5a6>
        }
      }
      break;
 8007d5a:	e0d4      	b.n	8007f06 <process_control_request+0x5a2>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	889b      	ldrh	r3, [r3, #4]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	83bb      	strh	r3, [r7, #28]
 8007d64:	8bbb      	ldrh	r3, [r7, #28]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d70:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007d72:	7fbb      	ldrb	r3, [r7, #30]
 8007d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d78:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007d7a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8007d7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d82:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007d84:	7ffb      	ldrb	r3, [r7, #31]
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007d8a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007d8e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d90a      	bls.n	8007dac <process_control_request+0x448>
 8007d96:	4b3b      	ldr	r3, [pc, #236]	@ (8007e84 <process_control_request+0x520>)
 8007d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d000      	beq.n	8007da8 <process_control_request+0x444>
 8007da6:	be00      	bkpt	0x0000
 8007da8:	2300      	movs	r3, #0
 8007daa:	e0ae      	b.n	8007f0a <process_control_request+0x5a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007dac:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8007db0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007db4:	4932      	ldr	r1, [pc, #200]	@ (8007e80 <process_control_request+0x51c>)
 8007db6:	0052      	lsls	r2, r2, #1
 8007db8:	440a      	add	r2, r1
 8007dba:	4413      	add	r3, r2
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8007dc6:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <process_control_request+0x524>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	7efa      	ldrb	r2, [r7, #27]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d206      	bcs.n	8007dde <process_control_request+0x47a>
    driver = &_app_driver[drvid];
 8007dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8007e8c <process_control_request+0x528>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	7efb      	ldrb	r3, [r7, #27]
 8007dd6:	015b      	lsls	r3, r3, #5
 8007dd8:	4413      	add	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	e00c      	b.n	8007df8 <process_control_request+0x494>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007dde:	4b2a      	ldr	r3, [pc, #168]	@ (8007e88 <process_control_request+0x524>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	7efa      	ldrb	r2, [r7, #27]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d807      	bhi.n	8007df8 <process_control_request+0x494>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007de8:	7efb      	ldrb	r3, [r7, #27]
 8007dea:	4a27      	ldr	r2, [pc, #156]	@ (8007e88 <process_control_request+0x524>)
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	015b      	lsls	r3, r3, #5
 8007df2:	4a27      	ldr	r2, [pc, #156]	@ (8007e90 <process_control_request+0x52c>)
 8007df4:	4413      	add	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
  return driver;
 8007df8:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007dfa:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <process_control_request+0x4c0>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <process_control_request+0x4b0>
 8007e10:	2300      	movs	r3, #0
 8007e12:	e07a      	b.n	8007f0a <process_control_request+0x5a6>
        return invoke_class_control(rhport, driver, p_request);
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fd8a 	bl	8007934 <invoke_class_control>
 8007e20:	4603      	mov	r3, r0
 8007e22:	e072      	b.n	8007f0a <process_control_request+0x5a6>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d017      	beq.n	8007e5c <process_control_request+0x4f8>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	dc52      	bgt.n	8007ed6 <process_control_request+0x572>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <process_control_request+0x4d6>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d011      	beq.n	8007e5c <process_control_request+0x4f8>
 8007e38:	e04d      	b.n	8007ed6 <process_control_request+0x572>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007e3a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fe64 	bl	8008b10 <usbd_edpt_stalled>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007e4c:	f107 020c 	add.w	r2, r7, #12
 8007e50:	79f8      	ldrb	r0, [r7, #7]
 8007e52:	2302      	movs	r3, #2
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	f000 ff23 	bl	8008ca0 <tud_control_xfer>
          }
          break;
 8007e5a:	e048      	b.n	8007eee <process_control_request+0x58a>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	885b      	ldrh	r3, [r3, #2]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d11d      	bne.n	8007ea2 <process_control_request+0x53e>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d112      	bne.n	8007e94 <process_control_request+0x530>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8007e6e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fe0c 	bl	8008a94 <usbd_edpt_clear_stall>
 8007e7c:	e011      	b.n	8007ea2 <process_control_request+0x53e>
 8007e7e:	bf00      	nop
 8007e80:	24000864 	.word	0x24000864
 8007e84:	e000edf0 	.word	0xe000edf0
 8007e88:	240008a4 	.word	0x240008a4
 8007e8c:	240008a0 	.word	0x240008a0
 8007e90:	0800b068 	.word	0x0800b068
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8007e94:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fdbb 	bl	8008a18 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8007ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d021      	beq.n	8007eec <process_control_request+0x588>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fd40 	bl	8007934 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f000 ff6f 	bl	8008d98 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007eba:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <process_control_request+0x5b0>)
 8007ebc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007ec0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d110      	bne.n	8007eec <process_control_request+0x588>
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fe74 	bl	8008bbc <tud_control_status>
            }
          }
          break;
 8007ed4:	e00a      	b.n	8007eec <process_control_request+0x588>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8007ed6:	4b10      	ldr	r3, [pc, #64]	@ (8007f18 <process_control_request+0x5b4>)
 8007ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d000      	beq.n	8007ee8 <process_control_request+0x584>
 8007ee6:	be00      	bkpt	0x0000
            return false;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e00e      	b.n	8007f0a <process_control_request+0x5a6>
          break;
 8007eec:	bf00      	nop
        }
      }
    }
    break;
 8007eee:	e00b      	b.n	8007f08 <process_control_request+0x5a4>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8007ef0:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <process_control_request+0x5b4>)
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d000      	beq.n	8007f02 <process_control_request+0x59e>
 8007f00:	be00      	bkpt	0x0000
      return false;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e001      	b.n	8007f0a <process_control_request+0x5a6>
      break;
 8007f06:	bf00      	nop
  }

  return true;
 8007f08:	2301      	movs	r3, #1
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3768      	adds	r7, #104	@ 0x68
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	24000864 	.word	0x24000864
 8007f18:	e000edf0 	.word	0xe000edf0

08007f1c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b096      	sub	sp, #88	@ 0x58
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	460a      	mov	r2, r1
 8007f26:	71fb      	strb	r3, [r7, #7]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007f2c:	79bb      	ldrb	r3, [r7, #6]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f8 febc 	bl	8000cb0 <tud_descriptor_configuration_cb>
 8007f38:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <process_set_config+0x2c>
 8007f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d00a      	beq.n	8007f5e <process_set_config+0x42>
 8007f48:	4b86      	ldr	r3, [pc, #536]	@ (8008164 <process_set_config+0x248>)
 8007f4a:	623b      	str	r3, [r7, #32]
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d000      	beq.n	8007f5a <process_set_config+0x3e>
 8007f58:	be00      	bkpt	0x0000
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e0fd      	b.n	800815a <process_set_config+0x23e>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f60:	79db      	ldrb	r3, [r3, #7]
 8007f62:	115b      	asrs	r3, r3, #5
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	b2d9      	uxtb	r1, r3
 8007f6a:	4a7f      	ldr	r2, [pc, #508]	@ (8008168 <process_set_config+0x24c>)
 8007f6c:	7813      	ldrb	r3, [r2, #0]
 8007f6e:	f361 1304 	bfi	r3, r1, #4, #1
 8007f72:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f76:	79db      	ldrb	r3, [r3, #7]
 8007f78:	119b      	asrs	r3, r3, #6
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2d9      	uxtb	r1, r3
 8007f80:	4a79      	ldr	r2, [pc, #484]	@ (8008168 <process_set_config+0x24c>)
 8007f82:	7813      	ldrb	r3, [r2, #0]
 8007f84:	f361 1345 	bfi	r3, r1, #5, #1
 8007f88:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8c:	3309      	adds	r3, #9
 8007f8e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f92:	885b      	ldrh	r3, [r3, #2]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f9a:	4413      	add	r3, r2
 8007f9c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8007f9e:	e0d6      	b.n	800814e <process_set_config+0x232>
  {
    uint8_t assoc_itf_count = 1;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa8:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007fb0:	2b0b      	cmp	r3, #11
 8007fb2:	d10f      	bne.n	8007fd4 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb6:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fba:	78db      	ldrb	r3, [r3, #3]
 8007fbc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd6:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00a      	beq.n	8007ff8 <process_set_config+0xdc>
 8007fe2:	4b60      	ldr	r3, [pc, #384]	@ (8008164 <process_set_config+0x248>)
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d000      	beq.n	8007ff4 <process_set_config+0xd8>
 8007ff2:	be00      	bkpt	0x0000
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e0b0      	b.n	800815a <process_set_config+0x23e>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ffa:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008004:	2300      	movs	r3, #0
 8008006:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800800a:	e088      	b.n	800811e <process_set_config+0x202>
 800800c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008010:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008016:	4b55      	ldr	r3, [pc, #340]	@ (800816c <process_set_config+0x250>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	429a      	cmp	r2, r3
 800801e:	d206      	bcs.n	800802e <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8008020:	4b53      	ldr	r3, [pc, #332]	@ (8008170 <process_set_config+0x254>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	015b      	lsls	r3, r3, #5
 8008028:	4413      	add	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	e00c      	b.n	8008048 <process_set_config+0x12c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800802e:	4b4f      	ldr	r3, [pc, #316]	@ (800816c <process_set_config+0x250>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	7bfa      	ldrb	r2, [r7, #15]
 8008034:	429a      	cmp	r2, r3
 8008036:	d807      	bhi.n	8008048 <process_set_config+0x12c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4a4c      	ldr	r2, [pc, #304]	@ (800816c <process_set_config+0x250>)
 800803c:	7812      	ldrb	r2, [r2, #0]
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	015b      	lsls	r3, r3, #5
 8008042:	4a4c      	ldr	r2, [pc, #304]	@ (8008174 <process_set_config+0x258>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
  return driver;
 8008048:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <process_set_config+0x14c>
 8008052:	4b44      	ldr	r3, [pc, #272]	@ (8008164 <process_set_config+0x248>)
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d000      	beq.n	8008064 <process_set_config+0x148>
 8008062:	be00      	bkpt	0x0000
 8008064:	2300      	movs	r3, #0
 8008066:	e078      	b.n	800815a <process_set_config+0x23e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800806e:	79f8      	ldrb	r0, [r7, #7]
 8008070:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8008078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800807a:	2b08      	cmp	r3, #8
 800807c:	d94a      	bls.n	8008114 <process_set_config+0x1f8>
 800807e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008080:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008082:	429a      	cmp	r2, r3
 8008084:	d846      	bhi.n	8008114 <process_set_config+0x1f8>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8008086:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800808a:	2b01      	cmp	r3, #1
 800808c:	d107      	bne.n	800809e <process_set_config+0x182>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	4a39      	ldr	r2, [pc, #228]	@ (8008178 <process_set_config+0x25c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d102      	bne.n	800809e <process_set_config+0x182>
 8008098:	2302      	movs	r3, #2
 800809a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800809e:	2300      	movs	r3, #0
 80080a0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80080a4:	e024      	b.n	80080f0 <process_set_config+0x1d4>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80080a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a8:	789a      	ldrb	r2, [r3, #2]
 80080aa:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80080ae:	4413      	add	r3, r2
 80080b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80080b4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80080b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008168 <process_set_config+0x24c>)
 80080ba:	4413      	add	r3, r2
 80080bc:	791b      	ldrb	r3, [r3, #4]
 80080be:	2bff      	cmp	r3, #255	@ 0xff
 80080c0:	d00a      	beq.n	80080d8 <process_set_config+0x1bc>
 80080c2:	4b28      	ldr	r3, [pc, #160]	@ (8008164 <process_set_config+0x248>)
 80080c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d000      	beq.n	80080d4 <process_set_config+0x1b8>
 80080d2:	be00      	bkpt	0x0000
 80080d4:	2300      	movs	r3, #0
 80080d6:	e040      	b.n	800815a <process_set_config+0x23e>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80080d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80080dc:	4a22      	ldr	r2, [pc, #136]	@ (8008168 <process_set_config+0x24c>)
 80080de:	4413      	add	r3, r2
 80080e0:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80080e4:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80080e6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80080ea:	3301      	adds	r3, #1
 80080ec:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80080f0:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80080f4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d3d4      	bcc.n	80080a6 <process_set_config+0x18a>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80080fc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008100:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008104:	481d      	ldr	r0, [pc, #116]	@ (800817c <process_set_config+0x260>)
 8008106:	f002 fe99 	bl	800ae3c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800810a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800810c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800810e:	4413      	add	r3, r2
 8008110:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8008112:	e00b      	b.n	800812c <process_set_config+0x210>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008114:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008118:	3301      	adds	r3, #1
 800811a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <process_set_config+0x250>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8008126:	429a      	cmp	r2, r3
 8008128:	f67f af70 	bls.w	800800c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800812c:	4b0f      	ldr	r3, [pc, #60]	@ (800816c <process_set_config+0x250>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8008134:	429a      	cmp	r2, r3
 8008136:	d90a      	bls.n	800814e <process_set_config+0x232>
 8008138:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <process_set_config+0x248>)
 800813a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d000      	beq.n	800814a <process_set_config+0x22e>
 8008148:	be00      	bkpt	0x0000
 800814a:	2300      	movs	r3, #0
 800814c:	e005      	b.n	800815a <process_set_config+0x23e>
  while( p_desc < desc_end )
 800814e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008152:	429a      	cmp	r2, r3
 8008154:	f4ff af24 	bcc.w	8007fa0 <process_set_config+0x84>
  }

  return true;
 8008158:	2301      	movs	r3, #1
}
 800815a:	4618      	mov	r0, r3
 800815c:	3758      	adds	r7, #88	@ 0x58
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	e000edf0 	.word	0xe000edf0
 8008168:	24000864 	.word	0x24000864
 800816c:	240008a4 	.word	0x240008a4
 8008170:	240008a0 	.word	0x240008a0
 8008174:	0800b068 	.word	0x0800b068
 8008178:	080060c5 	.word	0x080060c5
 800817c:	24000878 	.word	0x24000878

08008180 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b094      	sub	sp, #80	@ 0x50
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	b29b      	uxth	r3, r3
 8008192:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	b29b      	uxth	r3, r3
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80081a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 80081b0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80081b4:	3b01      	subs	r3, #1
 80081b6:	2b0e      	cmp	r3, #14
 80081b8:	f200 80b4 	bhi.w	8008324 <process_get_descriptor+0x1a4>
 80081bc:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <process_get_descriptor+0x44>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	08008201 	.word	0x08008201
 80081c8:	08008265 	.word	0x08008265
 80081cc:	080082cb 	.word	0x080082cb
 80081d0:	08008325 	.word	0x08008325
 80081d4:	08008325 	.word	0x08008325
 80081d8:	080082ff 	.word	0x080082ff
 80081dc:	08008265 	.word	0x08008265
 80081e0:	08008325 	.word	0x08008325
 80081e4:	08008325 	.word	0x08008325
 80081e8:	08008325 	.word	0x08008325
 80081ec:	08008325 	.word	0x08008325
 80081f0:	08008325 	.word	0x08008325
 80081f4:	08008325 	.word	0x08008325
 80081f8:	08008325 	.word	0x08008325
 80081fc:	08008233 	.word	0x08008233
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8008200:	f7f8 fd4c 	bl	8000c9c <tud_descriptor_device_cb>
 8008204:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <process_get_descriptor+0xa2>
 800820c:	4b48      	ldr	r3, [pc, #288]	@ (8008330 <process_get_descriptor+0x1b0>)
 800820e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d000      	beq.n	800821e <process_get_descriptor+0x9e>
 800821c:	be00      	bkpt	0x0000
 800821e:	2300      	movs	r3, #0
 8008220:	e081      	b.n	8008326 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8008222:	79f8      	ldrb	r0, [r7, #7]
 8008224:	2312      	movs	r3, #18
 8008226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	f000 fd39 	bl	8008ca0 <tud_control_xfer>
 800822e:	4603      	mov	r3, r0
 8008230:	e079      	b.n	8008326 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8008232:	f7ff f827 	bl	8007284 <tud_descriptor_bos_cb>
 8008236:	4603      	mov	r3, r0
 8008238:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 800823a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <process_get_descriptor+0xc4>
 8008240:	2300      	movs	r3, #0
 8008242:	e070      	b.n	8008326 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8008244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008246:	3302      	adds	r3, #2
 8008248:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8008252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008258:	79f8      	ldrb	r0, [r7, #7]
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	f000 fd20 	bl	8008ca0 <tud_control_xfer>
 8008260:	4603      	mov	r3, r0
 8008262:	e060      	b.n	8008326 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8008264:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008268:	2b02      	cmp	r3, #2
 800826a:	d114      	bne.n	8008296 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 800826c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008270:	4618      	mov	r0, r3
 8008272:	f7f8 fd1d 	bl	8000cb0 <tud_descriptor_configuration_cb>
 8008276:	4603      	mov	r3, r0
 8008278:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 800827a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d116      	bne.n	80082ae <process_get_descriptor+0x12e>
 8008280:	4b2b      	ldr	r3, [pc, #172]	@ (8008330 <process_get_descriptor+0x1b0>)
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d000      	beq.n	8008292 <process_get_descriptor+0x112>
 8008290:	be00      	bkpt	0x0000
 8008292:	2300      	movs	r3, #0
 8008294:	e047      	b.n	8008326 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8008296:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff f802 	bl	80072a4 <tud_descriptor_other_speed_configuration_cb>
 80082a0:	4603      	mov	r3, r0
 80082a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 80082a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <process_get_descriptor+0x12e>
 80082aa:	2300      	movs	r3, #0
 80082ac:	e03b      	b.n	8008326 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 80082ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b0:	3302      	adds	r3, #2
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80082ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80082be:	79f8      	ldrb	r0, [r7, #7]
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	f000 fced 	bl	8008ca0 <tud_control_xfer>
 80082c6:	4603      	mov	r3, r0
 80082c8:	e02d      	b.n	8008326 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	889b      	ldrh	r3, [r3, #4]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f8 fcf8 	bl	8000ccc <tud_descriptor_string_cb>
 80082dc:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <process_get_descriptor+0x168>
 80082e4:	2300      	movs	r3, #0
 80082e6:	e01e      	b.n	8008326 <process_get_descriptor+0x1a6>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 80082f0:	79f8      	ldrb	r0, [r7, #7]
 80082f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	f000 fcd3 	bl	8008ca0 <tud_control_xfer>
 80082fa:	4603      	mov	r3, r0
 80082fc:	e013      	b.n	8008326 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80082fe:	f7fe ffc9 	bl	8007294 <tud_descriptor_device_qualifier_cb>
 8008302:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8008304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <process_get_descriptor+0x18e>
 800830a:	2300      	movs	r3, #0
 800830c:	e00b      	b.n	8008326 <process_get_descriptor+0x1a6>
 800830e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8008316:	79f8      	ldrb	r0, [r7, #7]
 8008318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	f000 fcc0 	bl	8008ca0 <tud_control_xfer>
 8008320:	4603      	mov	r3, r0
 8008322:	e000      	b.n	8008326 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8008324:	2300      	movs	r3, #0
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3750      	adds	r7, #80	@ 0x50
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000edf0 	.word	0xe000edf0

08008334 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b0a0      	sub	sp, #128	@ 0x80
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8008340:	2300      	movs	r3, #0
 8008342:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	3b02      	subs	r3, #2
 800834c:	2b04      	cmp	r3, #4
 800834e:	f200 8173 	bhi.w	8008638 <dcd_event_handler+0x304>
 8008352:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <dcd_event_handler+0x24>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	0800836d 	.word	0x0800836d
 800835c:	080083dd 	.word	0x080083dd
 8008360:	08008399 	.word	0x08008399
 8008364:	080083bb 	.word	0x080083bb
 8008368:	08008605 	.word	0x08008605
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 800836c:	4aab      	ldr	r2, [pc, #684]	@ (800861c <dcd_event_handler+0x2e8>)
 800836e:	7813      	ldrb	r3, [r2, #0]
 8008370:	f36f 0300 	bfc	r3, #0, #1
 8008374:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8008376:	4aa9      	ldr	r2, [pc, #676]	@ (800861c <dcd_event_handler+0x2e8>)
 8008378:	7813      	ldrb	r3, [r2, #0]
 800837a:	f36f 0341 	bfc	r3, #1, #1
 800837e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8008380:	4ba6      	ldr	r3, [pc, #664]	@ (800861c <dcd_event_handler+0x2e8>)
 8008382:	2200      	movs	r2, #0
 8008384:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8008386:	4aa5      	ldr	r2, [pc, #660]	@ (800861c <dcd_event_handler+0x2e8>)
 8008388:	7813      	ldrb	r3, [r2, #0]
 800838a:	f36f 0382 	bfc	r3, #2, #1
 800838e:	7013      	strb	r3, [r2, #0]
      send = true;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008396:	e158      	b.n	800864a <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8008398:	4ba0      	ldr	r3, [pc, #640]	@ (800861c <dcd_event_handler+0x2e8>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 814c 	beq.w	8008640 <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 80083a8:	4a9c      	ldr	r2, [pc, #624]	@ (800861c <dcd_event_handler+0x2e8>)
 80083aa:	7813      	ldrb	r3, [r2, #0]
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	7013      	strb	r3, [r2, #0]
        send = true;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80083b8:	e142      	b.n	8008640 <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 80083ba:	4b98      	ldr	r3, [pc, #608]	@ (800861c <dcd_event_handler+0x2e8>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 813d 	beq.w	8008644 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 80083ca:	4a94      	ldr	r2, [pc, #592]	@ (800861c <dcd_event_handler+0x2e8>)
 80083cc:	7813      	ldrb	r3, [r2, #0]
 80083ce:	f36f 0382 	bfc	r3, #2, #1
 80083d2:	7013      	strb	r3, [r2, #0]
        send = true;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80083da:	e133      	b.n	8008644 <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80083dc:	2300      	movs	r3, #0
 80083de:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80083e2:	e038      	b.n	8008456 <dcd_event_handler+0x122>
 80083e4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80083e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 80083f0:	4b8b      	ldr	r3, [pc, #556]	@ (8008620 <dcd_event_handler+0x2ec>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d207      	bcs.n	800840c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 80083fc:	4b89      	ldr	r3, [pc, #548]	@ (8008624 <dcd_event_handler+0x2f0>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008404:	015b      	lsls	r3, r3, #5
 8008406:	4413      	add	r3, r2
 8008408:	673b      	str	r3, [r7, #112]	@ 0x70
 800840a:	e00e      	b.n	800842a <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800840c:	4b84      	ldr	r3, [pc, #528]	@ (8008620 <dcd_event_handler+0x2ec>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8008414:	429a      	cmp	r2, r3
 8008416:	d808      	bhi.n	800842a <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008418:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800841c:	4a80      	ldr	r2, [pc, #512]	@ (8008620 <dcd_event_handler+0x2ec>)
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	015b      	lsls	r3, r3, #5
 8008424:	4a80      	ldr	r2, [pc, #512]	@ (8008628 <dcd_event_handler+0x2f4>)
 8008426:	4413      	add	r3, r2
 8008428:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 800842a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 800842c:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 800842e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <dcd_event_handler+0x118>
 8008434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 800843c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7810      	ldrb	r0, [r2, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6852      	ldr	r2, [r2, #4]
 8008448:	4611      	mov	r1, r2
 800844a:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800844c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008450:	3301      	adds	r3, #1
 8008452:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008456:	4b72      	ldr	r3, [pc, #456]	@ (8008620 <dcd_event_handler+0x2ec>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800845e:	429a      	cmp	r2, r3
 8008460:	d9c0      	bls.n	80083e4 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8008462:	4b6e      	ldr	r3, [pc, #440]	@ (800861c <dcd_event_handler+0x2e8>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d05a      	beq.n	8008526 <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 8008470:	4a6a      	ldr	r2, [pc, #424]	@ (800861c <dcd_event_handler+0x2e8>)
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	f36f 0382 	bfc	r3, #2, #1
 8008478:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 800847a:	f107 0314 	add.w	r3, r7, #20
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	605a      	str	r2, [r3, #4]
 8008484:	609a      	str	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	753b      	strb	r3, [r7, #20]
 800848c:	2305      	movs	r3, #5
 800848e:	757b      	strb	r3, [r7, #21]
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800849c:	4b63      	ldr	r3, [pc, #396]	@ (800862c <dcd_event_handler+0x2f8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80084a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80084a6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80084aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 80084ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084b2:	f083 0301 	eor.w	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 80084bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2000      	movs	r0, #0
 80084c2:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 80084c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084c6:	3304      	adds	r3, #4
 80084c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fe37 	bl	800713e <tu_fifo_write>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 80084d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084da:	f083 0301 	eor.w	r3, r3, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 80084e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2001      	movs	r0, #1
 80084ea:	4798      	blx	r3
  }

  return success;
 80084ec:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80084f0:	f083 0301 	eor.w	r3, r3, #1
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <dcd_event_handler+0x1da>
 80084fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008630 <dcd_event_handler+0x2fc>)
 80084fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00c      	beq.n	8008524 <dcd_event_handler+0x1f0>
 800850a:	be00      	bkpt	0x0000
 800850c:	e00a      	b.n	8008524 <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800850e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008510:	7818      	ldrb	r0, [r3, #0]
 8008512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	4619      	mov	r1, r3
 8008518:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800851c:	461a      	mov	r2, r3
 800851e:	f7fe fe99 	bl	8007254 <tud_event_hook_cb>
  return true;
 8008522:	e000      	b.n	8008526 <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008524:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008526:	4b3d      	ldr	r3, [pc, #244]	@ (800861c <dcd_event_handler+0x2e8>)
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	657b      	str	r3, [r7, #84]	@ 0x54
 800852e:	2300      	movs	r3, #0
 8008530:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008534:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008538:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800853a:	fa22 f303 	lsr.w	r3, r2, r3
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	bf14      	ite	ne
 8008546:	2301      	movne	r3, #1
 8008548:	2300      	moveq	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d07b      	beq.n	8008648 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8008550:	f107 0308 	add.w	r3, r7, #8
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	723b      	strb	r3, [r7, #8]
 8008562:	2303      	movs	r3, #3
 8008564:	727b      	strb	r3, [r7, #9]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008578:	4b2c      	ldr	r3, [pc, #176]	@ (800862c <dcd_event_handler+0x2f8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	647b      	str	r3, [r7, #68]	@ 0x44
 800857e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008580:	643b      	str	r3, [r7, #64]	@ 0x40
 8008582:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008586:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 800858a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800858e:	f083 0301 	eor.w	r3, r3, #1
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8008598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2000      	movs	r0, #0
 800859e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80085a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085a2:	3304      	adds	r3, #4
 80085a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fdc9 	bl	800713e <tu_fifo_write>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 80085b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80085b6:	f083 0301 	eor.w	r3, r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 80085c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2001      	movs	r0, #1
 80085c6:	4798      	blx	r3
  return success;
 80085c8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80085cc:	f083 0301 	eor.w	r3, r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <dcd_event_handler+0x2b6>
 80085d6:	4b16      	ldr	r3, [pc, #88]	@ (8008630 <dcd_event_handler+0x2fc>)
 80085d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00c      	beq.n	8008600 <dcd_event_handler+0x2cc>
 80085e6:	be00      	bkpt	0x0000
 80085e8:	e00a      	b.n	8008600 <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80085ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ec:	7818      	ldrb	r0, [r3, #0]
 80085ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	4619      	mov	r1, r3
 80085f4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80085f8:	461a      	mov	r2, r3
 80085fa:	f7fe fe2b 	bl	8007254 <tud_event_hook_cb>
  return true;
 80085fe:	e000      	b.n	8008602 <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008600:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8008602:	e021      	b.n	8008648 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8008604:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <dcd_event_handler+0x300>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	3301      	adds	r3, #1
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b09      	ldr	r3, [pc, #36]	@ (8008634 <dcd_event_handler+0x300>)
 8008610:	701a      	strb	r2, [r3, #0]
      send = true;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008618:	e017      	b.n	800864a <dcd_event_handler+0x316>
 800861a:	bf00      	nop
 800861c:	24000864 	.word	0x24000864
 8008620:	240008a4 	.word	0x240008a4
 8008624:	240008a0 	.word	0x240008a0
 8008628:	0800b068 	.word	0x0800b068
 800862c:	24000968 	.word	0x24000968
 8008630:	e000edf0 	.word	0xe000edf0
 8008634:	2400089c 	.word	0x2400089c

    default:
      send = true;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800863e:	e004      	b.n	800864a <dcd_event_handler+0x316>
      break;
 8008640:	bf00      	nop
 8008642:	e002      	b.n	800864a <dcd_event_handler+0x316>
      break;
 8008644:	bf00      	nop
 8008646:	e000      	b.n	800864a <dcd_event_handler+0x316>
      break;
 8008648:	bf00      	nop
  }

  if (send) {
 800864a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800864e:	2b00      	cmp	r3, #0
 8008650:	d049      	beq.n	80086e6 <dcd_event_handler+0x3b2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	637b      	str	r3, [r7, #52]	@ 0x34
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800865c:	4b24      	ldr	r3, [pc, #144]	@ (80086f0 <dcd_event_handler+0x3bc>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 800866e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008672:	f083 0301 	eor.w	r3, r3, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2000      	movs	r0, #0
 8008682:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	3304      	adds	r3, #4
 8008688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fd57 	bl	800713e <tu_fifo_write>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8008696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800869a:	f083 0301 	eor.w	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2001      	movs	r0, #1
 80086aa:	4798      	blx	r3
  return success;
 80086ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086b0:	f083 0301 	eor.w	r3, r3, #1
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <dcd_event_handler+0x39a>
 80086ba:	4b0e      	ldr	r3, [pc, #56]	@ (80086f4 <dcd_event_handler+0x3c0>)
 80086bc:	623b      	str	r3, [r7, #32]
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <dcd_event_handler+0x3b0>
 80086ca:	be00      	bkpt	0x0000
 80086cc:	e00a      	b.n	80086e4 <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80086ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d0:	7818      	ldrb	r0, [r3, #0]
 80086d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	4619      	mov	r1, r3
 80086d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80086dc:	461a      	mov	r2, r3
 80086de:	f7fe fdb9 	bl	8007254 <tud_event_hook_cb>
  return true;
 80086e2:	e000      	b.n	80086e6 <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80086e4:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 80086e6:	bf00      	nop
 80086e8:	3780      	adds	r7, #128	@ 0x80
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	24000968 	.word	0x24000968
 80086f4:	e000edf0 	.word	0xe000edf0

080086f8 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8008708:	4b07      	ldr	r3, [pc, #28]	@ (8008728 <usbd_int_set+0x30>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f8b7 	bl	8009880 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8008712:	e004      	b.n	800871e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8008714:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <usbd_int_set+0x30>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f8d9 	bl	80098d0 <dcd_int_disable>
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	24000021 	.word	0x24000021

0800872c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08a      	sub	sp, #40	@ 0x28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6039      	str	r1, [r7, #0]
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	71fb      	strb	r3, [r7, #7]
 800873c:	460b      	mov	r3, r1
 800873e:	71bb      	strb	r3, [r7, #6]
 8008740:	4613      	mov	r3, r2
 8008742:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008744:	2300      	movs	r3, #0
 8008746:	627b      	str	r3, [r7, #36]	@ 0x24
 8008748:	e04d      	b.n	80087e6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b05      	cmp	r3, #5
 8008754:	d108      	bne.n	8008768 <usbd_open_edpt_pair+0x3c>
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	78db      	ldrb	r3, [r3, #3]
 800875a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	797b      	ldrb	r3, [r7, #5]
 8008764:	4293      	cmp	r3, r2
 8008766:	d00a      	beq.n	800877e <usbd_open_edpt_pair+0x52>
 8008768:	4b23      	ldr	r3, [pc, #140]	@ (80087f8 <usbd_open_edpt_pair+0xcc>)
 800876a:	61bb      	str	r3, [r7, #24]
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d000      	beq.n	800877a <usbd_open_edpt_pair+0x4e>
 8008778:	be00      	bkpt	0x0000
 800877a:	2300      	movs	r3, #0
 800877c:	e038      	b.n	80087f0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	6a39      	ldr	r1, [r7, #32]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f83a 	bl	80087fc <usbd_edpt_open>
 8008788:	4603      	mov	r3, r0
 800878a:	f083 0301 	eor.w	r3, r3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <usbd_open_edpt_pair+0x7e>
 8008794:	4b18      	ldr	r3, [pc, #96]	@ (80087f8 <usbd_open_edpt_pair+0xcc>)
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d000      	beq.n	80087a6 <usbd_open_edpt_pair+0x7a>
 80087a4:	be00      	bkpt	0x0000
 80087a6:	2300      	movs	r3, #0
 80087a8:	e022      	b.n	80087f0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	789b      	ldrb	r3, [r3, #2]
 80087ae:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	09db      	lsrs	r3, r3, #7
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d104      	bne.n	80087c4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	789a      	ldrb	r2, [r3, #2]
 80087be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e003      	b.n	80087cc <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	789a      	ldrb	r2, [r3, #2]
 80087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80087de:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	3301      	adds	r3, #1
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e6:	79bb      	ldrb	r3, [r7, #6]
 80087e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ea:	429a      	cmp	r2, r3
 80087ec:	dbad      	blt.n	800874a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80087ee:	2301      	movs	r3, #1
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3728      	adds	r7, #40	@ 0x28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000edf0 	.word	0xe000edf0

080087fc <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8008808:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <usbd_edpt_open+0x7c>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	789b      	ldrb	r3, [r3, #2]
 8008812:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b08      	cmp	r3, #8
 800881e:	d90a      	bls.n	8008836 <usbd_edpt_open+0x3a>
 8008820:	4b16      	ldr	r3, [pc, #88]	@ (800887c <usbd_edpt_open+0x80>)
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d000      	beq.n	8008832 <usbd_edpt_open+0x36>
 8008830:	be00      	bkpt	0x0000
 8008832:	2300      	movs	r3, #0
 8008834:	e01c      	b.n	8008870 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8008836:	4b12      	ldr	r3, [pc, #72]	@ (8008880 <usbd_edpt_open+0x84>)
 8008838:	789b      	ldrb	r3, [r3, #2]
 800883a:	4619      	mov	r1, r3
 800883c:	6838      	ldr	r0, [r7, #0]
 800883e:	f002 fa81 	bl	800ad44 <tu_edpt_validate>
 8008842:	4603      	mov	r3, r0
 8008844:	f083 0301 	eor.w	r3, r3, #1
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <usbd_edpt_open+0x68>
 800884e:	4b0b      	ldr	r3, [pc, #44]	@ (800887c <usbd_edpt_open+0x80>)
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d000      	beq.n	8008860 <usbd_edpt_open+0x64>
 800885e:	be00      	bkpt	0x0000
 8008860:	2300      	movs	r3, #0
 8008862:	e005      	b.n	8008870 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f001 f90f 	bl	8009a8c <dcd_edpt_open>
 800886e:	4603      	mov	r3, r0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	24000021 	.word	0x24000021
 800887c:	e000edf0 	.word	0xe000edf0
 8008880:	24000864 	.word	0x24000864

08008884 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	460a      	mov	r2, r1
 800888e:	71fb      	strb	r3, [r7, #7]
 8008890:	4613      	mov	r3, r2
 8008892:	71bb      	strb	r3, [r7, #6]
 8008894:	79bb      	ldrb	r3, [r7, #6]
 8008896:	73bb      	strb	r3, [r7, #14]
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800889e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	79bb      	ldrb	r3, [r7, #6]
 80088a4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	09db      	lsrs	r3, r3, #7
 80088aa:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80088ac:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80088ae:	7dfa      	ldrb	r2, [r7, #23]
 80088b0:	7dbb      	ldrb	r3, [r7, #22]
 80088b2:	0052      	lsls	r2, r2, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	3320      	adds	r3, #32
 80088b8:	4a06      	ldr	r2, [pc, #24]	@ (80088d4 <usbd_edpt_claim+0x50>)
 80088ba:	4413      	add	r3, r2
 80088bc:	3306      	adds	r3, #6
 80088be:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80088c0:	2100      	movs	r1, #0
 80088c2:	6938      	ldr	r0, [r7, #16]
 80088c4:	f002 f9d9 	bl	800ac7a <tu_edpt_claim>
 80088c8:	4603      	mov	r3, r0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	24000864 	.word	0x24000864

080088d8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	460a      	mov	r2, r1
 80088e2:	71fb      	strb	r3, [r7, #7]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71bb      	strb	r3, [r7, #6]
 80088e8:	79bb      	ldrb	r3, [r7, #6]
 80088ea:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088f2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80088f4:	75fb      	strb	r3, [r7, #23]
 80088f6:	79bb      	ldrb	r3, [r7, #6]
 80088f8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	09db      	lsrs	r3, r3, #7
 80088fe:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008900:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008902:	7dfa      	ldrb	r2, [r7, #23]
 8008904:	7dbb      	ldrb	r3, [r7, #22]
 8008906:	0052      	lsls	r2, r2, #1
 8008908:	4413      	add	r3, r2
 800890a:	3320      	adds	r3, #32
 800890c:	4a06      	ldr	r2, [pc, #24]	@ (8008928 <usbd_edpt_release+0x50>)
 800890e:	4413      	add	r3, r2
 8008910:	3306      	adds	r3, #6
 8008912:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008914:	2100      	movs	r1, #0
 8008916:	6938      	ldr	r0, [r7, #16]
 8008918:	f002 f9e9 	bl	800acee <tu_edpt_release>
 800891c:	4603      	mov	r3, r0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	24000864 	.word	0x24000864

0800892c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	603a      	str	r2, [r7, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
 800893a:	460b      	mov	r3, r1
 800893c:	71bb      	strb	r3, [r7, #6]
 800893e:	4613      	mov	r3, r2
 8008940:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008942:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <usbd_edpt_xfer+0xe0>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
 8008948:	79bb      	ldrb	r3, [r7, #6]
 800894a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800894c:	7abb      	ldrb	r3, [r7, #10]
 800894e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008952:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008954:	75fb      	strb	r3, [r7, #23]
 8008956:	79bb      	ldrb	r3, [r7, #6]
 8008958:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	09db      	lsrs	r3, r3, #7
 800895e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008960:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008962:	7dfa      	ldrb	r2, [r7, #23]
 8008964:	7dbb      	ldrb	r3, [r7, #22]
 8008966:	492a      	ldr	r1, [pc, #168]	@ (8008a10 <usbd_edpt_xfer+0xe4>)
 8008968:	0052      	lsls	r2, r2, #1
 800896a:	440a      	add	r2, r1
 800896c:	4413      	add	r3, r2
 800896e:	3320      	adds	r3, #32
 8008970:	799b      	ldrb	r3, [r3, #6]
 8008972:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <usbd_edpt_xfer+0x66>
 800897c:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <usbd_edpt_xfer+0xe8>)
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d000      	beq.n	800898e <usbd_edpt_xfer+0x62>
 800898c:	be00      	bkpt	0x0000
 800898e:	2300      	movs	r3, #0
 8008990:	e038      	b.n	8008a04 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008992:	7dfa      	ldrb	r2, [r7, #23]
 8008994:	7dbb      	ldrb	r3, [r7, #22]
 8008996:	491e      	ldr	r1, [pc, #120]	@ (8008a10 <usbd_edpt_xfer+0xe4>)
 8008998:	0052      	lsls	r2, r2, #1
 800899a:	440a      	add	r2, r1
 800899c:	4413      	add	r3, r2
 800899e:	f103 0220 	add.w	r2, r3, #32
 80089a2:	7993      	ldrb	r3, [r2, #6]
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	7193      	strb	r3, [r2, #6]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 80089aa:	88bb      	ldrh	r3, [r7, #4]
 80089ac:	79b9      	ldrb	r1, [r7, #6]
 80089ae:	79f8      	ldrb	r0, [r7, #7]
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	f001 f929 	bl	8009c08 <dcd_edpt_xfer>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <usbd_edpt_xfer+0x94>
    return true;
 80089bc:	2301      	movs	r3, #1
 80089be:	e021      	b.n	8008a04 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80089c0:	7dfa      	ldrb	r2, [r7, #23]
 80089c2:	7dbb      	ldrb	r3, [r7, #22]
 80089c4:	4912      	ldr	r1, [pc, #72]	@ (8008a10 <usbd_edpt_xfer+0xe4>)
 80089c6:	0052      	lsls	r2, r2, #1
 80089c8:	440a      	add	r2, r1
 80089ca:	4413      	add	r3, r2
 80089cc:	f103 0220 	add.w	r2, r3, #32
 80089d0:	7993      	ldrb	r3, [r2, #6]
 80089d2:	f36f 0300 	bfc	r3, #0, #1
 80089d6:	7193      	strb	r3, [r2, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80089d8:	7dfa      	ldrb	r2, [r7, #23]
 80089da:	7dbb      	ldrb	r3, [r7, #22]
 80089dc:	490c      	ldr	r1, [pc, #48]	@ (8008a10 <usbd_edpt_xfer+0xe4>)
 80089de:	0052      	lsls	r2, r2, #1
 80089e0:	440a      	add	r2, r1
 80089e2:	4413      	add	r3, r2
 80089e4:	f103 0220 	add.w	r2, r3, #32
 80089e8:	7993      	ldrb	r3, [r2, #6]
 80089ea:	f36f 0382 	bfc	r3, #2, #1
 80089ee:	7193      	strb	r3, [r2, #6]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80089f0:	4b08      	ldr	r3, [pc, #32]	@ (8008a14 <usbd_edpt_xfer+0xe8>)
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d000      	beq.n	8008a02 <usbd_edpt_xfer+0xd6>
 8008a00:	be00      	bkpt	0x0000
    return false;
 8008a02:	2300      	movs	r3, #0
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	24000021 	.word	0x24000021
 8008a10:	24000864 	.word	0x24000864
 8008a14:	e000edf0 	.word	0xe000edf0

08008a18 <usbd_edpt_stall>:
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	460a      	mov	r2, r1
 8008a22:	71fb      	strb	r3, [r7, #7]
 8008a24:	4613      	mov	r3, r2
 8008a26:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008a28:	4b18      	ldr	r3, [pc, #96]	@ (8008a8c <usbd_edpt_stall+0x74>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	71fb      	strb	r3, [r7, #7]
 8008a2e:	79bb      	ldrb	r3, [r7, #6]
 8008a30:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008a32:	7b3b      	ldrb	r3, [r7, #12]
 8008a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a38:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008a3a:	73fb      	strb	r3, [r7, #15]
 8008a3c:	79bb      	ldrb	r3, [r7, #6]
 8008a3e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a40:	7b7b      	ldrb	r3, [r7, #13]
 8008a42:	09db      	lsrs	r3, r3, #7
 8008a44:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008a46:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8008a48:	79ba      	ldrb	r2, [r7, #6]
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f91a 	bl	8009c88 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008a54:	7bfa      	ldrb	r2, [r7, #15]
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	490d      	ldr	r1, [pc, #52]	@ (8008a90 <usbd_edpt_stall+0x78>)
 8008a5a:	0052      	lsls	r2, r2, #1
 8008a5c:	440a      	add	r2, r1
 8008a5e:	4413      	add	r3, r2
 8008a60:	f103 0220 	add.w	r2, r3, #32
 8008a64:	7993      	ldrb	r3, [r2, #6]
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	7193      	strb	r3, [r2, #6]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008a6c:	7bfa      	ldrb	r2, [r7, #15]
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	4907      	ldr	r1, [pc, #28]	@ (8008a90 <usbd_edpt_stall+0x78>)
 8008a72:	0052      	lsls	r2, r2, #1
 8008a74:	440a      	add	r2, r1
 8008a76:	4413      	add	r3, r2
 8008a78:	f103 0220 	add.w	r2, r3, #32
 8008a7c:	7993      	ldrb	r3, [r2, #6]
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	7193      	strb	r3, [r2, #6]
}
 8008a84:	bf00      	nop
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	24000021 	.word	0x24000021
 8008a90:	24000864 	.word	0x24000864

08008a94 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008aa4:	4b18      	ldr	r3, [pc, #96]	@ (8008b08 <usbd_edpt_clear_stall+0x74>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	79bb      	ldrb	r3, [r7, #6]
 8008aac:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008aae:	7b3b      	ldrb	r3, [r7, #12]
 8008ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008ab6:	73fb      	strb	r3, [r7, #15]
 8008ab8:	79bb      	ldrb	r3, [r7, #6]
 8008aba:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008abc:	7b7b      	ldrb	r3, [r7, #13]
 8008abe:	09db      	lsrs	r3, r3, #7
 8008ac0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008ac2:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8008ac4:	79ba      	ldrb	r2, [r7, #6]
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f90e 	bl	8009cec <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008ad0:	7bfa      	ldrb	r2, [r7, #15]
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	490d      	ldr	r1, [pc, #52]	@ (8008b0c <usbd_edpt_clear_stall+0x78>)
 8008ad6:	0052      	lsls	r2, r2, #1
 8008ad8:	440a      	add	r2, r1
 8008ada:	4413      	add	r3, r2
 8008adc:	f103 0220 	add.w	r2, r3, #32
 8008ae0:	7993      	ldrb	r3, [r2, #6]
 8008ae2:	f36f 0341 	bfc	r3, #1, #1
 8008ae6:	7193      	strb	r3, [r2, #6]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008ae8:	7bfa      	ldrb	r2, [r7, #15]
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	4907      	ldr	r1, [pc, #28]	@ (8008b0c <usbd_edpt_clear_stall+0x78>)
 8008aee:	0052      	lsls	r2, r2, #1
 8008af0:	440a      	add	r2, r1
 8008af2:	4413      	add	r3, r2
 8008af4:	f103 0220 	add.w	r2, r3, #32
 8008af8:	7993      	ldrb	r3, [r2, #6]
 8008afa:	f36f 0300 	bfc	r3, #0, #1
 8008afe:	7193      	strb	r3, [r2, #6]
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	24000021 	.word	0x24000021
 8008b0c:	24000864 	.word	0x24000864

08008b10 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	460a      	mov	r2, r1
 8008b1a:	71fb      	strb	r3, [r7, #7]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	71bb      	strb	r3, [r7, #6]
 8008b20:	79bb      	ldrb	r3, [r7, #6]
 8008b22:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008b24:	7b3b      	ldrb	r3, [r7, #12]
 8008b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008b2c:	73fb      	strb	r3, [r7, #15]
 8008b2e:	79bb      	ldrb	r3, [r7, #6]
 8008b30:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008b32:	7b7b      	ldrb	r3, [r7, #13]
 8008b34:	09db      	lsrs	r3, r3, #7
 8008b36:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008b38:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008b3a:	7bfa      	ldrb	r2, [r7, #15]
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	490a      	ldr	r1, [pc, #40]	@ (8008b68 <usbd_edpt_stalled+0x58>)
 8008b40:	0052      	lsls	r2, r2, #1
 8008b42:	440a      	add	r2, r1
 8008b44:	4413      	add	r3, r2
 8008b46:	3320      	adds	r3, #32
 8008b48:	799b      	ldrb	r3, [r3, #6]
 8008b4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bf14      	ite	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	2300      	moveq	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	24000864 	.word	0x24000864

08008b6c <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <status_stage_xact+0x1e>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e000      	b.n	8008ba4 <status_stage_xact+0x20>
 8008ba2:	2380      	movs	r3, #128	@ 0x80
 8008ba4:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8008ba6:	7bf9      	ldrb	r1, [r7, #15]
 8008ba8:	79f8      	ldrb	r0, [r7, #7]
 8008baa:	2300      	movs	r3, #0
 8008bac:	2200      	movs	r2, #0
 8008bae:	f7ff febd 	bl	800892c <usbd_edpt_xfer>
 8008bb2:	4603      	mov	r3, r0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf8 <tud_control_status+0x3c>)
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	6810      	ldr	r0, [r2, #0]
 8008bce:	6851      	ldr	r1, [r2, #4]
 8008bd0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008bd2:	4b09      	ldr	r3, [pc, #36]	@ (8008bf8 <tud_control_status+0x3c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008bd8:	4b07      	ldr	r3, [pc, #28]	@ (8008bf8 <tud_control_status+0x3c>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008bde:	4b06      	ldr	r3, [pc, #24]	@ (8008bf8 <tud_control_status+0x3c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff ffcb 	bl	8008b84 <status_stage_xact>
 8008bee:	4603      	mov	r3, r0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	2400096c 	.word	0x2400096c

08008bfc <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8008c06:	4b24      	ldr	r3, [pc, #144]	@ (8008c98 <data_stage_xact+0x9c>)
 8008c08:	899a      	ldrh	r2, [r3, #12]
 8008c0a:	4b23      	ldr	r3, [pc, #140]	@ (8008c98 <data_stage_xact+0x9c>)
 8008c0c:	89db      	ldrh	r3, [r3, #14]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	837b      	strh	r3, [r7, #26]
 8008c14:	2340      	movs	r3, #64	@ 0x40
 8008c16:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008c18:	8b7a      	ldrh	r2, [r7, #26]
 8008c1a:	8b3b      	ldrh	r3, [r7, #24]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bf28      	it	cs
 8008c20:	4613      	movcs	r3, r2
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8008c26:	2300      	movs	r3, #0
 8008c28:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c98 <data_stage_xact+0x9c>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01e      	beq.n	8008c76 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8008c38:	2380      	movs	r3, #128	@ 0x80
 8008c3a:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8008c3c:	8bbb      	ldrh	r3, [r7, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d019      	beq.n	8008c76 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008c42:	4b15      	ldr	r3, [pc, #84]	@ (8008c98 <data_stage_xact+0x9c>)
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	8bbb      	ldrh	r3, [r7, #28]
 8008c48:	4914      	ldr	r1, [pc, #80]	@ (8008c9c <data_stage_xact+0xa0>)
 8008c4a:	6179      	str	r1, [r7, #20]
 8008c4c:	2140      	movs	r1, #64	@ 0x40
 8008c4e:	6139      	str	r1, [r7, #16]
 8008c50:	60fa      	str	r2, [r7, #12]
 8008c52:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d202      	bcs.n	8008c62 <data_stage_xact+0x66>
    return -1;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c60:	e005      	b.n	8008c6e <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	68f9      	ldr	r1, [r7, #12]
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f002 f95a 	bl	800af20 <memcpy>
  return 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <data_stage_xact+0x7a>
 8008c72:	2300      	movs	r3, #0
 8008c74:	e00b      	b.n	8008c8e <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8008c76:	8bbb      	ldrh	r3, [r7, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <data_stage_xact+0x84>
 8008c7c:	4a07      	ldr	r2, [pc, #28]	@ (8008c9c <data_stage_xact+0xa0>)
 8008c7e:	e000      	b.n	8008c82 <data_stage_xact+0x86>
 8008c80:	2200      	movs	r2, #0
 8008c82:	8bbb      	ldrh	r3, [r7, #28]
 8008c84:	7ff9      	ldrb	r1, [r7, #31]
 8008c86:	79f8      	ldrb	r0, [r7, #7]
 8008c88:	f7ff fe50 	bl	800892c <usbd_edpt_xfer>
 8008c8c:	4603      	mov	r3, r0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2400096c 	.word	0x2400096c
 8008c9c:	24000980 	.word	0x24000980

08008ca0 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
 8008caa:	461a      	mov	r2, r3
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8008cb4:	4b30      	ldr	r3, [pc, #192]	@ (8008d78 <tud_control_xfer+0xd8>)
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	6810      	ldr	r0, [r2, #0]
 8008cba:	6851      	ldr	r1, [r2, #4]
 8008cbc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8008cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8008d78 <tud_control_xfer+0xd8>)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8008d78 <tud_control_xfer+0xd8>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	88db      	ldrh	r3, [r3, #6]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	89bb      	ldrh	r3, [r7, #12]
 8008cd2:	827b      	strh	r3, [r7, #18]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008cd8:	8a7a      	ldrh	r2, [r7, #18]
 8008cda:	8a3b      	ldrh	r3, [r7, #16]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bf28      	it	cs
 8008ce0:	4613      	movcs	r3, r2
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	4b24      	ldr	r3, [pc, #144]	@ (8008d78 <tud_control_xfer+0xd8>)
 8008ce6:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	88db      	ldrh	r3, [r3, #6]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d026      	beq.n	8008d40 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8008cf2:	4b21      	ldr	r3, [pc, #132]	@ (8008d78 <tud_control_xfer+0xd8>)
 8008cf4:	899b      	ldrh	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00d      	beq.n	8008d16 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <tud_control_xfer+0x76>
 8008d00:	4b1e      	ldr	r3, [pc, #120]	@ (8008d7c <tud_control_xfer+0xdc>)
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d000      	beq.n	8008d12 <tud_control_xfer+0x72>
 8008d10:	be00      	bkpt	0x0000
 8008d12:	2300      	movs	r3, #0
 8008d14:	e02b      	b.n	8008d6e <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ff6f 	bl	8008bfc <data_stage_xact>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f083 0301 	eor.w	r3, r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d020      	beq.n	8008d6c <tud_control_xfer+0xcc>
 8008d2a:	4b14      	ldr	r3, [pc, #80]	@ (8008d7c <tud_control_xfer+0xdc>)
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d000      	beq.n	8008d3c <tud_control_xfer+0x9c>
 8008d3a:	be00      	bkpt	0x0000
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e016      	b.n	8008d6e <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ff1d 	bl	8008b84 <status_stage_xact>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f083 0301 	eor.w	r3, r3, #1
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <tud_control_xfer+0xcc>
 8008d56:	4b09      	ldr	r3, [pc, #36]	@ (8008d7c <tud_control_xfer+0xdc>)
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d000      	beq.n	8008d68 <tud_control_xfer+0xc8>
 8008d66:	be00      	bkpt	0x0000
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e000      	b.n	8008d6e <tud_control_xfer+0xce>
  }

  return true;
 8008d6c:	2301      	movs	r3, #1
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2400096c 	.word	0x2400096c
 8008d7c:	e000edf0 	.word	0xe000edf0

08008d80 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008d84:	2214      	movs	r2, #20
 8008d86:	2100      	movs	r1, #0
 8008d88:	4802      	ldr	r0, [pc, #8]	@ (8008d94 <usbd_control_reset+0x14>)
 8008d8a:	f002 f89c 	bl	800aec6 <memset>
}
 8008d8e:	bf00      	nop
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2400096c 	.word	0x2400096c

08008d98 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008da0:	4a04      	ldr	r2, [pc, #16]	@ (8008db4 <usbd_control_set_complete_callback+0x1c>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6113      	str	r3, [r2, #16]
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	2400096c 	.word	0x2400096c

08008db8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008dc0:	4b09      	ldr	r3, [pc, #36]	@ (8008de8 <usbd_control_set_request+0x30>)
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6810      	ldr	r0, [r2, #0]
 8008dc6:	6851      	ldr	r1, [r2, #4]
 8008dc8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008dca:	4b07      	ldr	r3, [pc, #28]	@ (8008de8 <usbd_control_set_request+0x30>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <usbd_control_set_request+0x30>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008dd6:	4b04      	ldr	r3, [pc, #16]	@ (8008de8 <usbd_control_set_request+0x30>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	819a      	strh	r2, [r3, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	2400096c 	.word	0x2400096c

08008dec <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	4603      	mov	r3, r0
 8008df6:	71fb      	strb	r3, [r7, #7]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	71bb      	strb	r3, [r7, #6]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	717b      	strb	r3, [r7, #5]
 8008e00:	79bb      	ldrb	r3, [r7, #6]
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	09db      	lsrs	r3, r3, #7
 8008e08:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01e      	beq.n	8008e56 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <usbd_control_xfer_cb+0x48>
 8008e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8008f4c <usbd_control_xfer_cb+0x160>)
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d000      	beq.n	8008e30 <usbd_control_xfer_cb+0x44>
 8008e2e:	be00      	bkpt	0x0000
 8008e30:	2300      	movs	r3, #0
 8008e32:	e084      	b.n	8008f3e <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	4944      	ldr	r1, [pc, #272]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff fe97 	bl	8008b6c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008e3e:	4b42      	ldr	r3, [pc, #264]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008e46:	4b40      	ldr	r3, [pc, #256]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	79f8      	ldrb	r0, [r7, #7]
 8008e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e4e:	2103      	movs	r1, #3
 8008e50:	4798      	blx	r3
    }

    return true;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e073      	b.n	8008f3e <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8008e56:	4b3c      	ldr	r3, [pc, #240]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008e64:	4b38      	ldr	r3, [pc, #224]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <usbd_control_xfer_cb+0x84>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e066      	b.n	8008f3e <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008e70:	4b35      	ldr	r3, [pc, #212]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	4936      	ldr	r1, [pc, #216]	@ (8008f50 <usbd_control_xfer_cb+0x164>)
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 f851 	bl	800af20 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008e7e:	4b32      	ldr	r3, [pc, #200]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e80:	89da      	ldrh	r2, [r3, #14]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e8c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a2c      	ldr	r2, [pc, #176]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e98:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8008e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008e9c:	88da      	ldrh	r2, [r3, #6]
 8008e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008ea0:	89db      	ldrh	r3, [r3, #14]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d002      	beq.n	8008eac <usbd_control_xfer_cb+0xc0>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b3f      	cmp	r3, #63	@ 0x3f
 8008eaa:	d831      	bhi.n	8008f10 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008eac:	2301      	movs	r3, #1
 8008eae:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008eb0:	4b25      	ldr	r3, [pc, #148]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8008eb8:	4b23      	ldr	r3, [pc, #140]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	79f8      	ldrb	r0, [r7, #7]
 8008ebe:	4a22      	ldr	r2, [pc, #136]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008ec0:	2102      	movs	r1, #2
 8008ec2:	4798      	blx	r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8008ec8:	7ffb      	ldrb	r3, [r7, #31]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d015      	beq.n	8008efa <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	491d      	ldr	r1, [pc, #116]	@ (8008f48 <usbd_control_xfer_cb+0x15c>)
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fe56 	bl	8008b84 <status_stage_xact>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f083 0301 	eor.w	r3, r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d02a      	beq.n	8008f3a <usbd_control_xfer_cb+0x14e>
 8008ee4:	4b19      	ldr	r3, [pc, #100]	@ (8008f4c <usbd_control_xfer_cb+0x160>)
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d000      	beq.n	8008ef6 <usbd_control_xfer_cb+0x10a>
 8008ef4:	be00      	bkpt	0x0000
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e021      	b.n	8008f3e <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fec2 	bl	8009c88 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2180      	movs	r1, #128	@ 0x80
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 febd 	bl	8009c88 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008f0e:	e014      	b.n	8008f3a <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fe72 	bl	8008bfc <data_stage_xact>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f083 0301 	eor.w	r3, r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <usbd_control_xfer_cb+0x150>
 8008f24:	4b09      	ldr	r3, [pc, #36]	@ (8008f4c <usbd_control_xfer_cb+0x160>)
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d000      	beq.n	8008f36 <usbd_control_xfer_cb+0x14a>
 8008f34:	be00      	bkpt	0x0000
 8008f36:	2300      	movs	r3, #0
 8008f38:	e001      	b.n	8008f3e <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008f3a:	bf00      	nop
  }

  return true;
 8008f3c:	2301      	movs	r3, #1
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3720      	adds	r7, #32
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	2400096c 	.word	0x2400096c
 8008f4c:	e000edf0 	.word	0xe000edf0
 8008f50:	24000980 	.word	0x24000980

08008f54 <__NVIC_EnableIRQ>:
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db0b      	blt.n	8008f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	f003 021f 	and.w	r2, r3, #31
 8008f6c:	4907      	ldr	r1, [pc, #28]	@ (8008f8c <__NVIC_EnableIRQ+0x38>)
 8008f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	2001      	movs	r0, #1
 8008f76:	fa00 f202 	lsl.w	r2, r0, r2
 8008f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	e000e100 	.word	0xe000e100

08008f90 <__NVIC_DisableIRQ>:
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	db12      	blt.n	8008fc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	f003 021f 	and.w	r2, r3, #31
 8008fa8:	490a      	ldr	r1, [pc, #40]	@ (8008fd4 <__NVIC_DisableIRQ+0x44>)
 8008faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fae:	095b      	lsrs	r3, r3, #5
 8008fb0:	2001      	movs	r0, #1
 8008fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fb6:	3320      	adds	r3, #32
 8008fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008fbc:	f3bf 8f4f 	dsb	sy
}
 8008fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fc2:	f3bf 8f6f 	isb	sy
}
 8008fc6:	bf00      	nop
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	e000e100 	.word	0xe000e100

08008fd8 <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d901      	bls.n	8008ff0 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	4a13      	ldr	r2, [pc, #76]	@ (8009040 <dma_setup_prepare+0x68>)
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	4413      	add	r3, r2
 8008ff8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008ffa:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	4a10      	ldr	r2, [pc, #64]	@ (8009044 <dma_setup_prepare+0x6c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d904      	bls.n	8009010 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800900c:	2b00      	cmp	r3, #0
 800900e:	db10      	blt.n	8009032 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a0d      	ldr	r2, [pc, #52]	@ (8009048 <dma_setup_prepare+0x70>)
 8009014:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8009018:	4a0c      	ldr	r2, [pc, #48]	@ (800904c <dma_setup_prepare+0x74>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009026:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8009030:	e000      	b.n	8009034 <dma_setup_prepare+0x5c>
      return;
 8009032:	bf00      	nop
}
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	0800b088 	.word	0x0800b088
 8009044:	4f543009 	.word	0x4f543009
 8009048:	20080008 	.word	0x20080008
 800904c:	24000ae8 	.word	0x24000ae8

08009050 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8009050:	b480      	push	{r7}
 8009052:	b091      	sub	sp, #68	@ 0x44
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
 800905a:	460b      	mov	r3, r1
 800905c:	71bb      	strb	r3, [r7, #6]
 800905e:	4613      	mov	r3, r2
 8009060:	80bb      	strh	r3, [r7, #4]
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009066:	7e7b      	ldrb	r3, [r7, #25]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d901      	bls.n	8009070 <dfifo_alloc+0x20>
    rhport = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009070:	7e7b      	ldrb	r3, [r7, #25]
 8009072:	4a65      	ldr	r2, [pc, #404]	@ (8009208 <dfifo_alloc+0x1b8>)
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	4413      	add	r3, r2
 8009078:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800907a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	4a61      	ldr	r2, [pc, #388]	@ (8009208 <dfifo_alloc+0x1b8>)
 8009082:	4413      	add	r3, r2
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8009086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009088:	7a1b      	ldrb	r3, [r3, #8]
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800908e:	79bb      	ldrb	r3, [r7, #6]
 8009090:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009092:	7ebb      	ldrb	r3, [r7, #26]
 8009094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009098:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800909a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800909e:	79bb      	ldrb	r3, [r7, #6]
 80090a0:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80090a2:	7efb      	ldrb	r3, [r7, #27]
 80090a4:	09db      	lsrs	r3, r3, #7
 80090a6:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 80090a8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 80090ac:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80090b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d30a      	bcc.n	80090ce <dfifo_alloc+0x7e>
 80090b8:	4b54      	ldr	r3, [pc, #336]	@ (800920c <dfifo_alloc+0x1bc>)
 80090ba:	61fb      	str	r3, [r7, #28]
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d000      	beq.n	80090ca <dfifo_alloc+0x7a>
 80090c8:	be00      	bkpt	0x0000
 80090ca:	2300      	movs	r3, #0
 80090cc:	e095      	b.n	80091fa <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 80090ce:	88bb      	ldrh	r3, [r7, #4]
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	2304      	movs	r3, #4
 80090d4:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 80090e6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d12a      	bne.n	8009144 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 80090ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	81fb      	strh	r3, [r7, #14]
 80090f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090fa:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 80090fc:	89fb      	ldrh	r3, [r7, #14]
 80090fe:	089b      	lsrs	r3, r3, #2
 8009100:	b29b      	uxth	r3, r3
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	7b7b      	ldrb	r3, [r7, #13]
 8009108:	4413      	add	r3, r2
 800910a:	b29b      	uxth	r3, r3
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009110:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009118:	429a      	cmp	r2, r3
 800911a:	d26d      	bcs.n	80091f8 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800911c:	4b3c      	ldr	r3, [pc, #240]	@ (8009210 <dfifo_alloc+0x1c0>)
 800911e:	889b      	ldrh	r3, [r3, #4]
 8009120:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009122:	429a      	cmp	r2, r3
 8009124:	d90a      	bls.n	800913c <dfifo_alloc+0xec>
 8009126:	4b39      	ldr	r3, [pc, #228]	@ (800920c <dfifo_alloc+0x1bc>)
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d000      	beq.n	8009138 <dfifo_alloc+0xe8>
 8009136:	be00      	bkpt	0x0000
 8009138:	2300      	movs	r3, #0
 800913a:	e05e      	b.n	80091fa <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800913c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24
 8009142:	e059      	b.n	80091f8 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8009144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009146:	7a5b      	ldrb	r3, [r3, #9]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d016      	beq.n	800917a <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800914c:	4b30      	ldr	r3, [pc, #192]	@ (8009210 <dfifo_alloc+0x1c0>)
 800914e:	799a      	ldrb	r2, [r3, #6]
 8009150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009152:	7a5b      	ldrb	r3, [r3, #9]
 8009154:	429a      	cmp	r2, r3
 8009156:	d30a      	bcc.n	800916e <dfifo_alloc+0x11e>
 8009158:	4b2c      	ldr	r3, [pc, #176]	@ (800920c <dfifo_alloc+0x1bc>)
 800915a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800915c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d000      	beq.n	800916a <dfifo_alloc+0x11a>
 8009168:	be00      	bkpt	0x0000
 800916a:	2300      	movs	r3, #0
 800916c:	e045      	b.n	80091fa <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800916e:	4b28      	ldr	r3, [pc, #160]	@ (8009210 <dfifo_alloc+0x1c0>)
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	3301      	adds	r3, #1
 8009174:	b2da      	uxtb	r2, r3
 8009176:	4b26      	ldr	r3, [pc, #152]	@ (8009210 <dfifo_alloc+0x1c0>)
 8009178:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8009186:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800918c:	4b20      	ldr	r3, [pc, #128]	@ (8009210 <dfifo_alloc+0x1c0>)
 800918e:	889b      	ldrh	r3, [r3, #4]
 8009190:	4619      	mov	r1, r3
 8009192:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	4413      	add	r3, r2
 800919a:	4299      	cmp	r1, r3
 800919c:	d20a      	bcs.n	80091b4 <dfifo_alloc+0x164>
 800919e:	4b1b      	ldr	r3, [pc, #108]	@ (800920c <dfifo_alloc+0x1bc>)
 80091a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d000      	beq.n	80091b0 <dfifo_alloc+0x160>
 80091ae:	be00      	bkpt	0x0000
 80091b0:	2300      	movs	r3, #0
 80091b2:	e022      	b.n	80091fa <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 80091b4:	4b16      	ldr	r3, [pc, #88]	@ (8009210 <dfifo_alloc+0x1c0>)
 80091b6:	889a      	ldrh	r2, [r3, #4]
 80091b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	b29a      	uxth	r2, r3
 80091be:	4b14      	ldr	r3, [pc, #80]	@ (8009210 <dfifo_alloc+0x1c0>)
 80091c0:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 80091c2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d108      	bne.n	80091dc <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 80091ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80091cc:	041b      	lsls	r3, r3, #16
 80091ce:	4a10      	ldr	r2, [pc, #64]	@ (8009210 <dfifo_alloc+0x1c0>)
 80091d0:	8892      	ldrh	r2, [r2, #4]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80091da:	e00d      	b.n	80091f8 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 80091dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009210 <dfifo_alloc+0x1c0>)
 80091e2:	8892      	ldrh	r2, [r2, #4]
 80091e4:	431a      	orrs	r2, r3
 80091e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80091ea:	3b01      	subs	r3, #1
 80091ec:	4611      	mov	r1, r2
 80091ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091f0:	3340      	adds	r3, #64	@ 0x40
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 80091f8:	2301      	movs	r3, #1
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3744      	adds	r7, #68	@ 0x44
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	0800b088 	.word	0x0800b088
 800920c:	e000edf0 	.word	0xe000edf0
 8009210:	24000ae0 	.word	0x24000ae0

08009214 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	4a25      	ldr	r2, [pc, #148]	@ (80092b8 <dfifo_device_init+0xa4>)
 8009224:	4413      	add	r3, r2
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800922c:	7b3b      	ldrb	r3, [r7, #12]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d901      	bls.n	8009236 <dfifo_device_init+0x22>
    rhport = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009236:	7b3b      	ldrb	r3, [r7, #12]
 8009238:	4a1f      	ldr	r2, [pc, #124]	@ (80092b8 <dfifo_device_init+0xa4>)
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	4413      	add	r3, r2
 800923e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009240:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	7a1b      	ldrb	r3, [r3, #8]
 8009246:	2240      	movs	r2, #64	@ 0x40
 8009248:	81fa      	strh	r2, [r7, #14]
 800924a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800924c:	89fb      	ldrh	r3, [r7, #14]
 800924e:	089b      	lsrs	r3, r3, #2
 8009250:	b29b      	uxth	r3, r3
 8009252:	f103 0208 	add.w	r2, r3, #8
 8009256:	7b7b      	ldrb	r3, [r7, #13]
 8009258:	4413      	add	r3, r2
 800925a:	b29b      	uxth	r3, r3
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009260:	461a      	mov	r2, r3
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	625a      	str	r2, [r3, #36]	@ 0x24
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800926a:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800926c:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	b29a      	uxth	r2, r3
 8009276:	4b11      	ldr	r3, [pc, #68]	@ (80092bc <dfifo_device_init+0xa8>)
 8009278:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <dfifo_device_init+0xa8>)
 8009282:	889a      	ldrh	r2, [r3, #4]
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	7a1b      	ldrb	r3, [r3, #8]
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	b29b      	uxth	r3, r3
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	b29a      	uxth	r2, r3
 8009290:	4b0a      	ldr	r3, [pc, #40]	@ (80092bc <dfifo_device_init+0xa8>)
 8009292:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8009294:	4b09      	ldr	r3, [pc, #36]	@ (80092bc <dfifo_device_init+0xa8>)
 8009296:	889b      	ldrh	r3, [r3, #4]
 8009298:	461a      	mov	r2, r3
 800929a:	4613      	mov	r3, r2
 800929c:	041b      	lsls	r3, r3, #16
 800929e:	441a      	add	r2, r3
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2240      	movs	r2, #64	@ 0x40
 80092a8:	2180      	movs	r1, #128	@ 0x80
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fed0 	bl	8009050 <dfifo_alloc>
}
 80092b0:	bf00      	nop
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	0800b088 	.word	0x0800b088
 80092bc:	24000ae0 	.word	0x24000ae0

080092c0 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 80092c0:	b480      	push	{r7}
 80092c2:	b08b      	sub	sp, #44	@ 0x2c
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80092d0:	7c7b      	ldrb	r3, [r7, #17]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d901      	bls.n	80092da <edpt_activate+0x1a>
    rhport = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80092da:	7c7b      	ldrb	r3, [r7, #17]
 80092dc:	4a45      	ldr	r2, [pc, #276]	@ (80093f4 <edpt_activate+0x134>)
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	4413      	add	r3, r2
 80092e2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	789b      	ldrb	r3, [r3, #2]
 80092ea:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80092ec:	7cbb      	ldrb	r3, [r7, #18]
 80092ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	789b      	ldrb	r3, [r3, #2]
 80092fc:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80092fe:	7cfb      	ldrb	r3, [r7, #19]
 8009300:	09db      	lsrs	r3, r3, #7
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009308:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800930c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009310:	0052      	lsls	r2, r2, #1
 8009312:	4413      	add	r3, r2
 8009314:	011b      	lsls	r3, r3, #4
 8009316:	4a38      	ldr	r2, [pc, #224]	@ (80093f8 <edpt_activate+0x138>)
 8009318:	4413      	add	r3, r2
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	889b      	ldrh	r3, [r3, #4]
 8009324:	b29b      	uxth	r3, r3
 8009326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800932a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	799a      	ldrb	r2, [r3, #6]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	895b      	ldrh	r3, [r3, #10]
 8009340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009344:	b29a      	uxth	r2, r3
 8009346:	89bb      	ldrh	r3, [r7, #12]
 8009348:	f362 030a 	bfi	r3, r2, #0, #11
 800934c:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 800934e:	7b7b      	ldrb	r3, [r7, #13]
 8009350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009354:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	78db      	ldrb	r3, [r3, #3]
 800935a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800935e:	b2da      	uxtb	r2, r3
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	f362 0383 	bfi	r3, r2, #2, #2
 8009366:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d003      	beq.n	800937e <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	f043 0310 	orr.w	r3, r3, #16
 800937c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800937e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009382:	2b01      	cmp	r3, #1
 8009384:	d108      	bne.n	8009398 <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 8009386:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	b2da      	uxtb	r2, r3
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	f362 1389 	bfi	r3, r2, #6, #4
 8009396:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009398:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800939c:	2b01      	cmp	r3, #1
 800939e:	bf14      	ite	ne
 80093a0:	2301      	movne	r3, #1
 80093a2:	2300      	moveq	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093ac:	0112      	lsls	r2, r2, #4
 80093ae:	4413      	add	r3, r2
 80093b0:	3348      	adds	r3, #72	@ 0x48
 80093b2:	015b      	lsls	r3, r3, #5
 80093b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b6:	4413      	add	r3, r2
 80093b8:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 80093c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 80093c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093ca:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80093ce:	2901      	cmp	r1, #1
 80093d0:	d101      	bne.n	80093d6 <edpt_activate+0x116>
 80093d2:	2100      	movs	r1, #0
 80093d4:	e000      	b.n	80093d8 <edpt_activate+0x118>
 80093d6:	2110      	movs	r1, #16
 80093d8:	440b      	add	r3, r1
 80093da:	2101      	movs	r1, #1
 80093dc:	fa01 f303 	lsl.w	r3, r1, r3
 80093e0:	431a      	orrs	r2, r3
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 80093e8:	bf00      	nop
 80093ea:	372c      	adds	r7, #44	@ 0x2c
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	0800b088 	.word	0x0800b088
 80093f8:	240009c0 	.word	0x240009c0

080093fc <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	@ 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	460b      	mov	r3, r1
 8009408:	71bb      	strb	r3, [r7, #6]
 800940a:	4613      	mov	r3, r2
 800940c:	717b      	strb	r3, [r7, #5]
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009412:	7c7b      	ldrb	r3, [r7, #17]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d901      	bls.n	800941c <edpt_disable+0x20>
    rhport = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800941c:	7c7b      	ldrb	r3, [r7, #17]
 800941e:	4a5b      	ldr	r2, [pc, #364]	@ (800958c <edpt_disable+0x190>)
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	4413      	add	r3, r2
 8009424:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	79bb      	ldrb	r3, [r7, #6]
 800942a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800942c:	7cbb      	ldrb	r3, [r7, #18]
 800942e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009432:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009434:	76fb      	strb	r3, [r7, #27]
 8009436:	79bb      	ldrb	r3, [r7, #6]
 8009438:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800943a:	7cfb      	ldrb	r3, [r7, #19]
 800943c:	09db      	lsrs	r3, r3, #7
 800943e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8009440:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009442:	7ebb      	ldrb	r3, [r7, #26]
 8009444:	2b01      	cmp	r3, #1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	7efb      	ldrb	r3, [r7, #27]
 8009452:	0112      	lsls	r2, r2, #4
 8009454:	4413      	add	r3, r2
 8009456:	3348      	adds	r3, #72	@ 0x48
 8009458:	015b      	lsls	r3, r3, #5
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8009460:	7ebb      	ldrb	r3, [r7, #26]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d149      	bne.n	80094fa <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8009466:	7efb      	ldrb	r3, [r7, #27]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <edpt_disable+0x78>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0d      	blt.n	8009490 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	797a      	ldrb	r2, [r7, #5]
 800947a:	2a00      	cmp	r2, #0
 800947c:	d002      	beq.n	8009484 <edpt_disable+0x88>
 800947e:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8009482:	e001      	b.n	8009488 <edpt_disable+0x8c>
 8009484:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009488:	431a      	orrs	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e022      	b.n	80094d6 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800949c:	bf00      	nop
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0f9      	beq.n	800949e <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	797a      	ldrb	r2, [r7, #5]
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d001      	beq.n	80094b8 <edpt_disable+0xbc>
 80094b4:	4a36      	ldr	r2, [pc, #216]	@ (8009590 <edpt_disable+0x194>)
 80094b6:	e001      	b.n	80094bc <edpt_disable+0xc0>
 80094b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80094bc:	431a      	orrs	r2, r3
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 80094c2:	bf00      	nop
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0f9      	beq.n	80094c4 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2202      	movs	r2, #2
 80094d4:	609a      	str	r2, [r3, #8]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	7efb      	ldrb	r3, [r7, #27]
 80094dc:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	019b      	lsls	r3, r3, #6
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80094ea:	bf00      	nop
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f9      	bne.n	80094ec <edpt_disable+0xf0>
}
 80094f8:	e041      	b.n	800957e <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 80094fa:	7efb      	ldrb	r3, [r7, #27]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <edpt_disable+0x10c>
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	db0c      	blt.n	8009522 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	797a      	ldrb	r2, [r7, #5]
 800950e:	2a00      	cmp	r2, #0
 8009510:	d002      	beq.n	8009518 <edpt_disable+0x11c>
 8009512:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009516:	e000      	b.n	800951a <edpt_disable+0x11e>
 8009518:	2200      	movs	r2, #0
 800951a:	431a      	orrs	r2, r3
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	e02d      	b.n	800957e <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009528:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8009532:	bf00      	nop
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f9      	beq.n	8009534 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	797a      	ldrb	r2, [r7, #5]
 8009546:	2a00      	cmp	r2, #0
 8009548:	d001      	beq.n	800954e <edpt_disable+0x152>
 800954a:	4a11      	ldr	r2, [pc, #68]	@ (8009590 <edpt_disable+0x194>)
 800954c:	e001      	b.n	8009552 <edpt_disable+0x156>
 800954e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009552:	431a      	orrs	r2, r3
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009558:	bf00      	nop
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f9      	beq.n	800955a <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2202      	movs	r2, #2
 800956a:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009572:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3724      	adds	r7, #36	@ 0x24
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	0800b088 	.word	0x0800b088
 8009590:	40200000 	.word	0x40200000

08009594 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8009594:	b580      	push	{r7, lr}
 8009596:	b08e      	sub	sp, #56	@ 0x38
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	71fb      	strb	r3, [r7, #7]
 800959e:	460b      	mov	r3, r1
 80095a0:	71bb      	strb	r3, [r7, #6]
 80095a2:	4613      	mov	r3, r2
 80095a4:	717b      	strb	r3, [r7, #5]
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80095ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d902      	bls.n	80095ba <edpt_schedule_packets+0x26>
    rhport = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80095ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80095be:	4a63      	ldr	r2, [pc, #396]	@ (800974c <edpt_schedule_packets+0x1b8>)
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	4413      	add	r3, r2
 80095c4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80095c6:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80095c8:	79ba      	ldrb	r2, [r7, #6]
 80095ca:	797b      	ldrb	r3, [r7, #5]
 80095cc:	0052      	lsls	r2, r2, #1
 80095ce:	4413      	add	r3, r2
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	4a5f      	ldr	r2, [pc, #380]	@ (8009750 <edpt_schedule_packets+0x1bc>)
 80095d4:	4413      	add	r3, r2
 80095d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80095d8:	797b      	ldrb	r3, [r7, #5]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	bf14      	ite	ne
 80095de:	2301      	movne	r3, #1
 80095e0:	2300      	moveq	r3, #0
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	79bb      	ldrb	r3, [r7, #6]
 80095e8:	0112      	lsls	r2, r2, #4
 80095ea:	4413      	add	r3, r2
 80095ec:	3348      	adds	r3, #72	@ 0x48
 80095ee:	015b      	lsls	r3, r3, #5
 80095f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f2:	4413      	add	r3, r2
 80095f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 80095f6:	79bb      	ldrb	r3, [r7, #6]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d11c      	bne.n	8009636 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 80095fc:	797b      	ldrb	r3, [r7, #5]
 80095fe:	4a55      	ldr	r2, [pc, #340]	@ (8009754 <edpt_schedule_packets+0x1c0>)
 8009600:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	895b      	ldrh	r3, [r3, #10]
 8009608:	843a      	strh	r2, [r7, #32]
 800960a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800960c:	8c3a      	ldrh	r2, [r7, #32]
 800960e:	8bfb      	ldrh	r3, [r7, #30]
 8009610:	4293      	cmp	r3, r2
 8009612:	bf28      	it	cs
 8009614:	4613      	movcs	r3, r2
 8009616:	b29b      	uxth	r3, r3
 8009618:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800961a:	797b      	ldrb	r3, [r7, #5]
 800961c:	4a4d      	ldr	r2, [pc, #308]	@ (8009754 <edpt_schedule_packets+0x1c0>)
 800961e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009622:	797b      	ldrb	r3, [r7, #5]
 8009624:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009626:	1a8a      	subs	r2, r1, r2
 8009628:	b291      	uxth	r1, r2
 800962a:	4a4a      	ldr	r2, [pc, #296]	@ (8009754 <edpt_schedule_packets+0x1c0>)
 800962c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8009630:	2301      	movs	r3, #1
 8009632:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009634:	e014      	b.n	8009660 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8009636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009638:	891b      	ldrh	r3, [r3, #8]
 800963a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800963c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800963e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009640:	8952      	ldrh	r2, [r2, #10]
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4413      	add	r3, r2
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 8009656:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800965c:	2301      	movs	r3, #1
 800965e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 8009664:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009666:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f362 0312 	bfi	r3, r2, #0, #19
 8009670:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 8009672:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009678:	b29a      	uxth	r2, r3
 800967a:	89fb      	ldrh	r3, [r7, #14]
 800967c:	f362 03cc 	bfi	r3, r2, #3, #10
 8009680:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 800968e:	7afb      	ldrb	r3, [r7, #11]
 8009690:	f043 0304 	orr.w	r3, r3, #4
 8009694:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 8009696:	7afb      	ldrb	r3, [r7, #11]
 8009698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969c:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800969e:	7abb      	ldrb	r3, [r7, #10]
 80096a0:	f003 030c 	and.w	r3, r3, #12
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d118      	bne.n	80096dc <edpt_schedule_packets+0x148>
 80096aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ac:	7b1b      	ldrb	r3, [r3, #12]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d114      	bne.n	80096dc <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80096b8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 80096ca:	7afb      	ldrb	r3, [r7, #11]
 80096cc:	f043 0310 	orr.w	r3, r3, #16
 80096d0:	72fb      	strb	r3, [r7, #11]
 80096d2:	e003      	b.n	80096dc <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	f043 0320 	orr.w	r3, r3, #32
 80096da:	72fb      	strb	r3, [r7, #11]
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80096e0:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 80096e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 80096e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 80096ee:	797b      	ldrb	r3, [r7, #5]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d109      	bne.n	8009708 <edpt_schedule_packets+0x174>
 80096f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d006      	beq.n	8009708 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 80096fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7fd fdfb 	bl	80072fe <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8009708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009710:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009716:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8009718:	e013      	b.n	8009742 <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009720:	797b      	ldrb	r3, [r7, #5]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d10d      	bne.n	8009742 <edpt_schedule_packets+0x1ae>
 8009726:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 800972c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009732:	79ba      	ldrb	r2, [r7, #6]
 8009734:	2101      	movs	r1, #1
 8009736:	fa01 f202 	lsl.w	r2, r1, r2
 800973a:	431a      	orrs	r2, r3
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8009742:	bf00      	nop
 8009744:	3738      	adds	r7, #56	@ 0x38
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	0800b088 	.word	0x0800b088
 8009750:	240009c0 	.word	0x240009c0
 8009754:	24000ae0 	.word	0x24000ae0

08009758 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b08a      	sub	sp, #40	@ 0x28
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d901      	bls.n	8009772 <dcd_init+0x1a>
    rhport = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	4a3e      	ldr	r2, [pc, #248]	@ (8009870 <dcd_init+0x118>)
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	4413      	add	r3, r2
 800977a:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800977c:	623b      	str	r3, [r7, #32]

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800977e:	2208      	movs	r2, #8
 8009780:	2100      	movs	r1, #0
 8009782:	483c      	ldr	r0, [pc, #240]	@ (8009874 <dcd_init+0x11c>)
 8009784:	f001 fb9f 	bl	800aec6 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8009788:	2101      	movs	r1, #1
 800978a:	6a38      	ldr	r0, [r7, #32]
 800978c:	f001 f932 	bl	800a9f4 <dwc2_core_is_highspeed>
 8009790:	4603      	mov	r3, r0
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009798:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800979a:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800979c:	7fba      	ldrb	r2, [r7, #30]
 800979e:	7ff9      	ldrb	r1, [r7, #31]
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 f942 	bl	800aa2c <dwc2_core_init>
 80097a8:	4603      	mov	r3, r0
 80097aa:	f083 0301 	eor.w	r3, r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <dcd_init+0x72>
 80097b4:	4b30      	ldr	r3, [pc, #192]	@ (8009878 <dcd_init+0x120>)
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d000      	beq.n	80097c6 <dcd_init+0x6e>
 80097c4:	be00      	bkpt	0x0000
 80097c6:	2300      	movs	r3, #0
 80097c8:	e04d      	b.n	8009866 <dcd_init+0x10e>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_highspeed) {
 80097d6:	7ffb      	ldrb	r3, [r7, #31]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <dcd_init+0x9c>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097e0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d108      	bne.n	80097fc <dcd_init+0xa4>
      dcfg |= DCFG_XCVRDLY;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f2:	e003      	b.n	80097fc <dcd_init+0xa4>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f6:	f043 0303 	orr.w	r3, r3, #3
 80097fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	f043 0304 	orr.w	r3, r3, #4
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
  dwc2->dcfg = dcfg;
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009808:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f8e4 	bl	80099dc <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800981c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800982c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	601a      	str	r2, [r3, #0]

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	4b10      	ldr	r3, [pc, #64]	@ (800987c <dcd_init+0x124>)
 800983a:	4313      	orrs	r3, r2
 800983c:	6a3a      	ldr	r2, [r7, #32]
 800983e:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800984c:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	f043 0301 	orr.w	r3, r3, #1
 8009854:	61bb      	str	r3, [r7, #24]
  dwc2->gahbcfg = gahbcfg;
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f89a 	bl	8009998 <dcd_connect>
  return true;
 8009864:	2301      	movs	r3, #1
}
 8009866:	4618      	mov	r0, r3
 8009868:	3728      	adds	r7, #40	@ 0x28
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	0800b088 	.word	0x0800b088
 8009874:	24000ae0 	.word	0x24000ae0
 8009878:	e000edf0 	.word	0xe000edf0
 800987c:	80003804 	.word	0x80003804

08009880 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	71fb      	strb	r3, [r7, #7]
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	73fb      	strb	r3, [r7, #15]
 800988e:	2301      	movs	r3, #1
 8009890:	73bb      	strb	r3, [r7, #14]
 8009892:	2301      	movs	r3, #1
 8009894:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	4a0c      	ldr	r2, [pc, #48]	@ (80098cc <dcd_int_enable+0x4c>)
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	4413      	add	r3, r2
 800989e:	3304      	adds	r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 80098a4:	7b7b      	ldrb	r3, [r7, #13]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 80098aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fb50 	bl	8008f54 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 80098b4:	e004      	b.n	80098c0 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 80098b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff fb68 	bl	8008f90 <__NVIC_DisableIRQ>
}
 80098c0:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	0800b088 	.word	0x0800b088

080098d0 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	73fb      	strb	r3, [r7, #15]
 80098de:	2301      	movs	r3, #1
 80098e0:	73bb      	strb	r3, [r7, #14]
 80098e2:	2300      	movs	r3, #0
 80098e4:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	4a0c      	ldr	r2, [pc, #48]	@ (800991c <dcd_int_disable+0x4c>)
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	4413      	add	r3, r2
 80098ee:	3304      	adds	r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 80098f4:	7b7b      	ldrb	r3, [r7, #13]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 80098fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fb28 	bl	8008f54 <__NVIC_EnableIRQ>
}
 8009904:	e004      	b.n	8009910 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 8009906:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fb40 	bl	8008f90 <__NVIC_DisableIRQ>
}
 8009910:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	0800b088 	.word	0x0800b088

08009920 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	460a      	mov	r2, r1
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	71bb      	strb	r3, [r7, #6]
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009934:	7a7b      	ldrb	r3, [r7, #9]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d901      	bls.n	800993e <dcd_set_address+0x1e>
    rhport = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800993e:	7a7b      	ldrb	r3, [r7, #9]
 8009940:	4a14      	ldr	r2, [pc, #80]	@ (8009994 <dcd_set_address+0x74>)
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	4413      	add	r3, r2
 8009946:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009948:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009950:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8009954:	79bb      	ldrb	r3, [r7, #6]
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	431a      	orrs	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8009960:	2300      	movs	r3, #0
 8009962:	72fb      	strb	r3, [r7, #11]
 8009964:	2301      	movs	r3, #1
 8009966:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8009968:	7abb      	ldrb	r3, [r7, #10]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <dcd_set_address+0x54>
 800996e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8009972:	e000      	b.n	8009976 <dcd_set_address+0x56>
 8009974:	2300      	movs	r3, #0
 8009976:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800997a:	4313      	orrs	r3, r2
 800997c:	b25b      	sxtb	r3, r3
 800997e:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8009980:	79f8      	ldrb	r0, [r7, #7]
 8009982:	2300      	movs	r3, #0
 8009984:	2200      	movs	r2, #0
 8009986:	f000 f93f 	bl	8009c08 <dcd_edpt_xfer>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	0800b088 	.word	0x0800b088

08009998 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	71fb      	strb	r3, [r7, #7]
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d901      	bls.n	80099b0 <dcd_connect+0x18>
    rhport = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	4a09      	ldr	r2, [pc, #36]	@ (80099d8 <dcd_connect+0x40>)
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	4413      	add	r3, r2
 80099b8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099ba:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80099c2:	f023 0202 	bic.w	r2, r3, #2
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	0800b088 	.word	0x0800b088

080099dc <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d901      	bls.n	80099f4 <dcd_disconnect+0x18>
    rhport = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	4a09      	ldr	r2, [pc, #36]	@ (8009a1c <dcd_disconnect+0x40>)
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	4413      	add	r3, r2
 80099fc:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099fe:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	0800b088 	.word	0x0800b088

08009a20 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	460a      	mov	r2, r1
 8009a2a:	71fb      	strb	r3, [r7, #7]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71bb      	strb	r3, [r7, #6]
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d901      	bls.n	8009a3e <dcd_sof_enable+0x1e>
    rhport = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	4a10      	ldr	r2, [pc, #64]	@ (8009a84 <dcd_sof_enable+0x64>)
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	4413      	add	r3, r2
 8009a46:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a48:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 8009a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8009a88 <dcd_sof_enable+0x68>)
 8009a4c:	79bb      	ldrb	r3, [r7, #6]
 8009a4e:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8009a50:	79bb      	ldrb	r3, [r7, #6]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	f043 0208 	orr.w	r2, r3, #8
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 8009a68:	e005      	b.n	8009a76 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f023 0208 	bic.w	r2, r3, #8
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	619a      	str	r2, [r3, #24]
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	0800b088 	.word	0x0800b088
 8009a88:	24000ae0 	.word	0x24000ae0

08009a8c <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	7899      	ldrb	r1, [r3, #2]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	889b      	ldrh	r3, [r3, #4]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff face 	bl	8009050 <dfifo_alloc>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f083 0301 	eor.w	r3, r3, #1
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <dcd_edpt_open+0x4a>
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8009aec <dcd_edpt_open+0x60>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d000      	beq.n	8009ad2 <dcd_edpt_open+0x46>
 8009ad0:	be00      	bkpt	0x0000
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e005      	b.n	8009ae2 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 8009ad6:	79fb      	ldrb	r3, [r7, #7]
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff fbf0 	bl	80092c0 <edpt_activate>
  return true;
 8009ae0:	2301      	movs	r3, #1
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	e000edf0 	.word	0xe000edf0

08009af0 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08a      	sub	sp, #40	@ 0x28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d901      	bls.n	8009b08 <dcd_edpt_close_all+0x18>
    rhport = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8009bfc <dcd_edpt_close_all+0x10c>)
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	4413      	add	r3, r2
 8009b10:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009b12:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	4a39      	ldr	r2, [pc, #228]	@ (8009bfc <dcd_edpt_close_all+0x10c>)
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	77fb      	strb	r3, [r7, #31]

  _dcd_data.allocated_epin_count = 0;
 8009b22:	4b37      	ldr	r3, [pc, #220]	@ (8009c00 <dcd_edpt_close_all+0x110>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009b2e:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b38:	e034      	b.n	8009ba4 <dcd_edpt_close_all+0xb4>
    for (uint8_t d = 0; d < 2; d++) {
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b40:	e027      	b.n	8009b92 <dcd_edpt_close_all+0xa2>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8009b42:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009b46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b4a:	0112      	lsls	r2, r2, #4
 8009b4c:	4413      	add	r3, r2
 8009b4e:	3348      	adds	r3, #72	@ 0x48
 8009b50:	015b      	lsls	r3, r3, #5
 8009b52:	6a3a      	ldr	r2, [r7, #32]
 8009b54:	4413      	add	r3, r2
 8009b56:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da05      	bge.n	8009b6c <dcd_edpt_close_all+0x7c>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 8009b6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b74:	f1c3 0301 	rsb	r3, r3, #1
 8009b78:	4922      	ldr	r1, [pc, #136]	@ (8009c04 <dcd_edpt_close_all+0x114>)
 8009b7a:	0052      	lsls	r2, r2, #1
 8009b7c:	4413      	add	r3, r2
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	440b      	add	r3, r1
 8009b82:	330a      	adds	r3, #10
 8009b84:	2200      	movs	r2, #0
 8009b86:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8009b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d9d3      	bls.n	8009b42 <dcd_edpt_close_all+0x52>
  for (uint8_t n = 1; n < ep_count; n++) {
 8009b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ba4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ba8:	7ffb      	ldrb	r3, [r7, #31]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d3c5      	bcc.n	8009b3a <dcd_edpt_close_all+0x4a>
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	019b      	lsls	r3, r3, #6
 8009bba:	f043 0220 	orr.w	r2, r3, #32
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009bc2:	bf00      	nop
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1f9      	bne.n	8009bc4 <dcd_edpt_close_all+0xd4>
}
 8009bd0:	bf00      	nop
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2210      	movs	r2, #16
 8009bda:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009bdc:	bf00      	nop
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f003 0310 	and.w	r3, r3, #16
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1f9      	bne.n	8009bde <dcd_edpt_close_all+0xee>
}
 8009bea:	bf00      	nop
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  dfifo_device_init(rhport); // re-init dfifo
 8009bec:	79fb      	ldrb	r3, [r7, #7]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff fb10 	bl	8009214 <dfifo_device_init>
}
 8009bf4:	bf00      	nop
 8009bf6:	3728      	adds	r7, #40	@ 0x28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	0800b088 	.word	0x0800b088
 8009c00:	24000ae0 	.word	0x24000ae0
 8009c04:	240009c0 	.word	0x240009c0

08009c08 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	603a      	str	r2, [r7, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	71fb      	strb	r3, [r7, #7]
 8009c16:	460b      	mov	r3, r1
 8009c18:	71bb      	strb	r3, [r7, #6]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80bb      	strh	r3, [r7, #4]
 8009c1e:	79bb      	ldrb	r3, [r7, #6]
 8009c20:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c28:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009c2a:	75fb      	strb	r3, [r7, #23]
 8009c2c:	79bb      	ldrb	r3, [r7, #6]
 8009c2e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	09db      	lsrs	r3, r3, #7
 8009c34:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009c36:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009c38:	7dfa      	ldrb	r2, [r7, #23]
 8009c3a:	7dbb      	ldrb	r3, [r7, #22]
 8009c3c:	0052      	lsls	r2, r2, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	4a0f      	ldr	r2, [pc, #60]	@ (8009c80 <dcd_edpt_xfer+0x78>)
 8009c44:	4413      	add	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2200      	movs	r2, #0
 8009c52:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	88ba      	ldrh	r2, [r7, #4]
 8009c58:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 8009c60:	7dbb      	ldrb	r3, [r7, #22]
 8009c62:	4908      	ldr	r1, [pc, #32]	@ (8009c84 <dcd_edpt_xfer+0x7c>)
 8009c64:	88ba      	ldrh	r2, [r7, #4]
 8009c66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 8009c6a:	7dba      	ldrb	r2, [r7, #22]
 8009c6c:	7df9      	ldrb	r1, [r7, #23]
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff fc8f 	bl	8009594 <edpt_schedule_packets>

  return true;
 8009c76:	2301      	movs	r3, #1
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	240009c0 	.word	0x240009c0
 8009c84:	24000ae0 	.word	0x24000ae0

08009c88 <dcd_edpt_stall>:
  edpt_schedule_packets(rhport, epnum, dir);

  return true;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460a      	mov	r2, r1
 8009c92:	71fb      	strb	r3, [r7, #7]
 8009c94:	4613      	mov	r3, r2
 8009c96:	71bb      	strb	r3, [r7, #6]
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c9c:	7cbb      	ldrb	r3, [r7, #18]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d901      	bls.n	8009ca6 <dcd_edpt_stall+0x1e>
    rhport = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009ca6:	7cbb      	ldrb	r3, [r7, #18]
 8009ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8009ce8 <dcd_edpt_stall+0x60>)
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	4413      	add	r3, r2
 8009cae:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009cb0:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8009cb2:	79b9      	ldrb	r1, [r7, #6]
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fb9f 	bl	80093fc <edpt_disable>
 8009cbe:	79bb      	ldrb	r3, [r7, #6]
 8009cc0:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009cc2:	7cfb      	ldrb	r3, [r7, #19]
 8009cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc8:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d108      	bne.n	8009ce0 <dcd_edpt_stall+0x58>
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009cd2:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <dcd_edpt_stall+0x58>
    dma_setup_prepare(rhport);
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff f97c 	bl	8008fd8 <dma_setup_prepare>
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	0800b088 	.word	0x0800b088

08009cec <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	71fb      	strb	r3, [r7, #7]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	71bb      	strb	r3, [r7, #6]
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009d00:	7a7b      	ldrb	r3, [r7, #9]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d901      	bls.n	8009d0a <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009d0a:	7a7b      	ldrb	r3, [r7, #9]
 8009d0c:	4a19      	ldr	r2, [pc, #100]	@ (8009d74 <dcd_edpt_clear_stall+0x88>)
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	4413      	add	r3, r2
 8009d12:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	79bb      	ldrb	r3, [r7, #6]
 8009d18:	72bb      	strb	r3, [r7, #10]
 8009d1a:	7abb      	ldrb	r3, [r7, #10]
 8009d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d20:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009d22:	74fb      	strb	r3, [r7, #19]
 8009d24:	79bb      	ldrb	r3, [r7, #6]
 8009d26:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	09db      	lsrs	r3, r3, #7
 8009d2c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009d2e:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009d30:	7cbb      	ldrb	r3, [r7, #18]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	bf14      	ite	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	7cfb      	ldrb	r3, [r7, #19]
 8009d40:	0112      	lsls	r2, r2, #4
 8009d42:	4413      	add	r3, r2
 8009d44:	3348      	adds	r3, #72	@ 0x48
 8009d46:	015b      	lsls	r3, r3, #5
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	601a      	str	r2, [r3, #0]
}
 8009d66:	bf00      	nop
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	0800b088 	.word	0x0800b088

08009d78 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08a      	sub	sp, #40	@ 0x28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	71fb      	strb	r3, [r7, #7]
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009d86:	7fbb      	ldrb	r3, [r7, #30]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d901      	bls.n	8009d90 <handle_bus_reset+0x18>
    rhport = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009d90:	7fbb      	ldrb	r3, [r7, #30]
 8009d92:	4a63      	ldr	r2, [pc, #396]	@ (8009f20 <handle_bus_reset+0x1a8>)
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	4413      	add	r3, r2
 8009d98:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009d9a:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009da0:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	3301      	adds	r3, #1
 8009da8:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8009daa:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8009dae:	2100      	movs	r1, #0
 8009db0:	485c      	ldr	r0, [pc, #368]	@ (8009f24 <handle_bus_reset+0x1ac>)
 8009db2:	f001 f888 	bl	800aec6 <memset>

  _dcd_data.sof_en = false;
 8009db6:	4b5c      	ldr	r3, [pc, #368]	@ (8009f28 <handle_bus_reset+0x1b0>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8009dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8009f28 <handle_bus_reset+0x1b0>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009dc8:	e014      	b.n	8009df4 <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8009dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dce:	6a3a      	ldr	r2, [r7, #32]
 8009dd0:	3358      	adds	r3, #88	@ 0x58
 8009dd2:	015b      	lsls	r3, r3, #5
 8009dd4:	4413      	add	r3, r2
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ddc:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009de0:	6a39      	ldr	r1, [r7, #32]
 8009de2:	3358      	adds	r3, #88	@ 0x58
 8009de4:	015b      	lsls	r3, r3, #5
 8009de6:	440b      	add	r3, r1
 8009de8:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dee:	3301      	adds	r3, #1
 8009df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009df4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009df8:	7ffb      	ldrb	r3, [r7, #31]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d3e5      	bcc.n	8009dca <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e04:	e01d      	b.n	8009e42 <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8009e06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e0a:	6a3a      	ldr	r2, [r7, #32]
 8009e0c:	3348      	adds	r3, #72	@ 0x48
 8009e0e:	015b      	lsls	r3, r3, #5
 8009e10:	4413      	add	r3, r2
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	da0f      	bge.n	8009e38 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8009e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e1c:	6a3a      	ldr	r2, [r7, #32]
 8009e1e:	3348      	adds	r3, #72	@ 0x48
 8009e20:	015b      	lsls	r3, r3, #5
 8009e22:	4413      	add	r3, r2
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e2a:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8009e2e:	6a39      	ldr	r1, [r7, #32]
 8009e30:	3348      	adds	r3, #72	@ 0x48
 8009e32:	015b      	lsls	r3, r3, #5
 8009e34:	440b      	add	r3, r1
 8009e36:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009e38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e42:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e46:	7ffb      	ldrb	r3, [r7, #31]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d3dc      	bcc.n	8009e06 <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009e52:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	2209      	movs	r2, #9
 8009e5a:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	2209      	movs	r2, #9
 8009e62:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	2310      	movs	r3, #16
 8009e6c:	73fb      	strb	r3, [r7, #15]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	019b      	lsls	r3, r3, #6
 8009e72:	f043 0220 	orr.w	r2, r3, #32
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009e7a:	bf00      	nop
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1f9      	bne.n	8009e7c <handle_bus_reset+0x104>
}
 8009e88:	bf00      	nop
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	617b      	str	r3, [r7, #20]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2210      	movs	r2, #16
 8009e92:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009e94:	bf00      	nop
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f9      	bne.n	8009e96 <handle_bus_reset+0x11e>
}
 8009ea2:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f9b4 	bl	8009214 <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 8009eac:	6a3a      	ldr	r2, [r7, #32]
 8009eae:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 8009eb2:	f36f 130a 	bfc	r3, #4, #7
 8009eb6:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8009ec0:	f023 0203 	bic.w	r2, r3, #3
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009ed0:	f023 0203 	bic.w	r2, r3, #3
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8009eda:	4b12      	ldr	r3, [pc, #72]	@ (8009f24 <handle_bus_reset+0x1ac>)
 8009edc:	2240      	movs	r2, #64	@ 0x40
 8009ede:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8009ee0:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <handle_bus_reset+0x1ac>)
 8009ee2:	2240      	movs	r2, #64	@ 0x40
 8009ee4:	835a      	strh	r2, [r3, #26]
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009eea:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff f870 	bl	8008fd8 <dma_setup_prepare>
 8009ef8:	e007      	b.n	8009f0a <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8009f00:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	619a      	str	r2, [r3, #24]
}
 8009f16:	bf00      	nop
 8009f18:	3728      	adds	r7, #40	@ 0x28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800b088 	.word	0x0800b088
 8009f24:	240009c0 	.word	0x240009c0
 8009f28:	24000ae0 	.word	0x24000ae0

08009f2c <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	71fb      	strb	r3, [r7, #7]
 8009f36:	79fb      	ldrb	r3, [r7, #7]
 8009f38:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d901      	bls.n	8009f44 <handle_enum_done+0x18>
    rhport = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	4a18      	ldr	r2, [pc, #96]	@ (8009fa8 <handle_enum_done+0x7c>)
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	4413      	add	r3, r2
 8009f4c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009f4e:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009f56:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <handle_enum_done+0x3a>
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d003      	beq.n	8009f6c <handle_enum_done+0x40>
 8009f64:	e005      	b.n	8009f72 <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8009f66:	2302      	movs	r3, #2
 8009f68:	77fb      	strb	r3, [r7, #31]
    break;
 8009f6a:	e005      	b.n	8009f78 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	77fb      	strb	r3, [r7, #31]
    break;
 8009f70:	e002      	b.n	8009f78 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	77fb      	strb	r3, [r7, #31]
    break;
 8009f76:	bf00      	nop
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	75bb      	strb	r3, [r7, #22]
 8009f7c:	7ffb      	ldrb	r3, [r7, #31]
 8009f7e:	757b      	strb	r3, [r7, #21]
 8009f80:	2301      	movs	r3, #1
 8009f82:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009f84:	7dbb      	ldrb	r3, [r7, #22]
 8009f86:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 8009f8c:	7d7b      	ldrb	r3, [r7, #21]
 8009f8e:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8009f90:	7d3a      	ldrb	r2, [r7, #20]
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe f9cb 	bl	8008334 <dcd_event_handler>
}
 8009f9e:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8009fa0:	bf00      	nop
 8009fa2:	3720      	adds	r7, #32
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	0800b088 	.word	0x0800b088

08009fac <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08c      	sub	sp, #48	@ 0x30
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009fba:	7cfb      	ldrb	r3, [r7, #19]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d901      	bls.n	8009fc4 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009fc4:	7cfb      	ldrb	r3, [r7, #19]
 8009fc6:	4a48      	ldr	r2, [pc, #288]	@ (800a0e8 <handle_rxflvl_irq+0x13c>)
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	4413      	add	r3, r2
 8009fcc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 8009fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 8009fde:	7b3b      	ldrb	r3, [r7, #12]
 8009fe0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8009fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fee:	3358      	adds	r3, #88	@ 0x58
 8009ff0:	015b      	lsls	r3, r3, #5
 8009ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff4:	4413      	add	r3, r2
 8009ff6:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	3b01      	subs	r3, #1
 800a002:	2b05      	cmp	r3, #5
 800a004:	d868      	bhi.n	800a0d8 <handle_rxflvl_irq+0x12c>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <handle_rxflvl_irq+0x60>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a04b 	.word	0x0800a04b
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a03d 	.word	0x0800a03d
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a025 	.word	0x0800a025
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800a024:	4b31      	ldr	r3, [pc, #196]	@ (800a0ec <handle_rxflvl_irq+0x140>)
 800a026:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	3304      	adds	r3, #4
 800a034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	601a      	str	r2, [r3, #0]
      break;
 800a03a:	e050      	b.n	800a0de <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	611a      	str	r2, [r3, #16]
      break;
 800a048:	e049      	b.n	800a0de <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 800a04a:	89bb      	ldrh	r3, [r7, #12]
 800a04c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800a050:	b29b      	uxth	r3, r3
 800a052:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a058:	015b      	lsls	r3, r3, #5
 800a05a:	4a25      	ldr	r2, [pc, #148]	@ (800a0f0 <handle_rxflvl_irq+0x144>)
 800a05c:	4413      	add	r3, r2
 800a05e:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800a060:	8b7b      	ldrh	r3, [r7, #26]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d03a      	beq.n	800a0dc <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	8b7a      	ldrh	r2, [r7, #26]
 800a074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a076:	4618      	mov	r0, r3
 800a078:	f7fd f8b6 	bl	80071e8 <tu_fifo_write_n_const_addr_full_words>
 800a07c:	e00c      	b.n	800a098 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	8b7a      	ldrh	r2, [r7, #26]
 800a084:	4619      	mov	r1, r3
 800a086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a088:	f000 fd5c 	bl	800ab44 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	8b7b      	ldrh	r3, [r7, #26]
 800a092:	441a      	add	r2, r3
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	895b      	ldrh	r3, [r3, #10]
 800a09c:	8b7a      	ldrh	r2, [r7, #26]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d21c      	bcs.n	800a0dc <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	891a      	ldrh	r2, [r3, #8]
 800a0ae:	b28b      	uxth	r3, r1
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800a0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10d      	bne.n	800a0dc <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	891a      	ldrh	r2, [r3, #8]
 800a0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f4 <handle_rxflvl_irq+0x148>)
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800a0d0:	4b08      	ldr	r3, [pc, #32]	@ (800a0f4 <handle_rxflvl_irq+0x148>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800a0d6:	e001      	b.n	800a0dc <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800a0d8:	bf00      	nop
 800a0da:	e000      	b.n	800a0de <handle_rxflvl_irq+0x132>
      break;
 800a0dc:	bf00      	nop
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3730      	adds	r7, #48	@ 0x30
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800b088 	.word	0x0800b088
 800a0ec:	24000ae8 	.word	0x24000ae8
 800a0f0:	240009c0 	.word	0x240009c0
 800a0f4:	24000ae0 	.word	0x24000ae0

0800a0f8 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08e      	sub	sp, #56	@ 0x38
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	603a      	str	r2, [r7, #0]
 800a102:	71fb      	strb	r3, [r7, #7]
 800a104:	460b      	mov	r3, r1
 800a106:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800a108:	783b      	ldrb	r3, [r7, #0]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01c      	beq.n	800a14e <handle_epout_slave+0x56>
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a11a:	4b34      	ldr	r3, [pc, #208]	@ (800a1ec <handle_epout_slave+0xf4>)
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a124:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a128:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800a12a:	2306      	movs	r3, #6
 800a12c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800a12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a130:	f107 0318 	add.w	r3, r7, #24
 800a134:	6810      	ldr	r0, [r2, #0]
 800a136:	6851      	ldr	r1, [r2, #4]
 800a138:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800a13a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a13e:	f107 0314 	add.w	r3, r7, #20
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe f8f5 	bl	8008334 <dcd_event_handler>
}
 800a14a:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800a14c:	e04a      	b.n	800a1e4 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800a14e:	783b      	ldrb	r3, [r7, #0]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d044      	beq.n	800a1e4 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800a15a:	783b      	ldrb	r3, [r7, #0]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d13e      	bne.n	800a1e4 <handle_epout_slave+0xec>
 800a166:	787b      	ldrb	r3, [r7, #1]
 800a168:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d138      	bne.n	800a1e4 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a172:	79bb      	ldrb	r3, [r7, #6]
 800a174:	015b      	lsls	r3, r3, #5
 800a176:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f0 <handle_epout_slave+0xf8>)
 800a178:	4413      	add	r3, r2
 800a17a:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800a17c:	79bb      	ldrb	r3, [r7, #6]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <handle_epout_slave+0xa0>
 800a182:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f4 <handle_epout_slave+0xfc>)
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d006      	beq.n	800a198 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800a18a:	79b9      	ldrb	r1, [r7, #6]
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	2200      	movs	r2, #0
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff f9ff 	bl	8009594 <edpt_schedule_packets>
 800a196:	e025      	b.n	800a1e4 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a19a:	891b      	ldrh	r3, [r3, #8]
 800a19c:	461a      	mov	r2, r3
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1a4:	79bb      	ldrb	r3, [r7, #6]
 800a1a6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800a1aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a1b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a1bc:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800a1be:	2307      	movs	r3, #7
 800a1c0:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800a1c2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a1c6:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800a1cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1d0:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800a1d2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe f8a9 	bl	8008334 <dcd_event_handler>
}
 800a1e2:	bf00      	nop
      }
    }
  }
}
 800a1e4:	3738      	adds	r7, #56	@ 0x38
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	24000ae8 	.word	0x24000ae8
 800a1f0:	240009c0 	.word	0x240009c0
 800a1f4:	24000ae0 	.word	0x24000ae0

0800a1f8 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b090      	sub	sp, #64	@ 0x40
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	603a      	str	r2, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
 800a204:	460b      	mov	r3, r1
 800a206:	71bb      	strb	r3, [r7, #6]
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a20e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a212:	2b01      	cmp	r3, #1
 800a214:	d902      	bls.n	800a21c <handle_epin_slave+0x24>
    rhport = 0;
 800a216:	2300      	movs	r3, #0
 800a218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a21c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a220:	4a5d      	ldr	r2, [pc, #372]	@ (800a398 <handle_epin_slave+0x1a0>)
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	4413      	add	r3, r2
 800a226:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a228:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800a22a:	79bb      	ldrb	r3, [r7, #6]
 800a22c:	3348      	adds	r3, #72	@ 0x48
 800a22e:	015b      	lsls	r3, r3, #5
 800a230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a232:	4413      	add	r3, r2
 800a234:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800a236:	79bb      	ldrb	r3, [r7, #6]
 800a238:	015b      	lsls	r3, r3, #5
 800a23a:	3310      	adds	r3, #16
 800a23c:	4a57      	ldr	r2, [pc, #348]	@ (800a39c <handle_epin_slave+0x1a4>)
 800a23e:	4413      	add	r3, r2
 800a240:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 800a242:	783b      	ldrb	r3, [r7, #0]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d033      	beq.n	800a2b6 <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800a24e:	79bb      	ldrb	r3, [r7, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <handle_epin_slave+0x72>
 800a254:	4b52      	ldr	r3, [pc, #328]	@ (800a3a0 <handle_epin_slave+0x1a8>)
 800a256:	885b      	ldrh	r3, [r3, #2]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800a25c:	79b9      	ldrb	r1, [r7, #6]
 800a25e:	79fb      	ldrb	r3, [r7, #7]
 800a260:	2201      	movs	r2, #1
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff f996 	bl	8009594 <edpt_schedule_packets>
 800a268:	e025      	b.n	800a2b6 <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a26a:	79bb      	ldrb	r3, [r7, #6]
 800a26c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a270:	b2d9      	uxtb	r1, r3
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	461a      	mov	r2, r3
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a27e:	460b      	mov	r3, r1
 800a280:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800a284:	61fa      	str	r2, [r7, #28]
 800a286:	2300      	movs	r3, #0
 800a288:	76fb      	strb	r3, [r7, #27]
 800a28a:	2301      	movs	r3, #1
 800a28c:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 800a28e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a292:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800a294:	2307      	movs	r3, #7
 800a296:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800a298:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a29c:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800a2a2:	7efb      	ldrb	r3, [r7, #27]
 800a2a4:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800a2a6:	7eba      	ldrb	r2, [r7, #26]
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe f840 	bl	8008334 <dcd_event_handler>
}
 800a2b4:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800a2b6:	783b      	ldrb	r3, [r7, #0]
 800a2b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d066      	beq.n	800a390 <handle_epin_slave+0x198>
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a2c8:	79ba      	ldrb	r2, [r7, #6]
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	fa01 f202 	lsl.w	r2, r1, r2
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05c      	beq.n	800a390 <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a2e6:	e03b      	b.n	800a360 <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	895a      	ldrh	r2, [r3, #10]
 800a2f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a2f8:	833b      	strh	r3, [r7, #24]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a2fe:	8b3a      	ldrh	r2, [r7, #24]
 800a300:	8afb      	ldrh	r3, [r7, #22]
 800a302:	4293      	cmp	r3, r2
 800a304:	bf28      	it	cs
 800a306:	4613      	movcs	r3, r2
 800a308:	b29b      	uxth	r3, r3
 800a30a:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800a30c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	0099      	lsls	r1, r3, #2
 800a314:	4b23      	ldr	r3, [pc, #140]	@ (800a3a4 <handle_epin_slave+0x1ac>)
 800a316:	400b      	ands	r3, r1
 800a318:	429a      	cmp	r2, r3
 800a31a:	d826      	bhi.n	800a36a <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800a324:	79bb      	ldrb	r3, [r7, #6]
 800a326:	3301      	adds	r3, #1
 800a328:	031b      	lsls	r3, r3, #12
 800a32a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a32c:	4413      	add	r3, r2
 800a32e:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fc feee 	bl	800711a <tu_fifo_read_n_const_addr_full_words>
 800a33e:	e00c      	b.n	800a35a <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800a340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a346:	79b9      	ldrb	r1, [r7, #6]
 800a348:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a34a:	f000 fc4c 	bl	800abe6 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a354:	441a      	add	r2, r3
 800a356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a358:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a35a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a35c:	3301      	adds	r3, #1
 800a35e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a360:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a362:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a364:	429a      	cmp	r2, r3
 800a366:	d3bf      	bcc.n	800a2e8 <handle_epin_slave+0xf0>
 800a368:	e000      	b.n	800a36c <handle_epin_slave+0x174>
        break;
 800a36a:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 800a36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10b      	bne.n	800a390 <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 800a378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a37e:	79ba      	ldrb	r2, [r7, #6]
 800a380:	2101      	movs	r1, #1
 800a382:	fa01 f202 	lsl.w	r2, r1, r2
 800a386:	43d2      	mvns	r2, r2
 800a388:	401a      	ands	r2, r3
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800a390:	bf00      	nop
 800a392:	3740      	adds	r7, #64	@ 0x40
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0800b088 	.word	0x0800b088
 800a39c:	240009c0 	.word	0x240009c0
 800a3a0:	24000ae0 	.word	0x24000ae0
 800a3a4:	0003fffc 	.word	0x0003fffc

0800a3a8 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	@ 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	460a      	mov	r2, r1
 800a3b2:	71fb      	strb	r3, [r7, #7]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71bb      	strb	r3, [r7, #6]
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d901      	bls.n	800a3c6 <handle_ep_irq+0x1e>
    rhport = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4a31      	ldr	r2, [pc, #196]	@ (800a490 <handle_ep_irq+0xe8>)
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	4413      	add	r3, r2
 800a3ce:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a3d6:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a3d8:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3de:	f3c3 2383 	ubfx	r3, r3, #10, #4
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800a3e8:	79bb      	ldrb	r3, [r7, #6]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <handle_ep_irq+0x4a>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e000      	b.n	800a3f4 <handle_ep_irq+0x4c>
 800a3f2:	2310      	movs	r3, #16
 800a3f4:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800a3f6:	79bb      	ldrb	r3, [r7, #6]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	bf14      	ite	ne
 800a3fc:	2301      	movne	r3, #1
 800a3fe:	2300      	moveq	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	025b      	lsls	r3, r3, #9
 800a404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a408:	6a3a      	ldr	r2, [r7, #32]
 800a40a:	4413      	add	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a40e:	2300      	movs	r3, #0
 800a410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a414:	e032      	b.n	800a47c <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800a41c:	7f79      	ldrb	r1, [r7, #29]
 800a41e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a422:	440b      	add	r3, r1
 800a424:	fa22 f303 	lsr.w	r3, r2, r3
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d020      	beq.n	800a472 <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 800a430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a434:	015b      	lsls	r3, r3, #5
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	4413      	add	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800a448:	7ffb      	ldrb	r3, [r7, #31]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d111      	bne.n	800a472 <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800a44e:	79bb      	ldrb	r3, [r7, #6]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d107      	bne.n	800a464 <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800a454:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff fecb 	bl	800a1f8 <handle_epin_slave>
 800a462:	e006      	b.n	800a472 <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800a464:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fe43 	bl	800a0f8 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a476:	3301      	adds	r3, #1
 800a478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a47c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a480:	7fbb      	ldrb	r3, [r7, #30]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3c7      	bcc.n	800a416 <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	3728      	adds	r7, #40	@ 0x28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	0800b088 	.word	0x0800b088

0800a494 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b098      	sub	sp, #96	@ 0x60
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	71fb      	strb	r3, [r7, #7]
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a4a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d902      	bls.n	800a4b2 <dcd_int_handler+0x1e>
    rhport = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a4b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a4b6:	4a7d      	ldr	r2, [pc, #500]	@ (800a6ac <dcd_int_handler+0x218>)
 800a4b8:	011b      	lsls	r3, r3, #4
 800a4ba:	4413      	add	r3, r2
 800a4bc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a4be:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 800a4c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800a4c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800a4d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d007      	beq.n	800a4ea <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800a4da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a4e0:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fc47 	bl	8009d78 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800a4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a4f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a4fa:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fd14 	bl	8009f2c <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800a504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d01d      	beq.n	800a54a <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a514:	615a      	str	r2, [r3, #20]
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a51c:	2304      	movs	r3, #4
 800a51e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800a522:	2301      	movs	r3, #1
 800a524:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800a528:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a52c:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800a530:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a534:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800a538:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a53c:	f107 0320 	add.w	r3, r7, #32
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f7fd fef6 	bl	8008334 <dcd_event_handler>
}
 800a548:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800a54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da1d      	bge.n	800a58c <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a552:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a556:	615a      	str	r2, [r3, #20]
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a55e:	2305      	movs	r3, #5
 800a560:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a564:	2301      	movs	r3, #1
 800a566:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800a56a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a56e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800a572:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a576:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800a57a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a57e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd fed5 	bl	8008334 <dcd_event_handler>
}
 800a58a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800a58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d022      	beq.n	800a5dc <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800a596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800a59c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d017      	beq.n	800a5d6 <dcd_int_handler+0x142>
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800a5b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a5bc:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800a5be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a5c4:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800a5c8:	f107 0314 	add.w	r3, r7, #20
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fd feb0 	bl	8008334 <dcd_event_handler>
}
 800a5d4:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a5d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5da:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800a5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d02e      	beq.n	800a644 <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 800a5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5e8:	2208      	movs	r2, #8
 800a5ea:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800a5ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5ee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800a5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b0 <dcd_int_handler+0x21c>)
 800a5fc:	79db      	ldrb	r3, [r3, #7]
 800a5fe:	f083 0301 	eor.w	r3, r3, #1
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	f023 0208 	bic.w	r2, r3, #8
 800a610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a612:	619a      	str	r2, [r3, #24]
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800a61a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a624:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a628:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800a62a:	2303      	movs	r3, #3
 800a62c:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a630:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a632:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a636:	f107 0308 	add.w	r3, r7, #8
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fd fe79 	bl	8008334 <dcd_event_handler>
}
 800a642:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800a644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d015      	beq.n	800a67a <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800a64e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f023 0210 	bic.w	r2, r3, #16
 800a656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a658:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fca5 	bl	8009fac <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800a662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	f003 0310 	and.w	r3, r3, #16
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1f5      	bne.n	800a65a <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800a66e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f043 0210 	orr.w	r2, r3, #16
 800a676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a678:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800a67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a67c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff fe8d 	bl	800a3a8 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800a68e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2101      	movs	r1, #1
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fe83 	bl	800a3a8 <handle_ep_irq>
  }
}
 800a6a2:	bf00      	nop
 800a6a4:	3760      	adds	r7, #96	@ 0x60
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800b088 	.word	0x0800b088
 800a6b0:	24000ae0 	.word	0x24000ae0

0800a6b4 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d112      	bne.n	800a6ec <dwc2_phy_init+0x38>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a704 <dwc2_phy_init+0x50>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d10e      	bne.n	800a6f8 <dwc2_phy_init+0x44>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 800a6da:	4b0b      	ldr	r3, [pc, #44]	@ (800a708 <dwc2_phy_init+0x54>)
 800a6dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a6e0:	4a09      	ldr	r2, [pc, #36]	@ (800a708 <dwc2_phy_init+0x54>)
 800a6e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6e6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      #else

      #endif
    }
  }
}
 800a6ea:	e005      	b.n	800a6f8 <dwc2_phy_init+0x44>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	40040000 	.word	0x40040000
 800a708:	58024400 	.word	0x58024400

0800a70c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d152      	bne.n	800a7c4 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800a71e:	4b2c      	ldr	r3, [pc, #176]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a2c      	ldr	r2, [pc, #176]	@ (800a7d4 <dwc2_phy_update+0xc8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d302      	bcc.n	800a72e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800a728:	2306      	movs	r3, #6
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	e041      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800a72e:	4b28      	ldr	r3, [pc, #160]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a29      	ldr	r2, [pc, #164]	@ (800a7d8 <dwc2_phy_update+0xcc>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d902      	bls.n	800a73e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800a738:	2307      	movs	r3, #7
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e039      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800a73e:	4b24      	ldr	r3, [pc, #144]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a26      	ldr	r2, [pc, #152]	@ (800a7dc <dwc2_phy_update+0xd0>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d302      	bcc.n	800a74e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800a748:	2308      	movs	r3, #8
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e031      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800a74e:	4b20      	ldr	r3, [pc, #128]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a23      	ldr	r2, [pc, #140]	@ (800a7e0 <dwc2_phy_update+0xd4>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d902      	bls.n	800a75e <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800a758:	2309      	movs	r3, #9
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e029      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800a75e:	4b1c      	ldr	r3, [pc, #112]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a20      	ldr	r2, [pc, #128]	@ (800a7e4 <dwc2_phy_update+0xd8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d902      	bls.n	800a76e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800a768:	230a      	movs	r3, #10
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e021      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800a76e:	4b18      	ldr	r3, [pc, #96]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e8 <dwc2_phy_update+0xdc>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d902      	bls.n	800a77e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800a778:	230b      	movs	r3, #11
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e019      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800a77e:	4b14      	ldr	r3, [pc, #80]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a1a      	ldr	r2, [pc, #104]	@ (800a7ec <dwc2_phy_update+0xe0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d302      	bcc.n	800a78e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800a788:	230c      	movs	r3, #12
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e011      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800a78e:	4b10      	ldr	r3, [pc, #64]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a17      	ldr	r2, [pc, #92]	@ (800a7f0 <dwc2_phy_update+0xe4>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d302      	bcc.n	800a79e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800a798:	230d      	movs	r3, #13
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	e009      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800a79e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d0 <dwc2_phy_update+0xc4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a14      	ldr	r2, [pc, #80]	@ (800a7f4 <dwc2_phy_update+0xe8>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d302      	bcc.n	800a7ae <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800a7a8:	230e      	movs	r3, #14
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e001      	b.n	800a7b2 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800a7ae:	230f      	movs	r3, #15
 800a7b0:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	029b      	lsls	r3, r3, #10
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	60da      	str	r2, [r3, #12]
  }
}
 800a7c4:	bf00      	nop
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	24000014 	.word	0x24000014
 800a7d4:	01e84800 	.word	0x01e84800
 800a7d8:	01a39ddf 	.word	0x01a39ddf
 800a7dc:	016e3600 	.word	0x016e3600
 800a7e0:	014ca43f 	.word	0x014ca43f
 800a7e4:	01312cff 	.word	0x01312cff
 800a7e8:	011a499f 	.word	0x011a499f
 800a7ec:	01067380 	.word	0x01067380
 800a7f0:	00f42400 	.word	0x00f42400
 800a7f4:	00e4e1c0 	.word	0x00e4e1c0

0800a7f8 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f043 0201 	orr.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a810:	b29b      	uxth	r3, r3
 800a812:	f244 2209 	movw	r2, #16905	@ 0x4209
 800a816:	4293      	cmp	r3, r2
 800a818:	d807      	bhi.n	800a82a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800a81a:	bf00      	nop
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f9      	bne.n	800a81c <reset_core+0x24>
 800a828:	e00e      	b.n	800a848 <reset_core+0x50>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800a82a:	bf00      	nop
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0f9      	beq.n	800a82c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	4b08      	ldr	r3, [pc, #32]	@ (800a860 <reset_core+0x68>)
 800a83e:	4013      	ands	r3, r2
 800a840:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800a848:	bf00      	nop
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dafb      	bge.n	800a84a <reset_core+0x52>
}
 800a852:	bf00      	nop
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	dffffffe 	.word	0xdffffffe

0800a864 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a878:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a880:	2100      	movs	r1, #0
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff ff16 	bl	800a6b4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff ffb5 	bl	800a7f8 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a894:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800a89c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff ff30 	bl	800a70c <dwc2_phy_update>
}
 800a8ac:	bf00      	nop
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8c8:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8ce:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d114      	bne.n	800a902 <phy_hs_init+0x4e>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f043 0310 	orr.w	r3, r3, #16
 800a8de:	60fb      	str	r3, [r7, #12]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0308 	bic.w	r3, r3, #8
 800a8e6:	60fb      	str	r3, [r7, #12]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8ee:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a8f6:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	e013      	b.n	800a92a <phy_hs_init+0x76>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f023 0310 	bic.w	r3, r3, #16
 800a908:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.phy_data_width) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a90e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <phy_hs_init+0x6e>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f043 0308 	orr.w	r3, r3, #8
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	e003      	b.n	800a92a <phy_hs_init+0x76>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f023 0308 	bic.w	r3, r3, #8
 800a928:	60fb      	str	r3, [r7, #12]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a934:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff feb9 	bl	800a6b4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff ff58 	bl	800a7f8 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a94e:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a954:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <phy_hs_init+0xb0>
 800a95e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800a962:	e001      	b.n	800a968 <phy_hs_init+0xb4>
 800a964:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a978:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff fec3 	bl	800a70c <dwc2_phy_update>
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a99c:	4b10      	ldr	r3, [pc, #64]	@ (800a9e0 <check_dwc2+0x50>)
 800a99e:	4013      	ands	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a9e4 <check_dwc2+0x54>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d012      	beq.n	800a9d0 <check_dwc2+0x40>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a9e8 <check_dwc2+0x58>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00e      	beq.n	800a9d0 <check_dwc2+0x40>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ec <check_dwc2+0x5c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00a      	beq.n	800a9d0 <check_dwc2+0x40>
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <check_dwc2+0x60>)
 800a9bc:	60bb      	str	r3, [r7, #8]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d000      	beq.n	800a9cc <check_dwc2+0x3c>
 800a9ca:	be00      	bkpt	0x0000
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e000      	b.n	800a9d2 <check_dwc2+0x42>
#endif

  return true;
 800a9d0:	2301      	movs	r3, #1
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	ffff0000 	.word	0xffff0000
 800a9e4:	4f540000 	.word	0x4f540000
 800a9e8:	55310000 	.word	0x55310000
 800a9ec:	55320000 	.word	0x55320000
 800a9f0:	e000edf0 	.word	0xe000edf0

0800a9f4 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;

#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d101      	bne.n	800aa0a <dwc2_core_is_highspeed+0x16>
    return false;
 800aa06:	2300      	movs	r3, #0
 800aa08:	e009      	b.n	800aa1e <dwc2_core_is_highspeed+0x2a>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  return dwc2->ghwcfg2_bm.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa0e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bf14      	ite	ne
 800aa18:	2301      	movne	r3, #1
 800aa1a:	2300      	moveq	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
 800aa36:	460b      	mov	r3, r1
 800aa38:	71bb      	strb	r3, [r7, #6]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	717b      	strb	r3, [r7, #5]
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d901      	bls.n	800aa4c <dwc2_core_init+0x20>
    rhport = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab3c <dwc2_core_init+0x110>)
 800aa50:	011b      	lsls	r3, r3, #4
 800aa52:	4413      	add	r3, r2
 800aa54:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa56:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800aa58:	69f8      	ldr	r0, [r7, #28]
 800aa5a:	f7ff ff99 	bl	800a990 <check_dwc2>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f083 0301 	eor.w	r3, r3, #1
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <dwc2_core_init+0x54>
 800aa6a:	4b35      	ldr	r3, [pc, #212]	@ (800ab40 <dwc2_core_init+0x114>)
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d000      	beq.n	800aa7c <dwc2_core_init+0x50>
 800aa7a:	be00      	bkpt	0x0000
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e058      	b.n	800ab32 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f023 0201 	bic.w	r2, r3, #1
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800aa8c:	79bb      	ldrb	r3, [r7, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800aa92:	69f8      	ldr	r0, [r7, #28]
 800aa94:	f7ff ff0e 	bl	800a8b4 <phy_hs_init>
 800aa98:	e002      	b.n	800aaa0 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800aa9a:	69f8      	ldr	r0, [r7, #28]
 800aa9c:	f7ff fee2 	bl	800a864 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f043 0207 	orr.w	r2, r3, #7
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800aab2:	f023 020f 	bic.w	r2, r3, #15
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	2310      	movs	r3, #16
 800aac2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800aac4:	7afb      	ldrb	r3, [r7, #11]
 800aac6:	019b      	lsls	r3, r3, #6
 800aac8:	f043 0220 	orr.w	r2, r3, #32
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800aad0:	bf00      	nop
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	f003 0320 	and.w	r3, r3, #32
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1f9      	bne.n	800aad2 <dwc2_core_init+0xa6>
}
 800aade:	bf00      	nop
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	2210      	movs	r2, #16
 800aae8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800aaea:	bf00      	nop
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f9      	bne.n	800aaec <dwc2_core_init+0xc0>
}
 800aaf8:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	f04f 32ff 	mov.w	r2, #4294967295
 800ab08:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800ab10:	797b      	ldrb	r3, [r7, #5]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	609a      	str	r2, [r3, #8]
 800ab22:	e005      	b.n	800ab30 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	f043 0210 	orr.w	r2, r3, #16
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800ab30:	2301      	movs	r3, #1
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800b0a8 	.word	0x0800b0a8
 800ab40:	e000edf0 	.word	0xe000edf0

0800ab44 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800ab44:	b480      	push	{r7}
 800ab46:	b08f      	sub	sp, #60	@ 0x3c
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab58:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800ab5a:	88fb      	ldrh	r3, [r7, #6]
 800ab5c:	089b      	lsrs	r3, r3, #2
 800ab5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800ab60:	e00b      	b.n	800ab7a <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab6a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	6a3a      	ldr	r2, [r7, #32]
 800ab70:	601a      	str	r2, [r3, #0]
}
 800ab72:	bf00      	nop
    dst += 4;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	3304      	adds	r3, #4
 800ab78:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800ab7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab7c:	1e5a      	subs	r2, r3, #1
 800ab7e:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ee      	bne.n	800ab62 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800ab84:	88fb      	ldrh	r3, [r7, #6]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800ab90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d020      	beq.n	800abda <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800abaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d907      	bls.n	800abc2 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3301      	adds	r3, #1
 800abb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abb8:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	0a12      	lsrs	r2, r2, #8
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800abc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d907      	bls.n	800abda <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	3302      	adds	r3, #2
 800abce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abd0:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	0c12      	lsrs	r2, r2, #16
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800abda:	bf00      	nop
 800abdc:	373c      	adds	r7, #60	@ 0x3c
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800abe6:	b480      	push	{r7}
 800abe8:	b08b      	sub	sp, #44	@ 0x2c
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	461a      	mov	r2, r3
 800abf2:	460b      	mov	r3, r1
 800abf4:	72fb      	strb	r3, [r7, #11]
 800abf6:	4613      	mov	r3, r2
 800abf8:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800abfa:	7afb      	ldrb	r3, [r7, #11]
 800abfc:	3301      	adds	r3, #1
 800abfe:	031b      	lsls	r3, r3, #12
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800ac06:	893b      	ldrh	r3, [r7, #8]
 800ac08:	089b      	lsrs	r3, r3, #2
 800ac0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800ac0c:	e008      	b.n	800ac20 <dfifo_write_packet+0x3a>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	601a      	str	r2, [r3, #0]
    src += 4;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800ac20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac22:	1e5a      	subs	r2, r3, #1
 800ac24:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f1      	bne.n	800ac0e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800ac2a:	893b      	ldrh	r3, [r7, #8]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800ac34:	7efb      	ldrb	r3, [r7, #27]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d019      	beq.n	800ac6e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800ac40:	7efb      	ldrb	r3, [r7, #27]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d906      	bls.n	800ac54 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	021b      	lsls	r3, r3, #8
 800ac4e:	6a3a      	ldr	r2, [r7, #32]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800ac54:	7efb      	ldrb	r3, [r7, #27]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d906      	bls.n	800ac68 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	041b      	lsls	r3, r3, #16
 800ac62:	6a3a      	ldr	r2, [r7, #32]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	6a3a      	ldr	r2, [r7, #32]
 800ac6c:	601a      	str	r2, [r3, #0]
  }
}
 800ac6e:	bf00      	nop
 800ac70:	372c      	adds	r7, #44	@ 0x2c
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800ac7a:	b480      	push	{r7}
 800ac7c:	b085      	sub	sp, #20
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <tu_edpt_claim+0x26>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <tu_edpt_claim+0x2a>
 800aca0:	2300      	movs	r3, #0
 800aca2:	e01e      	b.n	800ace2 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d108      	bne.n	800acc4 <tu_edpt_claim+0x4a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <tu_edpt_claim+0x4a>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <tu_edpt_claim+0x4c>
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d004      	beq.n	800ace0 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	7813      	ldrb	r3, [r2, #0]
 800acda:	f043 0304 	orr.w	r3, r3, #4
 800acde:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800acee:	b480      	push	{r7}
 800acf0:	b085      	sub	sp, #20
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d108      	bne.n	800ad18 <tu_edpt_release+0x2a>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <tu_edpt_release+0x2a>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e000      	b.n	800ad1a <tu_edpt_release+0x2c>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73fb      	strb	r3, [r7, #15]
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	7813      	ldrb	r3, [r2, #0]
 800ad2e:	f36f 0382 	bfc	r3, #2, #1
 800ad32:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
 800ad44:	b480      	push	{r7}
 800ad46:	b08b      	sub	sp, #44	@ 0x2c
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	889b      	ldrh	r3, [r3, #4]
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad5e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800ad60:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	78db      	ldrb	r3, [r3, #3]
 800ad66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d03e      	beq.n	800adee <tu_edpt_validate+0xaa>
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	dc53      	bgt.n	800ae1c <tu_edpt_validate+0xd8>
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d002      	beq.n	800ad7e <tu_edpt_validate+0x3a>
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d018      	beq.n	800adae <tu_edpt_validate+0x6a>
 800ad7c:	e04e      	b.n	800ae1c <tu_edpt_validate+0xd8>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d102      	bne.n	800ad8a <tu_edpt_validate+0x46>
 800ad84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad88:	e001      	b.n	800ad8e <tu_edpt_validate+0x4a>
 800ad8a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800ad8e:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800ad90:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ad92:	8afb      	ldrh	r3, [r7, #22]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d943      	bls.n	800ae20 <tu_edpt_validate+0xdc>
 800ad98:	4b27      	ldr	r3, [pc, #156]	@ (800ae38 <tu_edpt_validate+0xf4>)
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d000      	beq.n	800adaa <tu_edpt_validate+0x66>
 800ada8:	be00      	bkpt	0x0000
 800adaa:	2300      	movs	r3, #0
 800adac:	e03e      	b.n	800ae2c <tu_edpt_validate+0xe8>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d10e      	bne.n	800add2 <tu_edpt_validate+0x8e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800adb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adba:	d033      	beq.n	800ae24 <tu_edpt_validate+0xe0>
 800adbc:	4b1e      	ldr	r3, [pc, #120]	@ (800ae38 <tu_edpt_validate+0xf4>)
 800adbe:	61bb      	str	r3, [r7, #24]
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d000      	beq.n	800adce <tu_edpt_validate+0x8a>
 800adcc:	be00      	bkpt	0x0000
 800adce:	2300      	movs	r3, #0
 800add0:	e02c      	b.n	800ae2c <tu_edpt_validate+0xe8>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800add2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800add4:	2b40      	cmp	r3, #64	@ 0x40
 800add6:	d925      	bls.n	800ae24 <tu_edpt_validate+0xe0>
 800add8:	4b17      	ldr	r3, [pc, #92]	@ (800ae38 <tu_edpt_validate+0xf4>)
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d000      	beq.n	800adea <tu_edpt_validate+0xa6>
 800ade8:	be00      	bkpt	0x0000
 800adea:	2300      	movs	r3, #0
 800adec:	e01e      	b.n	800ae2c <tu_edpt_validate+0xe8>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d102      	bne.n	800adfa <tu_edpt_validate+0xb6>
 800adf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adf8:	e000      	b.n	800adfc <tu_edpt_validate+0xb8>
 800adfa:	2340      	movs	r3, #64	@ 0x40
 800adfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800adfe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ae00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d910      	bls.n	800ae28 <tu_edpt_validate+0xe4>
 800ae06:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <tu_edpt_validate+0xf4>)
 800ae08:	623b      	str	r3, [r7, #32]
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d000      	beq.n	800ae18 <tu_edpt_validate+0xd4>
 800ae16:	be00      	bkpt	0x0000
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e007      	b.n	800ae2c <tu_edpt_validate+0xe8>
      break;
    }

    default:
      return false;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e005      	b.n	800ae2c <tu_edpt_validate+0xe8>
      break;
 800ae20:	bf00      	nop
 800ae22:	e002      	b.n	800ae2a <tu_edpt_validate+0xe6>
      break;
 800ae24:	bf00      	nop
 800ae26:	e000      	b.n	800ae2a <tu_edpt_validate+0xe6>
      break;
 800ae28:	bf00      	nop
  }

  return true;
 800ae2a:	2301      	movs	r3, #1
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	372c      	adds	r7, #44	@ 0x2c
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	e000edf0 	.word	0xe000edf0

0800ae3c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ae3c:	b480      	push	{r7}
 800ae3e:	b08d      	sub	sp, #52	@ 0x34
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4611      	mov	r1, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	80fb      	strh	r3, [r7, #6]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae5a:	4413      	add	r3, r2
 800ae5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800ae5e:	e027      	b.n	800aeb0 <tu_edpt_bind_driver+0x74>
 800ae60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae62:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	3301      	adds	r3, #1
 800ae68:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800ae6a:	2b05      	cmp	r3, #5
 800ae6c:	d116      	bne.n	800ae9c <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800ae6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae70:	789b      	ldrb	r3, [r3, #2]
 800ae72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae7a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ae7c:	7fbb      	ldrb	r3, [r7, #30]
 800ae7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae82:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae8e:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ae90:	7ffa      	ldrb	r2, [r7, #31]
 800ae92:	09d2      	lsrs	r2, r2, #7
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	4611      	mov	r1, r2
 800ae98:	797a      	ldrb	r2, [r7, #5]
 800ae9a:	545a      	strb	r2, [r3, r1]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800aeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800aeb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d3d3      	bcc.n	800ae60 <tu_edpt_bind_driver+0x24>
  }
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	3734      	adds	r7, #52	@ 0x34
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <memset>:
 800aec6:	4402      	add	r2, r0
 800aec8:	4603      	mov	r3, r0
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d100      	bne.n	800aed0 <memset+0xa>
 800aece:	4770      	bx	lr
 800aed0:	f803 1b01 	strb.w	r1, [r3], #1
 800aed4:	e7f9      	b.n	800aeca <memset+0x4>
	...

0800aed8 <__libc_init_array>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	4d0d      	ldr	r5, [pc, #52]	@ (800af10 <__libc_init_array+0x38>)
 800aedc:	4c0d      	ldr	r4, [pc, #52]	@ (800af14 <__libc_init_array+0x3c>)
 800aede:	1b64      	subs	r4, r4, r5
 800aee0:	10a4      	asrs	r4, r4, #2
 800aee2:	2600      	movs	r6, #0
 800aee4:	42a6      	cmp	r6, r4
 800aee6:	d109      	bne.n	800aefc <__libc_init_array+0x24>
 800aee8:	4d0b      	ldr	r5, [pc, #44]	@ (800af18 <__libc_init_array+0x40>)
 800aeea:	4c0c      	ldr	r4, [pc, #48]	@ (800af1c <__libc_init_array+0x44>)
 800aeec:	f000 f826 	bl	800af3c <_init>
 800aef0:	1b64      	subs	r4, r4, r5
 800aef2:	10a4      	asrs	r4, r4, #2
 800aef4:	2600      	movs	r6, #0
 800aef6:	42a6      	cmp	r6, r4
 800aef8:	d105      	bne.n	800af06 <__libc_init_array+0x2e>
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	f855 3b04 	ldr.w	r3, [r5], #4
 800af00:	4798      	blx	r3
 800af02:	3601      	adds	r6, #1
 800af04:	e7ee      	b.n	800aee4 <__libc_init_array+0xc>
 800af06:	f855 3b04 	ldr.w	r3, [r5], #4
 800af0a:	4798      	blx	r3
 800af0c:	3601      	adds	r6, #1
 800af0e:	e7f2      	b.n	800aef6 <__libc_init_array+0x1e>
 800af10:	0800b1d4 	.word	0x0800b1d4
 800af14:	0800b1d4 	.word	0x0800b1d4
 800af18:	0800b1d4 	.word	0x0800b1d4
 800af1c:	0800b1d8 	.word	0x0800b1d8

0800af20 <memcpy>:
 800af20:	440a      	add	r2, r1
 800af22:	4291      	cmp	r1, r2
 800af24:	f100 33ff 	add.w	r3, r0, #4294967295
 800af28:	d100      	bne.n	800af2c <memcpy+0xc>
 800af2a:	4770      	bx	lr
 800af2c:	b510      	push	{r4, lr}
 800af2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af36:	4291      	cmp	r1, r2
 800af38:	d1f9      	bne.n	800af2e <memcpy+0xe>
 800af3a:	bd10      	pop	{r4, pc}

0800af3c <_init>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <_fini>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr
